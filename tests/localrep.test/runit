#!/usr/bin/env bash

env
dbname=$1
NRECS=1000
NRUNS=10000

set -x

failexit()
{
    echo "Failed $1"
    exit -1
}


assertcnt ()
{
    local tbl=$1
    local target=$2
    local cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbname default "select count(*) from $tbl")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "tbl $tbl count is now $cnt but should be $target"
    fi
}

if [ ! -f ${TESTSBUILDDIR}/localrep ] ; then
    failexit "executable ${TESTSBUILDDIR}/localrep does not exist"
fi

cdb2sql ${CDB2_OPTIONS} $dbname default 'create table t1 {
schema {
    int id

    short a null=yes
    int b null=yes
    u_short c null=yes
    u_int d null=yes
    longlong e null=yes
    float f null=yes
    double g null=yes
    cstring h[10] null=yes
    blob i null=yes
    datetime j null=yes

    longlong comdb2_seqno null=yes
}

keys {
    dup "comdb2_seqno" = comdb2_seqno
}
}
'
cdb2sql ${CDB2_OPTIONS} $dbname default 'create table t2 (i int)'

cdb2sql ${CDB2_OPTIONS} $dbname default 'create table comdb2_oplog {
schema {
    longlong seqno
    int      blkpos
    int      optype
    blob     ops         null=yes
}

tag "log" {
    longlong seqno
    int      optype
    int      blkpos
    blob     ops
}

tag "justseq" {
    longlong seqno
    int      blkpos
    int      optype
}

keys {
    "seqno" = seqno + blkpos
}
}
'


cdb2sql ${CDB2_OPTIONS} $dbname default 'alter table comdb2_oplog {
schema {
    longlong seqno
    int      blkpos
    int      optype
    blob     ops         null=yes
}

tag "log" {
    longlong seqno
    int      optype
    int      blkpos
    blob     ops
}

tag "justseq" {
    longlong seqno
    int      blkpos
    int      optype
}

keys {
    "seqno" = seqno + blkpos
}
}
'

echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values (1, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());" | cdb2sql -s ${CDB2_OPTIONS} $dbname default - >/dev/null
assertcnt t1 1

i=2
echo "begin 
insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values (2, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());
insert into t2 values(1)
insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values (3, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());
insert into t2 values(2) 
commit" | cdb2sql -s ${CDB2_OPTIONS} $dbname default - >/dev/null

assertcnt t1 3
assertcnt t2 2

for i in $(seq 4 $NRECS); do
    echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values ($i, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());"
done | cdb2sql -s ${CDB2_OPTIONS} $dbname default - >/dev/null

assertcnt t1 $NRECS

for i in $(seq 1 $NRUNS); do
    what=$(($RANDOM % 3))
    id=$(($RANDOM % $NRECS))
    case $what in
        0)  echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values ($id, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());"
        ;;
        1)  echo "delete from t1 where id = $id limit 1"
        ;;
        2)  echo "update t1 set a=a+1, b=b+2 where id=$id"
        ;;
    esac
done | cdb2sql -s ${CDB2_OPTIONS} $dbname default - >/dev/null


destdb=${TESTCASE}dest${TESTID}
DBNAME=$destdb
DBDIR=$TESTDIR/$DBNAME
DEST_CDB2_CONFIG=$DBDIR/comdb2db.cfg
DEST_CDB2_OPTIONS="--cdb2cfg $DEST_CDB2_CONFIG"
CLUSTER="" #run only locally
echo "do reql events detailed on" > lrl.options #we don't want the 'replicate_local' lrl option

#use setup because we need the event logs
CLUSTER=""  CDB2_CONFIG="$DEST_CDB2_CONFIG" CDB2_OPTIONS="$DEST_CDB2_OPTIONS" $TESTSROOTDIR/setup &> $TESTDIR/logs/$DBNAME.setup

cdb2sql ${DEST_CDB2_OPTIONS} $destdb local 'create table t1 {
schema {
    int id

    short a null=yes
    int b null=yes
    u_short c null=yes
    u_int d null=yes
    longlong e null=yes
    float f null=yes
    double g null=yes
    cstring h[10] null=yes
    blob i null=yes
    datetime j null=yes

    longlong comdb2_seqno null=yes
}

keys {
    dup "comdb2_seqno" = comdb2_seqno
}
}
'

cdb2sql ${DEST_CDB2_OPTIONS} $destdb local 'create table comdb2_oplog {
schema {
    longlong seqno
    int      blkpos
    int      optype
    blob     ops         null=yes
}

tag "log" {
    longlong seqno
    int      optype
    int      blkpos
    blob     ops
}

tag "justseq" {
    longlong seqno
    int      blkpos
    int      optype
}

keys {
    "seqno" = seqno + blkpos
}
}
'

# finally run the replication step
${TESTSBUILDDIR}/localrep $dbname $destdb &> replication1.out
src=$(cdb2sql ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | tee src.out | md5sum)
dest=$(cdb2sql ${DEST_CDB2_OPTIONS} $destdb local "select * from t1" | sort | tee dest.out | md5sum)
echo "src $src dest $dest"

echo "Testing truncate table"
cdb2sql ${CDB2_OPTIONS} $dbname default "truncate t1"
# run the replication step
${TESTSBUILDDIR}/localrep $dbname $destdb &> replication2.out
src2=$(cdb2sql ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | tee src2.out | md5sum)
dest2=$(cdb2sql ${DEST_CDB2_OPTIONS} $destdb local "select * from t1" | sort | tee dest2.out | md5sum)
echo "src2 $src2 dest2 $dest2"

successful=1
if [[ "$src" != "$dest" ]]; then
    echo see diff by doing vimdiff src.out dest.out
    successful=0
fi

if [[ "$src2" != "$dest2" ]]; then
    echo "truncate failed"
    echo see diff by doing vimdiff src2.out dest2.out
    successful=0
fi

#unsetup DBNAME which is the dest db
CLUSTER=""  CDB2_CONFIG="$DEST_CDB2_CONFIG" CDB2_OPTIONS="$DEST_CDB2_OPTIONS" $TESTSROOTDIR/unsetup $successful &> $TESTDIR/logs/$DBNAME.unsetup

if [[ "$successful" != "1" ]]; then
    exit 1
fi

exit 0

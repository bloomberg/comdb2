#!/usr/bin/env bash

env
dbname=$1
NRECS=1000
NRUNS=10000

set -x

cdb2sql ${CDB2_OPTIONS} $dbname default 'create table t1 {
schema {
    int id

    short a null=yes
    int b null=yes
    u_short c null=yes
    u_int d null=yes
    longlong e null=yes
    float f null=yes
    double g null=yes
    cstring h[10] null=yes
    blob i null=yes
    datetime j null=yes

    longlong comdb2_seqno null=yes
}

keys {
    dup "comdb2_seqno" = comdb2_seqno
}
}
'

cdb2sql ${CDB2_OPTIONS} $dbname default 'create table comdb2_oplog {
schema {
    longlong seqno
    int      blkpos
    int      optype
    blob     ops         null=yes
}

tag "log" {
    longlong seqno
    int      optype
    int      blkpos
    blob     ops
}

tag "justseq" {
    longlong seqno
    int      blkpos
    int      optype
}

keys {
    "seqno" = seqno + blkpos
}
}
'


for i in $(seq 1 $NRECS); do
    echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values ($i, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());"
done | cdb2sql -s ${CDB2_OPTIONS} $dbname default - >/dev/null

for i in $(seq 1 $NRUNS); do
    what=$(($RANDOM % 3))
    id=$(($RANDOM % $NRECS))
    case $what in
        0)  echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values ($id, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());"
        ;;
        1)  echo "delete from t1 where id = $id limit 1"
        ;;
        2)  echo "update t1 set a=a+1, b=b+2 where id=$id"
        ;;
    esac
done | cdb2sql -s ${CDB2_OPTIONS} $dbname default - >/dev/null

destdb=${TESTCASE}dest${TESTID}
DBDIR=${DBDIR}/$destdb
mkdir -p $DBDIR

cat > $DBDIR/${destdb}.lrl <<EOF
name    $destdb
dir     $DBDIR
EOF

df $DBDIR | awk '{print $1 }' | grep "tmpfs\|nfs" && echo "setattr directio 0" >> $DBDIR/${destdb}.lrl

if [ -n "$PMUXPORT" ] ; then
    echo "portmux_port $PMUXPORT" >> $DBDIR/${destdb}.lrl
    echo "portmux_bind_path $pmux_socket" >> $DBDIR/${destdb}.lrl
fi

comdb2 $destdb -create -lrl $DBDIR/${destdb}.lrl 
comdb2 $destdb -lrl $DBDIR/${destdb}.lrl -pidfile $DBDIR/${destdb}.pid &

out=
while [[ "$out" != "1" ]]; do
    out=$(cdb2sql --tabs ${CDB2_OPTIONS} $destdb local 'select 1' 2>/dev/null)
    sleep 1
done

cdb2sql ${CDB2_OPTIONS} $destdb local 'create table t1 {
schema {
    int id

    short a null=yes
    int b null=yes
    u_short c null=yes
    u_int d null=yes
    longlong e null=yes
    float f null=yes
    double g null=yes
    cstring h[10] null=yes
    blob i null=yes
    datetime j null=yes

    longlong comdb2_seqno null=yes
}

keys {
    dup "comdb2_seqno" = comdb2_seqno
}
}
'

cdb2sql ${CDB2_OPTIONS} $destdb local 'create table comdb2_oplog {
schema {
    longlong seqno
    int      blkpos
    int      optype
    blob     ops         null=yes
}

tag "log" {
    longlong seqno
    int      optype
    int      blkpos
    blob     ops
}

tag "justseq" {
    longlong seqno
    int      blkpos
    int      optype
}

keys {
    "seqno" = seqno + blkpos
}
}
'

# finally run the replication step
${TESTSBUILDDIR}/localrep $dbname $destdb
src=$(cdb2sql ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | md5sum)
dest=$(cdb2sql ${CDB2_OPTIONS} $destdb local "select * from t1" | sort | md5sum)

echo "src $src dest $dest"
kill -9 $(cat $DBDIR/${destdb}.pid)

echo deregister from pmux ${destdb}
${TESTSROOTDIR}/tools/send_msg_port.sh "del comdb2/replication/${destdb} " ${pmux_port}

if [[ "$src" != "$dest" ]]; then
    exit 1
else
    exit 0
fi

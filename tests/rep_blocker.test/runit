#!/usr/bin/env bash
bash -n "$0" | exit 1

set -e

dbnm=$1

rep=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select host from comdb2_cluster where is_master="N" limit 1'`

if [[ -z "${rep}" ]]; then
    echo "skipping, it's a cluster test"
    exit 0;
fi

host=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $rep 'select comdb2_host()'`
logfile="${TESTDIR}/logs/${dbnm}.${host}.db"

cdb2sql ${CDB2_OPTIONS} $dbnm --host $rep 'create table t1(i int)'
cdb2sql ${CDB2_OPTIONS} $dbnm --host $rep 'insert into t1 select * from generate_series(1, 10)'
cdb2sql ${CDB2_OPTIONS} $dbnm --host $rep 'select *, sleep(1) from t1 order by 1' &
cdb2sql ${CDB2_OPTIONS} $dbnm --host $rep 'select *, sleep(1) from t1 order by 1' &
sleep 2

# on replicant, the replication thread gets blocked while applying changes
# for the following update 
cdb2sql ${CDB2_OPTIONS} $dbnm --host $rep 'update t1 set i=i+1' &
sleep 3  

# by now, we should have the blocker 'select' commands logged in the
# replicant's log

# dump all the statements blocking the replication thread
blockers=`cdb2sql ${CDB2_OPTIONS} $dbnm --host $rep 'exec procedure sys.cmd.send("sql dump repblockers")'`

wait

cmd_count=`echo "${blockers}" | wc -l`
# we should expect 2 blockers
if  [[ ${cmd_count} -ne 2 ]]; then
    echo "invalid number of blocking commands (got: ${cmd_count}, expected: 2)"
    exit 1
fi

# also ensure that we see the blocking statements in the replicant log
cmd_count=`grep "select \*, sleep" ${logfile} | wc -l`
# we should expect at least 2 blocking commands
if  [[ ${cmd_count} -lt 2 ]]; then
    echo "invalid number of blocking commands in replicant log (got: ${cmd_count}, expected >= 2)"
    exit 1
fi

echo "test passed"
exit 0

#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export maxrecord=100
export recordcount=5
export stopfile=./stopfile.txt
export updaters=4
export limit=1
export pidlist=""
#export verbose=1

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    for p in $pidlist; do
        kill -9 $p
    done
    echo "Failed: $1"
    exit -1
}

function verify_up
{
    [[ $debug == "1" ]] && set -x
    typeset func="verify_up"
    write_prompt $func "Running $func"
    typeset node=$1
    typeset count=0
    typeset r=1
    while [[ "$r" -ne "0" && "$count" -lt 10 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1" >/dev/null 2>&1
        r=$?
        [[ $r != 0 ]] && sleep 1
        let count=count+1
    done
    [[ $r != 0 ]] && failexit "node $node did not recover in time"
}

function updater
{
    [[ $debug == "1" ]] && set -x
    typeset func="updater-$1"
    typeset first=1
    typeset r=0
    typeset cnt=0

    coproc $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default - 2>&1
    export pidlist="$COPROC_PID $pidlist"

    echo "set transaction read committed" >&"${COPROC[1]}"
    
    while [[ ! -f $stopfile ]]; do

        typeset r0=$(( ( RANDOM % maxrecord ) + 1 ))
        typeset r1=$(( ( RANDOM % maxrecord ) + 1 ))
        typeset r2=$(( ( RANDOM % maxrecord ) + 1 ))

        echo "selectv count(*) from t1 where a = $r0" >&"${COPROC[1]}"
        if [[ "$first" == "1" ]]; then
            read -r o <&"${COPROC[0]}" ; [[ "$verbose" == 1 ]] && write_prompt $func "set transaction: $o"
            first=0
        fi

        read -r o <&"${COPROC[0]}" ; [[ "$verbose" == 1 ]] && write_prompt $func "selectv: $o"

        read -r -t 0 x <&"${COPROC[0]}" 
        r=$?
        while [[ $r == 0 ]] ; do
            read -r -t 1 x <&"${COPROC[0]}" 
            read -r -t 0 y <&"${COPROC[0]}" 
            r=$?
            [[ "$verbose" == 1 ]] && write_prompt $func "selectv: $x"
        done

        echo "update t1 set a = $r2 where a = $r1 limit $limit" >&"${COPROC[1]}"
        read -r o <&"${COPROC[0]}" ; [[ "$verbose" == 1 ]] && write_prompt $func "update: $o"

        read -r -t 0 y <&"${COPROC[0]}" 
        r=$?
        while [[ $r == 0 ]] ; do
            read -r -t 1 x <&"${COPROC[0]}"
            read -r -t 0 y <&"${COPROC[0]}" 
            r=$?
            [[ "$verbose" == 1 ]] && write_prompt $func "update: $x"
        done

        [[ "$o" == *"Timeout while reading response"* ]] && failexit "Possible replay error:$o"
        let cnt=cnt+1
        [[ $(( cnt % 100 )) == 0 ]] && write_prompt $func "Completed $cnt iterations"
    done
    echo "quit" >&"${COPROC[1]}"
    sleep 1
}

function populate_table
{
    [[ $debug == "1" ]] && set -x
    typeset func="populate_table"
    typeset j=0
    write_prompt $func "Running $func"

    while [[ $j -lt $recordcount ]]; do
        x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 select value from generate_series(1, $maxrecord)" 2>&1)
        [[ $? -ne 0 ]] && failexit "Failed populating t1: $x"
        write_prompt $func "Added $maxrecord records"
        let j=j+1
    done
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    typeset maxtime=540
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))
    typeset j=0

    write_prompt $func "Running $func"

    rm $stopfile

    create_table
    create_index
    populate_table

    while [[ $j -lt $updaters ]]; do
        updater $j &
        let j=j+1
    done

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        if [[ -z "$CLUSTER" ]]; then
            verify_up $(hostname)
        else
            for node in $CLUSTER; do
                verify_up $node
            done
        fi
        sleep 1
    done

    # Different thread failed the test
    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait
}

run_test
echo "Success"

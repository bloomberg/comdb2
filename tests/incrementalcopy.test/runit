#!/usr/bin/env bash
# Test incremental copy
export debug=1
[[ $debug == 1 ]] && set -x

# Write 10k rows.  Bring one node down.  Write another 1k rows.  Copy and
# bring up db.  Make sure it passes verify, and has 10k rows after copy.

set -e

export dbname=$1
export default=local

# Export variables for comdb2 tools so we can call them directly from tests
export cdb2sql=${SRCHOME}/cdb2sql
export comdb2ar=${SRCHOME}/comdb2ar
export comdb2=${SRCHOME}/comdb2


nrecs=10000
morerecs=1000
lrl="${DBDIR}/${dbname}.lrl"

if [[ -z "$CLUSTER" ]]; then
    echo 'Cluster-only test, skipping'
    exit 0
fi

typeset -a nodes
read -r -a nodes <<< $CLUSTER
target=${nodes[$(($RANDOM % ${#nodes[@]}))]}

${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname $default "create table t (a int, b cstring(100))"

schema=$(${CDB2SQL_EXE} ${CDB2_OPTIONS} -tabs $dbname $default "select csc2 from sqlite_master where tbl_name='t' and type='table'")
echo "schema is $schema"

${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname $default "alter table t options rec none, rebuild {$schema}"

for i in $(seq 1 $nrecs); do
    echo "insert into t(a, b) values($i, '')"
done | ${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname $default - >/dev/null

# create a partials tarball
ssh $target $COMDB2AR_EXE p $lrl > partials.lrl

rm -fr partials
mkdir partials
tar xf partials.lrl -C partials 

# take down the target db
ssh $target "${CDB2SQL_EXE} $dbname local 'exec procedure sys.cmd.send.(\"exit\")'"

# insert some more rows
for i in $(seq 1 $morerecs); do
    echo "insert into t(a, b) values($i, '')"
done | ${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname $default - >/dev/null

# create a partial backup
$COMDB2AR_EXE -I inc -b partials $lrl > backup.tar

scp backup.tar $target:$pwd

# restore
ssh $target $COMDB2AR_EXE P $lrl < $pwd/backup.tar

# bring back up
ssh $target ${COMDB2_EXE} $dbname -lrl $lrl &
# todo loop until up
sleep 30

ssh $target $comdb2sql ${CDB2_OPTIONS} -tabs "exec procedure sys.cmd.verify('t')"
target_count=$(ssh $target $comdb2sql ${CDB2_OPTIONS} -tabs $dbname local "select count(*) from t")
if [[ $target_count != $(($nrecs + $morerecs)) ]]; then
    echo "Wrong count expected $(($nrecs + $morerecs)) got $target_count"
    exit 1
fi
exit 0

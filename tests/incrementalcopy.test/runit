#!/usr/bin/env bash
# Test incremental copy
export debug=1
[[ $debug == 1 ]] && set -x

# Write 10k rows.  Bring one node down.  Write another 1k rows.  Copy and
# bring up db.  Make sure it passes verify, and has 10k rows after copy.

#set -e
export sleeptime=15

export dbname=$1
#export default=local

# Export variables for comdb2 tools so we can call them directly from tests
LOCTMPDIR=$TMPDIR/$dbname
mkdir $LOCTMPDIR

nrecs=10000
morerecs=1000
lrl="${DBDIR}/${dbname}.lrl"

if [[ -z "$CLUSTER" ]]; then
    echo 'Cluster-only test, skipping'
    exit 0
fi

typeset -a nodes
read -r -a nodes <<< $CLUSTER
idx=$RANDOM

function getmaster {
    r=1
    while [[ $r != 0 ]]; do 
        x=$(${CDB2SQL_EXE} --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]')
        r=$?
    done
    echo $x
}

master=$(getmaster)

target=${nodes[$(($idx % ${#nodes[@]}))]}
while [[ $target == $master ]]; do
    let idx=idx+1
    target=${nodes[$(($idx % ${#nodes[@]}))]}
done

backup=${nodes[$(( ( $idx + 1 ) % ${#nodes[@]}))]}

${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname default "create table t (a int, b cstring(100))"

schema=$(${CDB2SQL_EXE} ${CDB2_OPTIONS} -tabs $dbname default "select csc2 from sqlite_master where tbl_name='t' and type='table'")
echo "schema is $schema"

${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname default "alter table t options rec none, rebuild {$schema}"

cnt=0
for i in $(seq 1 $nrecs); do
    ${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname default "insert into t(a,b) values ($i, '')"
    if [[ $? == 0 ]]; then let cnt=cnt+1 ; fi
done 

ssh $master "${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname local \"exec procedure sys.cmd.send('pushnext')\"" < /dev/null
ssh $target "${CDB2SQL_EXE} $dbname local 'exec procedure sys.cmd.send(\"flush\")'" < /dev/null
sleep $sleeptime

# create a partials tarball
ssh $target $COMDB2AR_EXE p $lrl > partials.tar < /dev/null
sleep $sleeptime
kill -9 $(cat ${TMPDIR}/${dbname}.${target}.pid)
sleep $sleeptime
#ssh $target "${CDB2SQL_EXE} $dbname local 'exec procedure sys.cmd.send(\"exit\")'" < /dev/null

# insert some more rows
for i in $(seq 1 $morerecs); do
    ${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname default "insert into t(a,b) values($i,'')"
    if [[ $? == 0 ]]; then let cnt=cnt+1 ; fi
done

ssh $master "${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname local \"exec procedure sys.cmd.send('pushnext')\"" < /dev/null
ssh $master "${CDB2SQL_EXE} ${CDB2_OPTIONS} $dbname local \"exec procedure sys.cmd.send('pushnext')\"" < /dev/null

ssh $backup "rm -Rf $LOCTMPDIR/partials" < /dev/null
ssh $backup "mkdir -p $LOCTMPDIR/partials" < /dev/null
sleep $sleeptime

scp partials.tar $backup:$LOCTMPDIR/partials.tar
ssh $backup "tar xf $LOCTMPDIR/partials.tar -C $LOCTMPDIR/partials" < /dev/null
ssh $backup "${CDB2SQL_EXE} $dbname local 'exec procedure sys.cmd.send(\"flush\")'" < /dev/null
sleep $sleeptime

# create a partial backup
ssh $backup "$COMDB2AR_EXE c -I inc -b $LOCTMPDIR/partials $lrl" > $LOCTMPDIR/backup.tar < /dev/null

ssh $target "mkdir -p $LOCTMPDIR" < /dev/null
scp $LOCTMPDIR/backup.tar $target:$LOCTMPDIR/backup.tar

# restore
ssh $target "$COMDB2AR_EXE P $lrl < $LOCTMPDIR/backup.tar" < /dev/null

sleep $sleeptime

# Bring other nodes down
for node in $CLUSTER ; do 
    kill -9 $(cat ${TMPDIR}/${dbname}.${node}.pid)
     #ssh $node "${CDB2SQL_EXE} $dbname local 'exec procedure sys.cmd.send(\"exit\")'" < /dev/null
done

newlrl="${DBDIR}/${dbname}.local.lrl"
egrep -v "cluster nodes" $lrl > $newlrl
scp $newlrl $target:$newlrl

# bring back up
ssh $target ${COMDB2_EXE} $dbname -lrl $newlrl < /dev/null &

sleep 30

ssh $target "${CDB2SQL_EXE} ${CDB2_OPTIONS} -tabs $dbname local \"exec procedure sys.cmd.verify('t')\"" < /dev/null

target_count=$(ssh $target "${CDB2SQL_EXE} ${CDB2_OPTIONS} -tabs $dbname local \"select count(*) from t\"" < /dev/null)
ssh $target "${CDB2SQL_EXE} $dbname local 'exec procedure sys.cmd.send(\"exit\")'" < /dev/null

if [[ $target_count != $cnt ]]; then
    echo "Wrong count expected $(($nrecs + $morerecs)) got $target_count"
    exit 1
fi
exit 0

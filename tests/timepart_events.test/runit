#!/usr/bin/env bash
bash -n "$0" | exit 1

# Time partition testcase for comdb2
################################################################################


# args
# <dbname>
dbname=$1

VIEW1="testview1"
OUT="run.log"

rm $OUT 2>/dev/null
touch $OUT

function timepart_stats
{
    echo cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, period, retention, nshards, shard0name, version from comdb2_timepartitions " >> $OUT
    cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, period, retention, nshards, shard0name, version from comdb2_timepartitions " >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, shardname from comdb2_timepartshards" >> $OUT
    cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, shardname from comdb2_timepartshards" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    #randomly we catch a drop event here; sleep to skip the deterministically
    sleep 6
    echo cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, arg1, arg2, arg3 from comdb2_timepartevents" >> $OUT
    cdb2sql --host $master ${CDB2_OPTIONS} $dbname default  "select name, arg1, arg2, arg3 from comdb2_timepartevents" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi
}

function get_master
{
    master=`cdb2sql -tabs ${CDB2_OPTIONS} $dbname default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`
}



get_master
timepart_stats

# create the partition in the past, 3 days ago
starttime=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()-(3*24*3600)+10)'`
echo cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t as ${VIEW1} PERIOD 'daily' RETENTION 2 START '${starttime}'" 
cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t as ${VIEW1} PERIOD 'daily' RETENTION 2 START '${starttime}'" >> $OUT
if (( $? != 0 )) ; then
   echo "FAILURE"
   exit 1
fi

# lets wait for the rollout to avoid race between status epdate and the 3 rollouts
sleep 20 

timepart_stats

get_master
cdb2sql ${CDB2_OPTIONS} --host $master $dbname default "exec procedure sys.cmd.send('downgrade')"
sleep 5

get_master
cdb2sql ${CDB2_OPTIONS} --host $master $dbname default "exec procedure sys.cmd.send('downgrade')"
sleep 5

echo "Checking previous master" >> $OUT
cdb2sql ${CDB2_OPTIONS} --host $master $dbname 'select name, arg1, arg2, arg3 from comdb2_timepartevents' >> $OUT

timepart_stats


# we need to scrub dbname from alpha
sed "s/dorintdb/$dbname/g; s#\${CDB2_OPTIONS}#${CDB2_OPTIONS}#g" $OUT.alpha > $OUT.alpha.actual


difs=`diff $OUT $OUT.alpha.actual`
if [[ ! -z "${difs}" ]] ; then
   echo "diff $OUT $OUT.alpha.actual"
   echo ${difs}
   echo "FAILURE"
   exit 1
fi

echo "SUCCESS"

#!/usr/bin/env bash

# Test rootpages when db array changes during sql processing
##############################################################################

DBNAME=$1
SQL="cdb2sql ${CDB2_OPTIONS} $DBNAME default"

# $SQL "select comdb2_version(), comdb2_hosts()" > 
cat << EOF > t.csc2
schema 
{
    int a
}
EOF

echo $SQL "create table t1 {`cat t.csc2`}"
$SQL "create table t1 {`cat t.csc2`}"
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "create table t2 {`cat t.csc2`}"
$SQL "create table t2 {`cat t.csc2`}"
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "create table t3 {`cat t.csc2`}"
$SQL "create table t3 {`cat t.csc2`}"
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "insert into t1 values (1)" 
$SQL "insert into t1 values (1)" > output.log 2>&1
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "insert into t2 values (2)"
$SQL "insert into t2 values (2)" >> output.log 2>&1
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "insert into t3 values (3)"
$SQL "insert into t3 values (3)" >> output.log 2>&1
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "select * from t1"
$SQL "select * from t1" >> output.log 2>&1
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "select * from t2"
$SQL "select * from t2" >> output.log 2>&1
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "select * from t3"
$SQL "select * from t3" >> output.log 2>&1
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo $SQL "exec procedure sys.cmd.send('ON stable_rootpages_test')"
$SQL "exec procedure sys.cmd.send('ON stable_rootpages_test')" >> output.log 2>&1
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

#need this async
echo $SQL "select * from t2"
$SQL "select * from t2" >> output.log 2>&1 &
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

sleep 5

#drop the table; bad old code will flip t2 with t3 in pending select
echo $SQL "drop table t1"
$SQL "drop table t1"
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

wait


diff=`diff output.log output.log.expected`
if [[ ! -z "$diff" ]] ; then
    echo "FAILURE"
    echo "$diff"
    exit 1
fi

echo `cat output.log`
echo "SUCCESS"
exit 0

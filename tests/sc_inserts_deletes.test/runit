#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

# Grab my database name.
dbnm=$1
if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

rebuild=1
if [ "x$2" == "xnorebuild" ] ; then
    rebuild=0
fi

tbl=t3


# Number of records I will add.
nrecs=2000

# Max number of schema changes
max_nusc=1000

function failexit
{
    echo "Failed $1"
    exit -1
}

function assertcnt 
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from $tbl")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}


function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('$tbl')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


function do_rebuild_track_pid
{
    typeset loc_dbnm=$1
    typeset loc_tbl=$2
    typeset track_pid=$3
    typeset scnt=0
    while `kill -0 $track_pid 2>/dev/null` && [[ $scnt -lt $max_nusc ]]; do

        echo "Running rebuild iteration $scnt"
        cdb2sql ${CDB2_OPTIONS} $loc_dbnm default "rebuild $loc_tbl"

        if [[ $? != 0 ]]; then
            echo "Error schema-changing on iteration $scnt"
            echo "Testcase failed"
            kill -9 $track_pid
            exit 1
        fi

        do_verify $loc_dbnm $loc_tbl
        let scnt=scnt+1
        sleep 1
    done

    echo "Performed $scnt schema-changes."

    return 0
}




function do_rebuild
{
    typeset max=$1
    typeset scnt=0
    while [[ $scnt -lt $max ]]; do 

        echo "Running rebuild iteration $scnt"
        cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"

        if [[ $? != 0 ]]; then
            echo "Error schema-changing on iteration $scnt"
            echo "Testcase failed"
            return 1
        fi
        let scnt=scnt+1
        do_verify
    done
    assertcnt $nrecs

    return 0
}



function delete_records
{
    j=1
    remaining=$nrecs
    echo
    echo "Deleting $nrecs records."
    echo "" > delete.out
    strt=$(date +%s)

    while [[ $j -le $nrecs ]]; do 
         cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from $tbl where a = $j" >> delete.out 
         if [ $? -ne 0 ] ; then
            continue
         fi
         let j=j+1
	     let remaining=remaining-1
         #assertcnt $remaining
         #sleep 0.1
    done
    end=$(date +%s)
    echo "delete_records took $((end - strt)) sec."
}

function insert_records
{
    j=1
    echo
    echo "Inserting $nrecs records."
    strt=$(date +%s)

    while [[ $j -le $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into $tbl(a,b,c,d,e,f) values ($j,'test1',x'1234',$((j*2)),$j,$j)"  >> insert.out 
        if [ $? -ne 0 ] ; then
            continue
        fi

        #assertcnt $j
        let j=j+1
        if [ $1 -gt 0 ] ; then
            sleep 0.1
        fi
    done
    end=$(date +%s)
    echo "insert_records took $((end - strt)) sec."
}




function run_test
{
    typeset ipid=''
    nrecs=$1
	echo 
	echo "run_test $nrecs"

    > insert.out
    insert_records 0 &
    ipid=$!

    if [ $rebuild -eq 1 ] ; then
        do_rebuild_track_pid $dbnm $tbl $ipid
    fi
    wait

    assertcnt $nrecs
    do_verify

    echo "deleting all records in background"
    delete_records &
    upid=$!

    if [ $rebuild -eq 1 ] ; then
        do_rebuild_track_pid $dbnm $tbl $upid
    fi
    wait

    assertcnt 0
}

echo "running test in machine $(hostname):${PWD}"

#cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
#cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat $tbl.csc2 ` }"

g=100
while [ $g -lt 10000 ] ; do 
	run_test $g
    let g=g+g
done

echo Success

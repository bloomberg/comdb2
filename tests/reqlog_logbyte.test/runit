#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/runit_common.sh

#export debug=1
[[ $debug == "1" ]] && set -x

function setup_reqlog
{
    #$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "EXEC PROCEDURE sys.cmd.send('reql longreqfile <stdout>')"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "EXEC PROCEDURE sys.cmd.send('reql longrequest 0')"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "EXEC PROCEDURE sys.cmd.send('reql longsqlrequest 0')"

    if [[ -n "$CLUSTER" ]]; then
    for node in $CLUSTER ; do
        #$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "EXEC PROCEDURE sys.cmd.send('reql longreqfile <stdout>')"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "EXEC PROCEDURE sys.cmd.send('reql longrequest 0')"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "EXEC PROCEDURE sys.cmd.send('reql longsqlrequest 0')"
    done
    fi
}

function create_tables
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1 (a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2 (a int primary key)"
}

function write_succeed
{
    typeset SZ=$1
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 select * from generate_series(1, $SZ)"
    [[ $? != 0 ]] && failexit "failed to insert records"
}

function write_fail
{
    typeset SZ=$1
    echo "BEGIN
insert into t1 select * from generate_series(1, $SZ)
insert into t2 (a) values (1)
COMMIT" | $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default -

    [[ $? == 0 ]] && failexit "incorrectly succeeded in inserting records"
}

#function write_fail
#{
#    write_succeed $1
#}

function test_logic
{
    write_succeed 100
    write_succeed 200
    write_succeed 300
    write_succeed 400
    write_succeed 500
    write_fail 600
    write_fail 700
    write_fail 800
    write_fail 900
    write_fail 1000
}

function check_reqlog
{
    log=${TESTDIR}/var/log/cdb2/${DBNAME}.longreqs

    if [[ -n "$CLUSTER" ]]; then
        master=$(get_master)
        lb=$(ssh -o StrictHostKeyChecking=no $master "egrep \"log bytes\" $log")
    else
        lb=$(egrep "log bytes" $log)
    fi

    lines=$(echo "$lb" | wc -l)
    [[ "$lines" -ne "10" ]] && failexit "Incorrect number of logbyte lines"

    max=0
    echo "$lb" | while read ln ; do
        ll="${ln%% log bytes}"
        x="${ll##*Wrote }"
        [ "$x" -le "$max" ] && failexit "Logbytes got smaller??"
        max="$x"
    done
}

function run_test
{
    create_tables
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t2 (a) values (1)"
    setup_reqlog
    test_logic
    check_reqlog
}

rm ${DBNAME}.failexit
run_test

if [[ -f ${DBNAME}.failexit ]]; then
    echo "Testcase failed"
    exit -1
fi

echo "Success"

#!/usr/bin/env bash

bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/ddl.sh

set -x

keepalive=0
stopfile=./stopfile.txt
inserterlog=./inserter.txt
failfile=./failed.txt
checkdatadone=./checkdatadone.txt
# node that has tunable is the
# master that i want for this test
# this works for local testing,
# but i'd have to generate this dynamically
# so that any cluster with any hostname
# is supported. then I have to copy the
# dbs manually using comdb2createcluster
MASTERIWANT="node1"
MAXDOWNGRADE=10

function get_tunable_val {
    # get_tunable_val <hostname>
    echo "$(cdb2sql -s --tabs ${CDB2_OPTIONS} $DBNAME --host "$1" "select value from comdb2_tunables where name='skip_master_callbacks'")"
}

function validate_switches {
    # validate_switches <master>
    for node in $CLUSTER; do
        switch_val="$(get_tunable_val $node)"
        if [ "$node" == "$1" ]; then
            if [ $switch_val != "ON" ]; then
                echo "Problem: master is $node and skip_master_callbacks is $switch_val "
                return 1
            fi
        elif [ $switch_val != "OFF" ]; then
            echo "skip_master_callbacks tunable for $node is OFF"
        fi
    done
    return 0
}

function kill_cluster {
    typeset master=$(get_master)
    [ -n $master ] && echo "Master not found" && exit 1
}

function downgraden {
    # downgraden <tonode> <num_times>
    fromnode="$1"
    numtimes="${2:-1}"
    master=""
    for i in $(seq "$numtimes"); do
        while [ -z $master ]; do
            echo "waiting for new master..."
            master=$(cdb2sql --host "$node" $DBNAME 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | awk '{print $2}')
            sleep 0.5
        done

        cdb2sql ${CDB2_OPTIONS} --host $master $DBNAME "exec procedure sys.cmd.send('downgrade')"
        sleep 3
    done
}

function setup {
    typeset master=$(get_master)
    echo "Master is $master"

    downcntr=0
    while [ $downcntr -ne $MAXDOWNGRADE ] && validate_switches $master; do
        echo "Master is $master, but I want $MASTERIWANT so downgrading"
        downgraden $MASTERIWANT
        downcntr=$(($downcntr + 1))
    done

    [ $downcntr -eq $MAXDOWNGRADE ] && echo "Setup error: Failed to get $MASTERIWANT as master so exiting" && exit 1
}

function checkforerrors {
    egrep -nwI "purge_old_files_thread.*failed" $TESTDIR/logs/*.db
}

function run_test {
    declare -a nonmaster
    for node in $CLUSTER; do
        if [[ $node != $MASTERIWANT ]]; then
            echo "killing and restarting $node"
            nonmaster+=($node)
            kill_restart_node $node
        fi
    done

    if [ -z "${nonmaster[0]}" ]; then
        echo "Couldn't find a non master node ${nonmaster[@]}. Die"
        exit 1
    fi

    while [ $(get_master) == $MASTERIWANT ]; do
        downgraden ${nonmaster[0]}
    done

    typeset master=$(get_master)
    echo "Master is $master"

    sleep 40
}

setup
run_test
checkforerrors
echo "Success"

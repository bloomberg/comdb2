#!/bin/bash
bash -n "$0" | exit 1

#PS4='$(date +%Y%m%d-%H:%M:%S): '
set -x

dbnm=$1


function failexit
{
    echo "Failed $1"
    exit -1
}

if [ "x$dbnm" == "x" ] ; then
    failexit "need a DB name"
fi

if [ -z $comdb2task ] ; then
   failexit '$comdb2task is not set'
fi

function assertcnt 
{
    tbl=$1
    target=$2
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from $tbl")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count of $tbl is now $cnt but should be $target"
    fi
}

function assert_vers 
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}


function assert_schema 
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    out=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where type = 'table' and name='$tbl'" 2>&1)

    if [ "$out" != "$schema" ]; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

function do_verify
{
    tbl=$1
    typeset cnt=0

    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('$tbl')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "verify $tbl failed"
    fi
}

function getmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

master=`getmaster`
echo "master is $master"

cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1 {schema{int a int b}}"
assert_vers t1 0
assert_schema t1 "schema{int a int b}"

echo "LOAD: t1 (1, 10), (2, 20), (3, 30), (4, 40)"
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1 values(1, 10), (2, 20), (3, 30), (4, 40)"
assertcnt t1 4

echo "TEST TRAN: ALTER T1; CREATE T2 (expected: success)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
alter table t1 {schema{int a int b} keys{"A" = a}}$$
create table t2 {schema{int a int b}}$$
commit
EOF
assertcnt t1 4
assert_vers t1 1
assert_vers t2 0
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
do_verify t1
do_verify t2

echo "LOAD: t2 (1, 10), (1, 20)"
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t2 values(1, 10), (1, 20)"
assertcnt t2 2

echo "TEST TRAN: INSERT DUP T1; TRUNCATE T2 (expected: fail)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
insert into t1 values (5, 50), (6, 60), (1, 0)
truncate t2
commit
EOF
assertcnt t1 4
assertcnt t2 2
assert_vers t1 1
assert_vers t2 0
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
do_verify t1
do_verify t2

echo "TEST TRAN: INSERT DUP T1; TRUNCATE T2 (expected: fail)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
insert into t1 values (5, 50), (6, 60), (1, 0)
drop table t2
commit
EOF
assertcnt t1 4
assertcnt t2 2
assert_vers t1 1
assert_vers t2 0
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
do_verify t1
do_verify t2

echo "TEST TRAN: INSERT DUP T1; ALTER T2 (expected: fail)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
insert into t1 values (5, 50), (6, 60), (1, 0)
alter table t2 {schema{int a int b} keys{"A" = a}}$$
commit
EOF
assertcnt t1 4
assertcnt t2 2
assert_vers t1 1
assert_vers t2 0
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
do_verify t1
do_verify t2

echo "TEST TRAN: INSERT T1; ALTER T2 (DUP) (expected: fail)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
insert into t1 values (5, 50), (6, 60)
alter table t2 {schema{int a int b} keys{"A" = a}}$$
commit
EOF
assertcnt t1 4
assertcnt t2 2
assert_vers t1 1
assert_vers t2 0
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
do_verify t1
do_verify t2

echo "TEST TRAN: INSERT T1; ALTER T2 (expected: success)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
insert into t1 values (5, 50), (6, 60)
alter table t2 {schema{int a int b} keys{"B" = b}}$$
commit
EOF
assertcnt t1 6
assertcnt t2 2
assert_vers t1 1
assert_vers t2 1
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b} keys{\"B\" = b}"
do_verify t1
do_verify t2

echo "TEST TRAN: DELETE T1; TRUNCATE T2 (expected: success)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
delete from t1 where a >= 5
truncate t2
commit
EOF
assertcnt t1 4
assertcnt t2 0
assert_vers t1 1
assert_vers t2 1
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b} keys{\"B\" = b}"
do_verify t1
do_verify t2

echo "TEST TRAN: DELETE T1; DROP T2 (expected: success)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
delete from t1 where a >= 4
drop table t2
commit
EOF
assertcnt t1 3
assert_vers t1 1
assert_vers t2 "NULL"
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 ""
do_verify t1

echo "TEST TRAN: CREATE T2; CREATE T3 (expected: success)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
create table t2 {schema{int a int b}}$$
create table t3 {schema{int a int b}}$$
commit
EOF
assert_vers t2 2
assert_vers t3 0
assert_schema t2 "schema{int a int b}"
assert_schema t3 "schema{int a int b}"

echo "LOAD: t2 (1, 10), (1, 20) t3 (1, 10), (2, 10)"
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t2 values(1, 10), (1, 20)"
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t3 values(1, 10), (2, 10)"
assertcnt t2 2
assertcnt t3 2
do_verify t2
do_verify t3

echo "TEST TRAN: TRUNCATE T1; ALTER T2 (DUP); ALTER T3 (expected: fail)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
truncate t1
alter table t2 {schema{int a int b} keys{"A" = a}}$$
alter table t3 {schema{int a int b} keys{"A" = a}}$$
commit
EOF
assertcnt t2 2
assertcnt t3 2
assert_vers t2 2
assert_vers t3 0
assert_schema t2 "schema{int a int b}"
assert_schema t3 "schema{int a int b}"
do_verify t2
do_verify t3

echo "TEST TRAN: TRUNCATE T1; ALTER T2 (DUP live_sc); ALTER T3 (DUP live_sc) (expected: fail)"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE CONVERTSLEEP 15"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF" &
begin
truncate t1
alter table t2 {schema{int a int b} keys{"B" = b}}$$
alter table t3 {schema{int a int b} keys{"A" = a}}$$
commit
EOF
cdb2sql ${CDB2_OPTIONS} $dbnm "insert into t2 values (2, 20)"
cdb2sql ${CDB2_OPTIONS} $dbnm "insert into t3 values (2, 20)"
wait
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE CONVERTSLEEP 0"
assertcnt t1 3
assertcnt t2 3
assertcnt t3 3
assert_vers t1 1
assert_vers t2 2
assert_vers t3 0
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
assert_schema t3 "schema{int a int b}"
do_verify t1
do_verify t2
do_verify t3

echo "TEST TRAN: TRUNCATE T2; TRUNCATE T2; CREATE T3 (EXISTED); CREATE T4 (expected: fail)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF" &
begin
truncate t1
truncate t2
create table t3 {schema{int a int b} keys{"A" = a}}$$
create table t4 {schema{int a int b} keys{"A" = a}}$$
commit
EOF
assertcnt t1 3
assertcnt t2 3
assertcnt t3 3
assert_vers t1 1
assert_vers t2 2
assert_vers t3 0
assert_vers t4 "NULL"
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
assert_schema t3 "schema{int a int b}"
assert_schema t4 ""
do_verify t1
do_verify t2
do_verify t3

echo "TEST TRAN: TRUNCATE T2; ALTER T3; CREATE T4; UPDATE T1 (DUP) (expected: fail)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
truncate t2
alter table t3 {schema{int a int b} keys{dup "A" = a}}$$
create table t4 {schema{int a int b} keys{"A" = a}}$$
update t1 set a = 1 where 1
commit
EOF
assertcnt t1 3
assertcnt t2 3
assertcnt t3 3
assert_vers t1 1
assert_vers t2 2
assert_vers t3 0
assert_vers t4 "NULL"
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
assert_schema t3 "schema{int a int b}"
assert_schema t4 ""
do_verify t1
do_verify t2
do_verify t3

echo "TEST TRAN: TRUNCATE T2; ALTER T3; CREATE T4; UPDATE T1 (expected: success)"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
truncate t2
alter table t3 {schema{int a int b} keys{dup "A" = a}}$$
create table t4 {schema{int a int b} keys{"A" = a}}$$
update t1 set b = 1 where 1
commit
EOF
assertcnt t1 3
assertcnt t2 0
assertcnt t3 3
assert_vers t1 1
assert_vers t2 2
assert_vers t3 1
assert_vers t4 0
assert_schema t1 "schema{int a int b} keys{\"A\" = a}"
assert_schema t2 "schema{int a int b}"
assert_schema t3 "schema{int a int b} keys{dup \"A\" = a}"
assert_schema t4 "schema{int a int b} keys{\"A\" = a}"
do_verify t1
do_verify t2
do_verify t3

echo "Success"

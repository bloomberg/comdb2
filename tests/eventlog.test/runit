#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x

source ${TESTSROOTDIR}/tools/runit_common.sh

function waitfordb() {
    sleep 1
    local count=0
	sel=$(${CDB2SQL_EXE} --tabs ${CDB2_OPTIONS} $1 "select 1" 2>&1)
	while [[ "$sel" != "1" ]] && [[ $count -lt 60 ]] ; do
		sleep 1
	    sel=$(${CDB2SQL_EXE} --tabs ${CDB2_OPTIONS} $1 "select 1" 2>&1)
        let count=count+1
	done
    if [[ "$sel" != "1" ]] ; then 
        failexit 'cant contact db'
    fi
}

mkdir $DBDIR
touch $DBDIR/${DBNAME}.lrl
df $DBDIR | awk '{print $1 }' | grep "tmpfs\|nfs" && echo "setattr directio 0" > $DBDIR/${DBNAME}.lrl 
${COMDB2_EXE} ${DBNAME} --create --dir $DBDIR --lrl $DBDIR/${DBNAME}.lrl &> out
grep "Created database" out || failexit "expected 'Created database'"

echo "name    $DBNAME" >> $DBDIR/${DBNAME}.lrl
echo "dir     $DBDIR" >> $DBDIR/${DBNAME}.lrl
mkdir -p $TESTDIR/var/log/cdb2
mkdir -p $TMPDIR


echo "comdb2_config:default_type=local" >> $CDB2_CONFIG
$DEBUGGER ${COMDB2_EXE} $DBNAME --no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/${DBNAME}.pid &> $TESTDIR/logs/${DBNAME}.db &

waitfordb $DBNAME

cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select comdb2_hostname()"

cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql events detailed on')"

res=`cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 1"`
assertres $res 1

res=`cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 2"`
assertres $res 2

res=`cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 2"`
assertres $res 2

res=`cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 1"`
assertres $res 1


res=`cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "nonsense" 2>&1`
exp="[nonsense] failed with rc -3 near \"nonsense\": syntax error"
assertres "\"$res\"" "\"$exp\""

res=`cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select * from nonexistent" 2>&1`
assertres "\"$res\"" \""[select * from nonexistent] failed with rc -3 no such table: nonexistent\""

COMDB2_UNITTEST=0 CLEANUPDBDIR=0 $TESTSROOTDIR/unsetup 1 > $TESTDIR/logs/${DBNAME}.unsetup

ls -ltr $TESTDIR/var/log/cdb2/ | grep events
logfl=`find $TESTDIR/var/log/cdb2/ -printf "%T@ %p\n" | grep "/$DBNAME" | grep events | sort -n | cut -f2 -d' ' | tail -1`
logflunziped=${logfl}.unzipped
if [ "x$logfl" == "x" ] ; then
    failexit "event logfl can not be found"
fi

wc $logfl
zcat $logfl > $logflunziped

function getfingerprint {
    jq -r 'if has("fingerprint") then .fingerprint else empty end ' <<< $1
}

function getmembers {
    jq -r 'if has("error_code") then .error_code else empty end ' <<< $1
    jq -r 'if has("error") then .error else empty end ' <<< $1
    getfingerprint "$1"
}

SAVIFS=$IFS
IFS=$'\n'
echo check all .*sql entries for fingerprint
echo '4f16a8ec9db90f803e406659938b2602' > exp.txt
for line in $(jq -rc 'if (.type == "sql") and (.sql == "select 1") then . else empty end' < $logflunziped); do
    getmembers $line > out.txt
    if ! diff out.txt exp.txt ; then
        failexit 'output is different from expected'
    fi 
done

echo check all .*sql entries for fingerprint
echo '4f16a8ec9db90f803e406659938b2602' > exp.txt
for line in $(jq -c 'if (.type == "sql") and (.sql == "select 2") then . else empty end' < $logflunziped); do
    getmembers $line > out.txt
    if ! diff out.txt exp.txt ; then
        failexit 'output is different from expected'
    fi 
done

echo check all .*sql entries for fingerprint
echo '00000000000000000000000000000000' > exp.txt
for line in $(jq -c 'if (.type == "sql") and (.sql == "nonsense") then . else empty end' < $logflunziped); do
    getfingerprint $line > out.txt
    if ! diff out.txt exp.txt ; then
        failexit 'output is different from expected'
    fi
done

echo check the sql parameter now
echo '1
near "nonsense": syntax error
00000000000000000000000000000000' > exp.txt
line=$(jq -c 'if (.type == "sql") and (.sql == "nonsense") then . else empty end' < $logflunziped)
getmembers $line > out.txt
if ! diff out.txt exp.txt ; then
    failexit 'output is different from expected'
fi

echo check all .*sql entries for fingerprint
echo '00000000000000000000000000000000' > exp.txt
for line in $(jq -c 'if (.type == "sql") and (.sql == "select * from nonexistent") then . else empty end' < $logflunziped); do
    getfingerprint $line > out.txt
    if ! diff out.txt exp.txt ; then
        failexit 'output is different from expected'
    fi
done

echo check the sql parameter now
echo '1
no such table: nonexistent
00000000000000000000000000000000' > exp.txt
line=$(jq -c 'if (.type == "sql") and (.sql == "select * from nonexistent") then . else empty end' < $logflunziped)
getmembers $line > out.txt
if ! diff out.txt exp.txt ; then
    failexit 'output is different from expected'
fi

mv $TESTDIR/logs/${DBNAME}.db $TESTDIR/logs/${DBNAME}.db.2

NKEEP=4
IFS=$SAVIFS

echo "start db again, make sure that we keep only $((NKEEP+1)) event log files of size ~2000 bytes"
$DEBUGGER ${COMDB2_EXE} $DBNAME --no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/${DBNAME}.pid &> $TESTDIR/logs/${DBNAME}.db &

waitfordb $DBNAME

cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql events detailed on')"
cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql events keep $NKEEP')"
cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql events rollat 4000')"

cdb2sql ${CDB2_OPTIONS} $DBNAME default "create table t1(i int)"

NUM=2000
for ((i=1;i<=$NUM;++i)); do echo "insert into t1 values($i)"; done | cdb2sql ${CDB2_OPTIONS} $DBNAME default -

# need to flush to get correct stmts in logfile
cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql events flush')"

find $TESTDIR/var/log/cdb2/ | grep "/$DBNAME" | grep '.events.' > logfls.txt
echo logfls
cat logfls.txt

logflcnt=$(wc -l logfls.txt | cut -f1 -d' ')

echo make sure we have $((NKEEP+1)) as per the lrl option
assertres $logflcnt $((NKEEP+1))

echo "make sure string 'insert into t1 values($NUM)' is in the last 2 eventlog files:"
res=$(for f in $(ls -1t $TESTDIR/var/log/cdb2/$DBNAME.events.* | head -2); do
    zcat $f | jq -c 'if (.type == "sql") and (.sql == "insert into t1 values('"$NUM"')") then . else empty end'
done | wc -l)
assertres $res 1


# test setting custom file for event logging
myevfl=$TESTDIR/var/log/cdb2/$DBNAME.myfile.events
cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql events file $myevfl')"
cdb2sql ${CDB2_OPTIONS} $DBNAME default "select 2"
cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql events dir $TESTDIR/var/log')"
cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql events roll')"
cdb2sql ${CDB2_OPTIONS} $DBNAME default "select 3"
d=`cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('reql stat')"  | grep Eventlog | sed "s/[^:]*:\(.*\)')/\1/g" | xargs dirname`

COMDB2_UNITTEST=0 CLEANUPDBDIR=0 $TESTSROOTDIR/unsetup 1 > $TESTDIR/logs/${DBNAME}.unsetup

if [ ! -f $myevfl ] ; then
    failexit "$myevfl was not created"
fi
cnt=`zgrep "select 2" $myevfl  | jq -c 'if (.type == "sql") then . else empty end' | wc -l`
# assert setting the event log file
assertres $cnt 1

# assert setting the event log dir works
assertres $d $TESTDIR/var/log

#This would be a nice test to have but we're only keeping 4000 bytes around..
#
#echo "make sure string 'insert into t1 ...' is logged $NUM times"
#res=$(for f in $(ls -1t $TESTDIR/var/log/cdb2/$DBNAME.events.*); do
#zcat $f | jq -c 'if (.type == "sql") and (.sql | startswith("insert into t1 values")) then . else empty end'
#done | wc -l)
#assertres $res $NUM

valgrind --error-exitcode=1 --leak-check=full --trace-children=yes --quiet ${TESTSBUILDDIR}/cson_test
res=$?
assertres $res 0

exit 0

#!/usr/bin/env bash
bash -n "$0" | exit 1

dbnm=$1

cat << EOF | cdb2sql ${CDB2_OPTIONS} -tabs -s $dbnm default - >output.actual 2>&1
SELECT "- Testing dbstore now() -"
CREATE TABLE t1 { tag ondisk { int i } }\$\$
INSERT INTO t1 VALUES (1)
SELECT "-- The schema change below should fail --"
ALTER TABLE t1 { tag ondisk { int i datetime t dbstore={now()} } }\$\$
SELECT "-- The schema change below should fail, too --"
ALTER TABLE t1 { tag ondisk { int i datetime t dbstore="CURRENT_TIMESTAMP" } }\$\$
SELECT "-- The schema change below should succeed, instantly --"
ALTER TABLE t1 { tag ondisk { int i datetime t dbstore={now()} null=yes } }\$\$
SELECT "-- The schema change below should succeed instantly, too --"
ALTER TABLE t1 { tag ondisk { int i datetime t dbstore="CURRENT_TIMESTAMP" null=yes } }\$\$
INSERT INTO t1(i) VALUES (1)
SELECT "-- Verify records --"
SELECT COUNT(*) FROM t1 WHERE t IS NOT NULL
SELECT "-- Verify records again after rebuild --"
REBUILD t1
SELECT COUNT(*) FROM t1 WHERE t IS NOT NULL
SELECT "-- The schema change below should succeed. dta is untouched but a new index is built --"
ALTER TABLE t1 { tag ondisk { int i datetime t dbstore={now()} null=yes byte b[16] dbstore={guid()} null=yes } keys { uniqnulls "KEY_B" = b } }\$\$
INSERT INTO t1(i) VALUES (1)
SELECT "-- Verify records --"
SELECT COUNT(*) FROM t1 WHERE b IS NOT NULL
SELECT "-- Verify records again after full rebuild --"
REBUILD t1
SELECT COUNT(*) FROM t1 WHERE b IS NOT NULL
DROP TABLE t1
SELECT "-- This schema change should fail on invalid default value --"
CREATE TABLE t1 { schema { cstring s[33] dbstore={bogus} } }\$\$
SELECT "-- The following schema change should succeed --"
CREATE TABLE t1 { schema { cstring s[33] dbstore={hex(GUID())} } }\$\$
SELECT "-- This verifies that alter also fails on an invalid default value --"
ALTER TABLE t1 { schema { cstring s[33] dbstore={bogus} } }\$\$
EOF

diff output.actual output.expected

# Make sure we can create a new db which specifies a client-function dbstore, 
# but that we fail to create a new db which has an invalid dbstore function.
function create_database_with_table()
{
    DB=$1
    CSC2=$2
    GREPTRACE=$3
    NEWDBDIR=${DBDIR}/${DB}
    mkdir -p $NEWDBDIR >/dev/null 2>&1
    cp ${CSC2}.csc2 $NEWDBDIR
    echo "name $DB" > $NEWDBDIR/$DB.lrl
    echo "dir ${NEWDBDIR}" >> $NEWDBDIR/$DB.lrl
    echo "table $CSC2 $NEWDBDIR/${CSC2}.csc2" >> $NEWDBDIR/$DB.lrl
    ${COMDB2_EXE} ${DB} --create --dir ${NEWDBDIR} --lrl $NEWDBDIR/$DB.lrl &> out
    egrep "$GREPTRACE" out
    if [[ $? -ne 0 ]]; then
        cat out
        echo "Failed to find $GREPTRACE in output"
        exit 1
    fi
}

function start_and_stop_db()
{
    DB=$1
    NEWDBDIR=${DBDIR}/${DB}
    ${COMDB2_EXE} ${DB} --dir ${NEWDBDIR} --lrl $NEWDBDIR/$DB.lrl &> out &
    PID=$!

    # Wait for "I AM READY", or timeout
    ready=0
    while [[ "$ready" == "0" ]]; do
        grep "I AM READY" out &> /dev/null
        if [[ $? == 0 ]]; then
            ready=1
        else
            sleep 1
        fi
    done

    echo "Database could start successfully"
    kill -9 $PID
}

# Verify that a bad dbstore client function fails on create
create_database_with_table bad${DBNAME} t1_bad "Failed to verify dbstore client function"

# Verify that a good dbstore client function succeeds on create
create_database_with_table good${DBNAME} t1_good "Created database" 

# Verify that good-dbstore client function can start
start_and_stop_db good${DBNAME}


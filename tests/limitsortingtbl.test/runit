#!/usr/bin/env bash
bash -n "$0" | exit 1
source ${TESTSROOTDIR}/tools/runit_common.sh

set -x

set -e
source ${TESTSROOTDIR}/tools/runit_common.sh

cdb2sql ${CDB2_OPTIONS} $DBNAME default "create table t1 { `cat t1.csc2` }"
cdb2sql ${CDB2_OPTIONS} $DBNAME default "create table t2 { `cat t2.csc2` }"


cdb2sql ${CDB2_OPTIONS} $DBNAME default - <<EOF > insert.res
INSERT INTO t1 SELECT value,value,value FROM generate_series(1,300)
INSERT INTO t2 SELECT value,value,value FROM generate_series(1,300)
EOF

assertcnt t1 300
assertcnt t2 300
hnamelist="`hostname -A` localhost"

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select host from comdb2_cluster"`
for node in $cluster ; do
    if [[ " $hnamelist " =~ .*\ $node\ .* ]] ; then 
        line=`df $TESTDIR | grep -v Filesystem `
    else 
        line=`ssh -o StrictHostKeyChecking=no $node "df $TESTDIR" | grep -v Filesystem `
    fi

    currused=`echo $line | awk '{ print $5 }' | sed 's/%//'`
    currfree=$((101-currused))
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('bdb setattr sqlite_sorter_tempdir_reqfree $currfree')"
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('bdb attr ')" | grep -i sqlite_sorter_tempdir_reqfree
done


echo "
explain query plan SELECT t1.* FROM t1 order by t1.k
SELECT t1.* FROM t1 order by t1.k
set explain on
SELECT t1.* FROM t1 order by t1.k
" | cdb2sql ${CDB2_OPTIONS} $DBNAME default - &> sel1.res
rc=$?

if [ $rc != 0 ] || ! diff sel1.expected sel1.res ; then
    failexit "Query sel1, rc=$rc, diff ${PWD}/sel1.{expected,res}"
fi


cdb2sql ${CDB2_OPTIONS} $DBNAME default "explain query plan SELECT t1.* FROM t1,t2 order by t1.k" &> sel2.res
cdb2sql ${CDB2_OPTIONS} $DBNAME default "SELECT t1.* FROM t1,t2 order by t1.k" &>> sel2.res


cdb2sql ${CDB2_OPTIONS} $DBNAME default "explain query plan SELECT t1.* FROM t1,t2,t2 order by t1.k" &> sel3.res
set +e
cdb2sql ${CDB2_OPTIONS} $DBNAME default "SELECT t1.* FROM t1,t2,t2 order by t1.k" &> err.res
rc=$?

if [ $rc == 0 ] || ! diff err.expected err.res ; then
    failexit "Query err, rc=$rc, diff ${PWD}/err.{expected,res}"
fi

if [[ -n "$CLUSTER" ]] ; then  #only run next query in single node
    echo "Success!"
    exit
fi

set -e
availsize=`df ./ | grep -v Filesystem | awk '{ print $4 }'`
if [ $availsize -gt 1000000 ] ; then 
    echo "since available space is more than 1GB, run the next heavy query"
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('bdb setattr sqlite_sorter_tempdir_reqfree 6')"
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "exec procedure sys.cmd.send('bdb attr ')" | grep -i sqlite_sorter_tempdir_reqfree
    cdb2sql -cost ${CDB2_OPTIONS} $DBNAME default "SELECT t1.* FROM t1,t2,t2 order by t1.k" > /dev/null 2> sel3.cost
    lines=$(grep Rows sel3.cost | cut -f3 -d':' | xargs echo)
    if [ $lines -ne 27000000 ] ; then
        failexit "Output lines should be 27000000, not $lines"
    fi
fi

echo "Success!"

#!/usr/bin/env bash
bash -n "$0" | exit 1

[ -z "${CLUSTER}" ] && { echo "Test requires a cluster"; exit 0; }

set -e

dbnm=$1

master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select host from comdb2_cluster where is_master="Y"'`
echo master is $master

#
# The statements below make replicants to start their verify match between checkpoint #1 and checkpoint #2,
# which begins after the 1st CREATE-TABLE statement. Therefore in a forward pass replicants will redo
# transactions against files that have been removed by the delfiles command. Previously there was a bug
# that would cause an abort in the following codepath
# #1  0x00007ffff69e59b8 in abort
# #2  0x00000000009e98f0 in __ufid_open
# #3  __ufid_to_db_int.isra.0
# #4  0x00000000009ea3fd in __ufid_to_db
# #5  0x0000000000a57001 in __db_addrem_read_int
# #6  0x0000000000a5724d in __db_addrem_read
# #7  0x00000000009df532 in __db_addrem_recover
# #8  0x00000000009f2663 in __db_apprec
# #9  0x0000000000a3385d in __rep_dorecovery
# #10 __rep_verify_match
#

cdb2sql $dbnm --host $master - <<'EOF'
DROP TABLE IF EXISTS t
CREATE TABLE t (i INT)$$
EXEC PROCEDURE sys.cmd.send("bdb checkpoint")
SELECT SLEEP(1) -- make sure we've checkpointed
EXEC PROCEDURE sys.cmd.send("pushnext")
SELECT SLEEP(5) -- allow all replicants to pushnext
EXEC PROCEDURE sys.cmd.send("bdb checkpoint")
SELECT SLEEP(1) -- make sure we've checkpointed again
INSERT INTO t VALUES(1) -- do some stuff
UPDATE t SET i = 2 WHERE 1 -- do more stuff
DROP TABLE t
CREATE TABLE t (i INT)$$
EXEC PROCEDURE sys.cmd.send("delfiles t")
EXEC PROCEDURE sys.cmd.send("flush")
EXEC PROCEDURE sys.cmd.send("downgrade")
EOF

# allow master swing to complete
sleep 5

# make sure that all nodes are accessible. we use --admin mode because on a busy box
# it could take quite a while for a cluster to fully sync.
set -x
for node in $CLUSTER ; do
    ssh -o StrictHostKeyChecking=no $node "/opt/bb/bin/cdb2sql --admin $dbnm --host $node 'SELECT 1'"
done

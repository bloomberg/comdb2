1 SELECT '---------------------------------- PART #01 ----------------------------------' AS part;
1 CREATE TABLE t1(i INT PRIMARY KEY, j INT)
1 SET TRANSACTION READ COMMITTED
2 SET TRANSACTION READ COMMITTED
1 BEGIN
2 BEGIN
1 INSERT INTO t1 VALUES(1, 0) ON CONFLICT DO NOTHING;
1 SELECT * FROM t1;
2 INSERT INTO t1 VALUES(1, 1);
2 SELECT * FROM t1;
2 COMMIT
1 COMMIT
1 SELECT * FROM t1;
1 DROP TABLE t1;

1 SELECT '---------------------------------- PART #02 ----------------------------------' AS part;
1 CREATE TABLE t1(i INT PRIMARY KEY, j INT)
1 SET TRANSACTION READ COMMITTED
2 SET TRANSACTION READ COMMITTED
1 BEGIN
2 BEGIN
1 REPLACE INTO t1 VALUES(1, 0);
1 SELECT * FROM t1;
2 INSERT INTO t1 VALUES(1, 1);
2 SELECT * FROM t1;
2 COMMIT
1 COMMIT
1 SELECT * FROM t1;
1 DROP TABLE t1;

1 SELECT '---------------------------------- PART #03 ----------------------------------' AS part;
1 CREATE TABLE t1(i INT PRIMARY KEY, j INT)
1 SET TRANSACTION READ COMMITTED
2 SET TRANSACTION READ COMMITTED
1 BEGIN
2 BEGIN
1 INSERT INTO t1 VALUES(1, 0) ON CONFLICT(i) DO UPDATE SET j = j + 1;
1 SELECT * FROM t1;
2 INSERT INTO t1 VALUES(1, 1);
2 SELECT * FROM t1;
2 COMMIT
1 COMMIT
1 SELECT * FROM t1;
1 DROP TABLE t1;

1 SELECT '---------------------------------- PART #04 ----------------------------------' AS part;
# Test upsert1-400 from upstream
# BLOCKSQL Isolation level
1 SET TRANSACTION BLOCKSQL
1 CREATE TABLE t1(a VARCHAR(10) UNIQUE, b INT DEFAULT 1)
1 INSERT INTO t1(a) VALUES('one'),('two'),('three');
1 BEGIN
1 INSERT INTO t1(a) VALUES('one'),('one'),('three'),('four') ON CONFLICT(a) DO UPDATE SET b=b+1;
1 SELECT * FROM t1 ORDER BY a;
1 COMMIT
1 SELECT * FROM t1 ORDER BY a;
# READ COMMITTED Isolation level
1 SET TRANSACTION READ COMMITTED
1 BEGIN
1 INSERT INTO t1(a) VALUES('one'),('one'),('three'),('four') ON CONFLICT(a) DO UPDATE SET b=b+1;
1 SELECT * FROM t1 ORDER BY a;
1 COMMIT
1 SELECT * FROM t1 ORDER BY a;

# Test upsert1-400 from upstream
1 SELECT a, b FROM t1 ORDER BY a;
1 DROP TABLE t1;

1 SELECT '---------------------------------- PART #05 ----------------------------------' AS part;
# Test upsert2-200 from upstream
# BLOCKSQL Isolation level
1 SET TRANSACTION BLOCKSQL
1 CREATE TABLE t1(a INTEGER PRIMARY KEY, b INT, c INT DEFAULT 0)
1 INSERT INTO t1(a,b) VALUES(1,2),(3,4);
1 BEGIN
1 WITH nx(a,b) AS (VALUES(1,8),(2,11),(3,1),(2,15),(1,4),(1,99)) INSERT INTO t1(a,b) SELECT a, b FROM nx WHERE 1 ON CONFLICT(a) DO UPDATE SET b=excluded.b, c=c+1 WHERE t1.b<excluded.b;
1 SELECT *, 'x' FROM t1 ORDER BY a;
1 COMMIT
1 SELECT *, 'x' FROM t1 ORDER BY a;
# READ COMMITTED Isolation level
1 SET TRANSACTION READ COMMITTED
1 BEGIN
1 WITH nx(a,b) AS (VALUES(1,8),(2,11),(3,1),(2,15),(1,4),(1,99)) INSERT INTO t1(a,b) SELECT a, b FROM nx WHERE 1 ON CONFLICT(a) DO UPDATE SET b=excluded.b, c=c+1 WHERE t1.b<excluded.b;
1 SELECT *, 'x' FROM t1 ORDER BY a;
1 COMMIT
1 SELECT *, 'x' FROM t1 ORDER BY a;
1 DROP TABLE t1;
1 SET TRANSACTION BLOCKSQL

1 SELECT '---------------------------------- PART #06 ----------------------------------' AS part;
# https://github.com/bloomberg/comdb2/issues/1148
1 DROP TABLE IF EXISTS t1;
1 DROP TABLE IF EXISTS t2;
1 CREATE TABLE t1(i INT UNIQUE, j INT)
1 CREATE TABLE t2(i INT, j INT)
1 INSERT INTO t2 VALUES(1,1);
1 SET TRANSACTION READ COMMITTED
1 BEGIN;
1 REPLACE INTO T1 VALUES(1,2);
2 SET TRANSACTION READ COMMITTED
2 INSERT INTO T1 VALUES(1,1);
1 DELETE FROM t2;
1 COMMIT;
1 SELECT * FROM t1;
1 SELECT * FROM t2;
1 SET TRANSACTION BLOCKSQL
2 SET TRANSACTION BLOCKSQL

1 SELECT '---------------------------------- PART #10 ----------------------------------' AS part;
1 drop table if exists t
1 create table t(i int primary key, j int)
1 set transaction read committed isolation
1 begin
1 insert into t(i, j) values(1, 1) on conflict(i) do update set j=j+1
1 update t set j=j+1 where i=1
2 insert into t(i, j) values(1, 1)
1 commit -- will retry because of 2's insert and then should succeed as update
1 select * from t

1 SELECT '---------------------------------- PART #11 ----------------------------------' AS part;
1 drop table if exists t
1 drop table if exists q
1 create table t(i int primary key, j int)
1 create table q(j int)
1 set transaction read committed isolation
1 insert into q(j) values(1), (1)
1 begin
1 insert into t(i, j) select 1, j from q where j=1 on conflict(i) do update set j=j+1
2 insert into t(i, j) values(1, 1)
1 commit -- will retry because of 2's insert and then should succeed as update
1 select * from t

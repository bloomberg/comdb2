#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function downgrade
{
    [[ $debug == "1" ]] && set -x
    typeset func="downgrade"
    typeset node=$(get_master)
    typeset count=0
    typeset foundmaster=0
    typeset maxcount=600
    typeset initialmaster=0
    write_prompt $func "Running $func $node"

    x=$(get_master)
    while [[ "$CLUSTER" != *"$x"* && "$count" -lt "$maxcount" ]]; do
        sleep 1
        x=$(get_master)
        let count=count+1
    done

    [[ "$count" -ge "$maxcount" ]] && failexit "Could not find master"
    initialmaster=$x

    while [[ "$x" == "$initialmaster" && "$count" -lt $maxcount ]]; do
        x=$(get_master)
        while [[ "$CLUSTER" != *"$x"* && "$count" -lt "$maxcount" ]]; do
            sleep 1
            x=$(get_master)
            let count=count+1
        done
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS --host $x $DBNAME "EXEC PROCEDURE sys.cmd.send('downgrade')"
        sleep 1
        x=$(get_master)
        while [[ "$CLUSTER" != *"$x"* && "$count" -lt "$maxcount" ]]; do
            sleep 1
            x=$(get_master)
        done

        [[ "$x" != "$node" ]] && foundmaster=1
        let count=count+1
    done

    [[ "$count" -ge "$maxcount" ]] && failexit "Could not downgrade master"
}

function downgrade_loop
{
    [[ $debug == "1" ]] && set -x
    while [[ ! -f $stopfile ]]; do
        node=$(get_master)
        while [[ "$CLUSTER" != *"$node"* ]]; do
            sleep 1
            node=$(get_master)
        done
        downgrade
        sleep 5
    done
}

function run_verify
{
    x=$(cdb2sql $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.verify('t1')")
    echo "Verify returns $?, $x"
}

function run_test
{
    create_table
    create_index
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "INSERT INTO t1 SELECT * FROM generate_series(1, 100)"
    downgrade_loop &

    # These should halt on master swing
    for ((i=0;i<3;++i)); do
        run_verify
    done

    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait
}

[[ -z "$CLUSTER" ]] && failexit "This test requires a cluster"

run_test
echo "Success"

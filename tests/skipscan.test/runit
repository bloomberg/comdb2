#!/usr/bin/env bash
bash -n "$0" | exit 1

source ${TESTSROOTDIR}/tools/runit_common.sh

dbnm=$1
table=t1

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $table " 

cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $table { 
schema { 
    int a
    int b 
    datetime c
} 

keys
{
    dup \"AB\" = a + b
    dup \"AC\" = a + c
}
}
"

skipscan_disabled_on_node() {
    local -r node=$1
    local -r table=$2

    local llmeta_dump
    if ! llmeta_dump=$(cdb2sql --host $node ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('llmeta list')"); then
        return 1
    fi

    if echo "$llmeta_dump" | grep "LLMETA_TABLE_PARAMETERS table=\"$table\".*\"disableskipscan\":\"true\"" > /dev/null ; then
        echo "1"
    else
        echo "0"
    fi
}

skipscan_status_for_table() {
    local -r table=$1
    local -r expect_enabled=$2

    local disabled
    if [[ -z "$CLUSTER" ]]; then
        if ! disabled=$(skipscan_disabled_on_node "$(hostname)" "$table") || (( disabled != (1 - expect_enabled) )); then
            return 1
        fi
    else
        for node in $CLUSTER; do
            if ! disabled=$(skipscan_disabled_on_node "$node" "$table") || (( disabled != (1 - expect_enabled) )); then
                return 1
            fi
        done
    fi
    return 0
}

wait_for_skipscan_table_status() {
    local -r table=$1
    local -r expect_enabled=$2

    while ! skipscan_status_for_table "$table" "$expect_enabled"; do
        sleep 1
    done
}

i=1
while [ $i -le 25 ] ; do
    j=1
    while [ $j -le 200 ] ; do
        echo "insert into $table (a,b,c) values($i, $j, now())"
        let j=j+1
    done
    let i=i+1
done | cdb2sql -s ${CDB2_OPTIONS} $dbnm default - > /dev/null

assertcnt $table $((25*200))

cdb2sql ${CDB2_OPTIONS} $dbnm default "analyze $table"
cdb2sql ${CDB2_OPTIONS} $dbnm default "explain query plan select a from $table where b < 34"


echo "set explain on
select a from $table where b < 34" | cdb2sql ${CDB2_OPTIONS} $dbnm default - > out1.txt

if ! grep "begin skip-scan" out1.txt > /dev/null ; then
    failexit "not using skipscan in out1"
fi

echo "disable skipscan, check plan"
cdb2sql ${CDB2_OPTIONS} $dbnm default "put skipscan disable $table"
wait_for_skipscan_table_status $table 0

echo "set explain on
select a from $table where b < 34" | cdb2sql ${CDB2_OPTIONS} $dbnm default -  > out2.txt

if diff out1.txt out2.txt > /dev/null ; then
    failexit "out2 should be different from out1"
fi

if grep "begin skip-scan" out2.txt > /dev/null ; then
    failexit "out2 should have no skipscan"
fi

echo "enable skipscan, check plan"
cdb2sql ${CDB2_OPTIONS} $dbnm default "put skipscan enable $table"
wait_for_skipscan_table_status $table 1

echo "set explain on
select a from $table where b < 34" | cdb2sql ${CDB2_OPTIONS} $dbnm default - > out3.txt

if ! diff out1.txt out3.txt > /dev/null ; then
    failexit "out3 should be same as out1"
fi

# {175177284}
cat << EOF | cdb2sql ${CDB2_OPTIONS} $dbnm default - >out4.txt 2>&1
DROP TABLE IF EXISTS t
CREATE TABLE t(a int, b int, c int)\$\$
CREATE INDEX foo ON t(B,C)
SET TRANSACTION CHUNK 100
BEGIN 
INSERT INTO t(a,b,c) select value, value/10000, value from generate_series(1,100000)
COMMIT
ANALYZE t
SELECT c,b,a from t where c > 10000000 ORDER BY B DESC
EOF

if ! diff out4.txt out4.expected > /dev/null ; then
    failexit "expected empty result set but got rows back!"
fi

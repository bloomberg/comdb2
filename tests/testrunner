#!/usr/bin/python3

import argparse
import select
import string
import subprocess
import sys
import time

try:
    import blessings
except:
    sys.stderr.write("No blessings module installed?\n")
    sys.stderr.write("Try 'sudo pip install blessings'\n")
    sys.stderr.write("pip should be available from your OS repository, or\n")
    sys.stderr.write("https://pip.pypa.io/en/stable/installing/\n")
    sys.exit(1)

test_status = {}
test_status_list = []
test_status_message = {}
term = blessings.Terminal()
cmdargs = {}
passed = 0
failed = 0
testid = 0

class Status:
    def __init__(self, db, st):
        self.db = db
        self.status = st
        self.time = int(time.time())

    STARTING = 1
    CREATING = 2
    WAITING = 3
    COPYING = 4
    RUNNING = 5
    FAILED = 6
    TIMEOUT = 7
    PASSED = 8
    UNKNOWN = 9

    def query_status(self):
        if self.status == Status.CREATING: return term.on_black + term.white + 'creating' + term.white
        elif self.status == Status.WAITING: return term.on_black + term.yellow + 'waiting until ready' + term.white
        elif self.status == Status.STARTING: return term.on_black + term.white + 'starting' + term.white
        elif self.status == Status.PASSED: return term.on_black + term.green + 'success' + term.white
        elif self.status == Status.FAILED: return term.on_black + term.red + 'failed' + term.white
        elif self.status == Status.TIMEOUT: return term.on_black + term.red + 'timeout' + term.white
        elif self.status == Status.RUNNING: return term.on_black + term.yellow + 'running' + term.white
        elif self.status == Status.COPYING: return term.on_black + term.yellow + 'copying to cluster' + term.white
        else: return "???" + str(self.status)

def string_to_status(s):
    if s.startswith('creating'): return Status.CREATING
    elif s.startswith('waiting until ready'): return Status.WAITING
    elif s.startswith('starting'): return Status.STARTING
    elif s.startswith('success'): return Status.PASSED
    elif s.startswith('failed'): return Status.FAILED
    elif s.startswith('timeout'): return Status.TIMEOUT
    elif s.startswith('running'): return Status.RUNNING
    elif s == 'copying to cluster': return Status.COPYING
    else: return Status.UNKNOWN

def updlist():
    def cmp_to_key(mycmp):
        'Convert a cmp= function into a key= function'
        class K:
            def __init__(self, obj, *args):
                self.obj = obj
            def __lt__(self, other):
                return mycmp(self.obj, other.obj) < 0
            def __gt__(self, other):
                return mycmp(self.obj, other.obj) > 0
            def __eq__(self, other):
                return mycmp(self.obj, other.obj) == 0
            def __le__(self, other):
                return mycmp(self.obj, other.obj) <= 0
            def __ge__(self, other):
                return mycmp(self.obj, other.obj) >= 0
            def __ne__(self, other):
                return mycmp(self.obj, other.obj) != 0
        return K

    global test_status_list
    def sortfunc(a, b):
        a = test_status[a]
        b = test_status[b]
        if a.status != b.status:
            return a.status - b.status
        if a.time != b.time:
            return a.time - b.time
        if a.db < b.db:
            return -1
        elif a.db == b.db:
            return 0;
        else:
            return 1

    test_status_list = sorted(list(test_status.keys()), key=cmp_to_key(sortfunc))
#   test_status_list.sort(cmp=sortfunc)

def dumpresults():
    global failed
    print(term.exit_fullscreen())
    print(term.on_black + term.white)
    print("passed " + str(passed) + " tests, failed " + str(failed) + " tests")
    if failed > 0:
        sys.stdout.write("failed tests:\n")
        for db in test_status:
            if test_status[db].status == Status.FAILED: 
                sys.stdout.write(db + " " + test_status_message[db] + "\n") 
            if test_status[db].status == Status.TIMEOUT:
                sys.stdout.write(db + " (timeout)\n") 
        sys.exit(1)
    else:
        sys.exit(0)

def render():
    global term
    print(term.clear())
    now = int(time.time())
    with term.location(0, 0):
        print(term.white + term.on_black + "to stop test, run ./stopall " + str(testid))
    with term.location(0, 1):
        print(term.white + 'passed: ' + term.on_black + term.green + str(passed) + term.white + '   failed: ' + term.red + str(failed))
    print(term.white + term.on_black)
    for i in range(0, min(term.height - 2, len(test_status_list))):
        with term.location(0, i+2):
             st = test_status[test_status_list[i]]
             if st.status != Status.FAILED and st.status != Status.PASSED and st.status != Status.TIMEOUT:
                s = "%-30s %40s %d sec" % (st.db, st.query_status(), now - st.time)
             else:
                s = "%-30s %40s" % (st.db, st.query_status())
             print(s)
    term.move(0, 1)

ap = argparse.ArgumentParser()
ap.add_argument("--parallel", "-j", help="number of tests to run in parallel", type=int, default=5)
ap.add_argument("testname", help="specific testname to run, runs all tests if absent", nargs='*')
args = ap.parse_args()

print(term.on_black)
print(term.enter_fullscreen())

err=open("/dev/null")
cmd = ["make", "-k",  "-j" + str(args.parallel)]
cmd.extend(args.testname)
testrun = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=err, universal_newlines=True)

poll = select.poll()
poll.register(testrun.stdout, select.POLLIN)
line = testrun.stdout.readline()
while line != '':
    try:
        # if we have no data for a second, update the running times
        if not poll.poll(1000):
            updlist()
            render()
            continue

        if line.startswith('TESTID='):
           testid=line[7:]

        if line[0] == '!':
           line=line[1:]
           (db, status) = line.split(':', 1)
   
           status = status.rstrip().lstrip()
           st = string_to_status(status)
           if st != Status.UNKNOWN:
               test_status[db] = Status(db, st)
           if st == Status.FAILED:
               failed = failed+1
               test_status_message[db] = status
           elif st == Status.PASSED:
               passed = passed+1
           updlist()
           render()

        line = testrun.stdout.readline()
    except KeyboardInterrupt:
       dumpresults() 
       break

dumpresults()

#!/usr/bin/env bash
bash -n "$0" | exit 1

[[ $debug == "1" ]] && set -x
export cl_iters=5
export forked_cl=0
export cl_pids
export cl_thd_pid=0
export coherent_pid=0
export downgrade_pid=0
export pidroot=cldeadlock
export incoherent_fail=incoherent.fail

function write_prompt
{
    typeset func=$1
    echo "[$func] $2"
}

function cleanup
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    write_prompt $func "executing $cleanup"
    j=0
    while [[ $j -lt $cl_iters ]]; do
        kill -9 $(cat $pidroot.$j)
        let j=j+1
    done

    [[ "$cl_thd_pid" -gt 0 ]] && kill -9 $cl_thd_pid
    [[ "$coherent_pid" -gt 0 ]] && kill -9 $coherent_pid
    [[ "$downgrade_pid" -gt 0 ]] && kill -9 $downgrade_pid

    cl_thd_pid=0
    coherent_pid=0
    downgrade_pid=0
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    typeset f=$1
    cleanup
    write_prompt $func "$f failed: $2"
    exit -1
}

function check_coherent
{
    [[ $debug == "1" ]] && set -x
    typeset func="check_coherent"
    typeset max_incoherent=${1:-1}
    typeset count=0
    typeset verbose=${1:-0}
    typeset r=0
    [[ "$verbose" == 1 ]] && write_prompt $func "executing $func"
    master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send(\"bdb cluster\")" | grep MASTER | cut -f1 -d":" | tr -d '[:space:]') 2>/dev/null
    if [[ -n "$master" ]] ; then
        $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send(\"bdb cluster\")" | grep COHERENT > /dev/null
        r=$?
    fi
    while [[ $r == 0 ]]; do
        let count=count+1
        write_prompt $func "incoherent count $count"
        if [[ "$count" -ge "$max_incoherent" ]] ; then
            touch $incoherent_fail
            failexit "cluster is not coherent"
        fi
        sleep 1
        master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send(\"bdb cluster\")" | grep MASTER | cut -f1 -d":" | tr -d '[:space:]') 2>/dev/null
        if [[ -n "$master" ]] ; then
            $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send(\"bdb cluster\")" | grep COHERENT > /dev/null
            r=$?
        fi
    done
}

function downgrade_loop
{
    [[ $debug == "1" ]] && set -x
    typeset func="downgrade_loop"
    write_prompt $func "executing $func"
    typeset sleeptime=${1:-1}
    while :; do
        sleep $sleeptime
        write_prompt $func "downgrading master"
        for x in $CLUSTER; do
            $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME --host $x "exec procedure sys.cmd.send(\"downgrade\")" >/dev/null 2>&1
        done
    done
}

function coherent_loop
{
    [[ $debug == "1" ]] && set -x
    typeset func="check_coherent"
    typeset max_incoherent=${1:-1}
    write_prompt $func "executing $func"
    while :; do 
        check_coherent $max_incoherent
        sleep 1
    done
}

function create_table
{
    [[ $debug == "1" ]] && set -x
    typeset func="create_table"
    typeset tbl=$1
    typeset cmd="create table $tbl(a int)"
    write_prompt $func "executing $func"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "$cmd"
    write_prompt $func "$cmd"
    typeset cmd="create index idx1 on $tbl(a)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "$cmd"
    write_prompt $func "$cmd"
}

function cluster_thread
{
    [[ $debug == "1" ]] && set -x
    typeset func="cluster_thread"
    typeset sltime=${1:-5}
    typeset master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send(\"bdb cluster\")" | grep MASTER | cut -f1 -d":" | tr -d '[:space:]')
    write_prompt $func "executing $func"
    while :; do
        $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send(\"bdb cluster\")"
        sleep $sltime
    done
}

function fill_table
{
    [[ $debug == "1" ]] && set -x
    typeset func="fill_table"
    write_prompt $func "executing $func"
    typeset tbl=$1
    typeset recs=${2:-100000}
    typeset step=${3:-100000}
    typeset count=0

    while [[ $recs -gt 0 ]]; do
        $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "insert into t1 select * from generate_series(1, $step)" >/dev/null
        let recs=recs-step
        let count=count+step
        write_prompt $func "inserted $count records"
    done
}

function cldeadlock
{
    [[ $debug == "1" ]] && set -x
    typeset func="cldeadlock"
    typeset iter=$1
    typeset pidfile=$pidroot.$iter
    write_prompt $func "executing $func-$iter"
    ${TESTSBUILDDIR}/cldeadlock -d $DBNAME -f $pidfile -c $CDB2_CONFIG -t default 2>&1 | gawk "{print \"[$func-$iter]\", \$0; fflush(); }"
}

function cldeadlock_threads
{
    [[ $debug == "1" ]] && set -x
    typeset func="cldeadlock_threads"
    write_prompt $func "executing $func"
    typeset iters=${1:-5}
    typeset j=0
    while [[ $j -lt $iters ]]; do
        cldeadlock $j &
        cl_pids[$j]=$!
        let j=j+1
    done
    export forked_cl=1
    j=0
    while [[ $j -lt $iters ]]; do
        wait ${cl_pids[$j]}
        let j=j+1
    done
    export forked_cl=0
}

function start_cluster_trace
{
    [[ $debug == "1" ]] && set -x
    typeset func="start_cluster_trace"
    write_prompt $func "executing $func"
    cluster_thread &
    cl_thd_pid=$!
}

function start_coherent_loop
{
    [[ $debug == "1" ]] && set -x
    typeset func="start_coherent_loop"
    typeset max_incoherent=${1:-1}
    write_prompt $func "executing $func"
    coherent_loop $max_incoherent &
    coherent_pid=$!
}

function start_downgrade_thread
{
    [[ $debug == "1" ]] && set -x
    typeset func="start_downgrade_thread"
    write_prompt $func "executing $func"
    downgrade_loop 20 &
    downgrade_pid=$!
}

function normal_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="normal_test"
    write_prompt $func "executing $func"
    start_coherent_loop
    cldeadlock_threads $cl_iters
    check_coherent
    cleanup
}

function downgrade_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="downgrade_test"
    write_prompt $func "executing $func"
    start_coherent_loop 20
    start_downgrade_thread
    cldeadlock_threads $cl_iters
    cleanup
    sleep 10
    check_coherent
}

function setup_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="setup"
    rm -f $incoherent_fail
    write_prompt $func "executing $func"
    create_table t1
    fill_table t1
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    write_prompt $func "executing $func"
    setup_test
    downgrade_test
    normal_test
    [[ -f $incoherent_fail ]] && failexit "Cluster went incoherent"
}

run_test
echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


function failexit
{
    echo "Failed $1"
    exit -1
}

if [ -z $COMDB2_EXE ] ; then
   failexit '$COMDB2_EXE is not set'
fi


function assertcnt 
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}


function assertsel
{
    target=$1
    cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t1 order by a" > sel.out
    if ! diff $target sel.out ; then
        echo "assertsel select error: diff $target sel.out"
    fi
}


function assert_vers 
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
    tblver=$newver
}

function assert_schema 
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}


function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


# Update all records in the table
function update_all_records
{
    typeset prmsg=$1
    typeset iter=0

    [[ "$debug" == 1 ]] && set -x

    while :; do 

        cdb2sql -s ${CDB2_OPTIONS} $dbnm default "update t1 set c=x'1234' where b='test1'" >/dev/null 2>&1
        let iter=iter+1

        if [[ -n "$prmsg" && $(( iter % prmsg )) == 0 ]]; then

            echo "Updated all of table t1 $iter times."

        fi

    done
}

function update_records
{
    j=0
    nrecs=$1
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+100000 where a = $j" >> update.out 
        let j=j+1
    done
}

function insert_records
{
    j=$1
    nstop=$2
    rowsfl=$3
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c) values ($j,'test1$j',$j)"  &>> $insfl
        echo "(a=$j, b='test1$j', c=$j)" >> $rowsfl
        let j=j+1
    done
    echo "done inserting round $nins"
}

function insert_records_oneshot
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        echo "insert into t1(a,b,c) values ($j,'test1$j',$j)" 
        let j=j+1
    done | cdb2sql ${CDB2_OPTIONS} $dbnm default -  &>> $insfl
    echo "done inserting round $nins"
}


function kill_by_pidfile() {
    pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        ps -p $pid -o args | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then
            echo "kill -9 $pid"
            kill -9 $pid
        fi
        rm -f $pidfile
    else
        failexit "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}


function kill_restart_node 
{
    node=$1
    echo "kill_restart_node $node"
    pushd $DBDIR
    cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'exec procedure sys.cmd.send("flush")'

    if [ -n "$CLUSTER" ] ; then
        kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
        mv -b $TESTDIR/logs/${DBNAME}.${node}.db $TESTDIR/logs/${DBNAME}.${node}.db.1
        sleep 1
        if [ $node != `hostname` ] ; then
            ssh -o StrictHostKeyChecking=no -tt $node COMDB2_ROOT=$COMDB2_ROOT $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl >$TESTDIR/logs/${DBNAME}.${node}.db 2>&1 </dev/null &
            echo $! > ${TMPDIR}/${DBNAME}.${node}.pid
        else
            $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl &> $TESTDIR/logs/${DBNAME}.${node}.db -pidfile ${TMPDIR}/${DBNAME}.${node}.pid &
        fi
    else
        kill_by_pidfile ${TMPDIR}/${DBNAME}.pid
        mv -b $TESTDIR/logs/${DBNAME}.db $TESTDIR/logs/${DBNAME}.db.1
        sleep 1
        echo "$DBNAME: starting single node"
        echo "$COMDB2_EXE $DBNAME $TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid"
        $COMDB2_EXE $DBNAME >$TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid 2>&1 &
    fi

    popd

    out=0
    # wait until we can query it
    echo "$DBNAME: waiting until ready"
    while [[ "$out" != "1" ]]; do
        sleep 2
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
    done
    echo "$DBNAME: db is up out=$out"
}


function kill_restarttolsn
{
    pushd $DBDIR
    node=$1
    lsn=$2
    echo "kill_restarttolsn $node, lsn $lsn"
    cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'exec procedure sys.cmd.send("flush")'

    if [ -n "$CLUSTER" ] ; then
        echo not supported in cluster mode
        exit 1
    fi

    kill_by_pidfile ${TMPDIR}/${DBNAME}.pid
    mv -b $TESTDIR/logs/${DBNAME}.db $TESTDIR/logs/${DBNAME}.db.1
    sleep 1

    echo "$DBNAME: recovering to lsn $lsn"
    $COMDB2_EXE --recovertolsn $lsn $DBNAME >$TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid 2>&1

    mv -b $TESTDIR/logs/${DBNAME}.db $TESTDIR/logs/${DBNAME}.db.2
    echo "$DBNAME: starting single node"
    echo "$COMDB2_EXE $DBNAME $TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid"
    $COMDB2_EXE $DBNAME >$TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid 2>&1 &

    popd

    out=
    # wait until we can query it
    echo "$DBNAME: waiting until ready"
    while [[ "$out" != "1" ]]; do
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        sleep 2
    done
}


function get_schemachange_status
{
    master=$1
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('stat')" | grep "Schema change in progress" > schemachange_status.out
    if [ $? -eq 0 ] ; then
        return 1 
    fi
    return 0
}


function getmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}


if [[ -n "$CLUSTER" ]]; then
    echo Test meaninful in single node only, not clustered
    exit 0
fi

echo "Test with insert, SC should not fail"

cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('debg 0')"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1_1.csc2 ` }"

master=`getmaster`

insert_records 1 200 rows1.txt
echo check records match inserted
assert_vers t1 0
assertcnt 200
assertsel rows1.txt
do_verify

kill_restart_node $master
cdb2sql ${CDB2_OPTIONS} --tabs --host $node $dbnm  'select 1'
cdb2sql ${CDB2_OPTIONS} --tabs $dbnm default 'select 1'

assert_vers t1 0
assert_schema t1 t1_1.csc2
assertcnt 200
assertsel rows1.txt
do_verify

lsn=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | sed 's/.*lsn //g ; s/ .*//g'`
echo "got present lsn up to which we will recover, lsn=$lsn"


#run inserts, updates, deletes and make sure they are in new btrees
insert_records_oneshot 201 400
assertcnt 400

echo "about to delete, $SECONDS"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "delete from t1 where a % 2 = 1"
echo "about to update, $SECONDS"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "update t1 set a = a + 100000 where 1"
echo "about to insert, $SECONDS"

insert_records_oneshot 401 600
echo "after insert, $SECONDS"

# 400 = 600 - (200 deleted !!)
assertcnt 400


kill_restarttolsn $master $lsn
assert_vers t1 0
assert_schema t1 t1_1.csc2
assertcnt 200
assertsel rows1.txt
do_verify

echo "Success"

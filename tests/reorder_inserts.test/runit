#!/usr/bin/env bash
bash -n "$0" | exit 1

set -e
set -x

source ${TESTSROOTDIR}/tools/runit_common.sh

if [[ "x${DEBUGGER}" == "xvalgrind" ]] ; then
    CDB2SQL_EXE="$DEBUGGER $CDB2SQL_EXE" 
fi

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0

assert_vers()
{
    local loc_tbl=$1
    local target=$2
    local newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$loc_tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

COUNT=5000
TRANSZ=50
INSERTERS=20

do_inserts()
{
    sleep 0.1 #give time to start all inserters
    item=$1

    local j=0
    start=$RANDOM$RANDOM
    outfl=insert${item}.out
    echo "" > $outfl

    while [[ $j -lt $COUNT ]] ; do 
      echo "begin"
      local i=0
      while [[ $i -lt $TRANSZ ]] ; do 
        echo "insert into t1 (a, b, c, d, e, f, g) values ($j+$start, random(), random(), random(), random(), random(), random())"
        let j=j+1
        let i=i+1
      done
      echo "commit"

    done | cdb2sql ${CDB2_OPTIONS} $dbnm default &> $outfl  || failexit "delete_reconds error"

    echo "done inserter $item"
}

#cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "INSERT INTO t1 (a,b,c,d) WITH i(x) AS ( VALUES(1) UNION ALL SELECT x+1 FROM i where x < $NUM) SELECT x,(x+1)%100,(x+2)%100,(x+3)%100 FROM i" > ins1.out

tun=`cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "select value from comdb2_tunables where name='print_deadlock_cycles'"`
assertres $tun 1 # Tunable needs to be set to 1

i=0
while [[ $i -lt $INSERTERS ]] ; do 
    do_inserts $i &
    let i=i+1
done

wait
cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "select * from t1 order by a" > t1content.out
assertcnt t1 $((i*COUNT))


# get master node
master=`getmaster`

export LOGDIR=$TESTDIR/logs # from setup
if [[ -z "$CLUSTER" ]] ; then
    mlog=$LOGDIR/${DBNAME}.db
else
    mlog=$LOGDIR/${DBNAME}.${master}.db
fi

ddcount=`grep -c DEADLOCK $mlog`

if [[ $DBNAME == *"noreordergenerated"* ]] ; then
    if [[ $ddcount -lt 500 ]] ; then
        failexit 'no reorder expected to get more than 500 deadlocks for this test'
    fi
else
    if [[ $ddcount -gt 500 ]] ; then
        failexit 'reorder expected to get less than 500 deadlocks for this test'
    fi
fi

echo "Success"

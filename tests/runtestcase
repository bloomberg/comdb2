#!/usr/bin/env bash

TEST_TIMEOUT=${TEST_TIMEOUT:-5m}
if [[ "$(arch)" == "armv7l" ]] ; then
    t=${TEST_TIMEOUT%%m}
    TEST_TIMEOUT=$(($t * 3 + 2))m
fi
SETUP_TIMEOUT=${SETUP_TIMEOUT:-2m}

export HOSTNAME=${HOSTNAME:-`hostname`}
export CLEANUPDBDIR=${CLEANUPDBDIR:-1}
source $TESTSROOTDIR/setup.common
export PATH="${paths}/:${PATH}"
export pmux_port=${PMUXPORT:-5105}  # assign to 5105 if it was not set as a make parameter
successful=0

DATETIME=$(date +"%Y-%m-%d %H:%M:%S")
echo Starting $TESTCASE with id $TESTID at $DATETIME >> $TESTDIR/test.log
mkdir -p ${TESTDIR}/logs/

call_unsetup() {
    [[ $COMDB2_UNITTEST == 1 ]] && return
    ${TESTSROOTDIR}/unsetup $successful &> >(gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' | tee ${TESTDIR}/logs/${DBNAME}.unsetup | cut -c11- | grep "^!" )
}

warn_long_setup() {
    start=$(date +%s)
    ( ${TESTSROOTDIR}/setup &> >(gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' | tee ${TESTDIR}/logs/${DBNAME}.setup | cut -c11- | grep "^!" ) ) &
    pid=$!
    kill -0 $pid >/dev/null 2>&1
    r=$?
    while [[ $r == 0 ]]; do
        sleep 1
        now=$(date +%s)
        if [[ $(( now - start )) -gt 120 ]]; then
            echo "SLOW SETUP : $(( now - start )) SECONDS .. LOOK AT THIS"
        fi
        kill -0 $pid >/dev/null 2>&1
        r=$?
    done
    return 0
}

find_cores() {
    cr=`find ${TESTDIR} | grep core`
    if [[ -n "$cr" ]] ; then
        echo $cr
        return
    fi
    for node in ${CLUSTER/$HOSTNAME/} ; do
        cr=`ssh -o StrictHostKeyChecking=no $node "find ${TESTDIR} | grep core" < /dev/null`

        if [[ -n "$cr" ]] ; then
            echo "$node:$cr"
            return 
        fi
    done
}

call_setup() {
    [[ $COMDB2_UNITTEST == 1 ]] && return

    if [[ $SETUP_WARN ]]; then
         warn_long_setup
         rc=$?
    else
        { timeout ${SETUP_TIMEOUT} ${TESTSROOTDIR}/setup 2>&1 || echo $?; } | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' | tee ${TESTDIR}/logs/${DBNAME}.setup | cut -c11- | grep "^!"
    fi
    sleep 0.1
    #last line of .setup file will contain the error rc if any
    ret=`tail -1 ${TESTDIR}/logs/${DBNAME}.setup | cut -c11-`
    cr=`find_cores`

    if [[ -n "$cr" ]] ; then
        echo "!$TESTCASE: setup failed with core dumped ($cr)"
        echo "!$TESTCASE: setup failed with core dumped ($cr)" >> ${TESTDIR}/test.log
    elif [[ $ret != "setup successful" ]] ; then
        echo "!$TESTCASE: setup failed (rc=$ret)" >> ${TESTDIR}/test.log
        echo "!$TESTCASE: setup failed (rc=$ret) see ${TESTDIR}/logs/${DBNAME}.setup"
        call_unsetup
        sleep 0.1
        exit 1
    fi
}


call_setup
echo "!$TESTCASE: running with timeout ${TEST_TIMEOUT}"

timeout ${TEST_TIMEOUT} ./runit ${DBNAME} 2>&1  | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' &> ${TESTDIR}/logs/${DBNAME}.testcase

rc=${PIPESTATUS[0]}
cr=`find_cores`

if [[ -n "$cr" ]] ; then
    echo "!$TESTCASE: failed with core dumped ($cr)"
    echo "!$TESTCASE: failed" >> ${TESTDIR}/test.log
elif [[ $rc -eq 124 ]] ; then
    echo "!$TESTCASE: timeout (logs in ${TESTDIR}/logs/${DBNAME}.testcase)"
    echo "!$TESTCASE: timeout" >> ${TESTDIR}/test.log
    successful=-1
elif [[ $rc -eq 0 ]] ; then
    echo "!$TESTCASE: success (logs in ${TESTDIR}/logs/${DBNAME}.testcase)"
    echo "!$TESTCASE: success" >> ${TESTDIR}/test.log
    successful=1
else
    echo "!$TESTCASE: failed rc=$rc (logs in ${TESTDIR}/logs/${DBNAME}.testcase)"
    echo "!$TESTCASE: failed" >> ${TESTDIR}/test.log
fi

call_unsetup

DATETIME=$(date +"%Y-%m-%d %H:%M:%S")
echo Done $TESTCASE with id $TESTID at $DATETIME >> $TESTDIR/test.log
echo "Duration $SECONDS seconds" >> ${TESTDIR}/logs/${DBNAME}.testcase

exit $rc

#!/usr/bin/env bash

# set -x
# on exit call_unsetup
trap "call_unsetup \"0\"" INT EXIT

TEST_TIMEOUT=${TEST_TIMEOUT:-5m}
if [[ "$(arch)" == "armv7l" ]] ; then
    t=${TEST_TIMEOUT%%m}
    TEST_TIMEOUT=$(($t * 3 + 2))m
elif [[ "x${DEBUGGER}" == "xvalgrind" ]] ||  [[ "x${DEBUGGER}" == "xcallgrind" ]]; then
    t=${TEST_TIMEOUT%%m}
    TEST_TIMEOUT=$(($t * 10 + 2))m
fi
SETUP_TIMEOUT=${SETUP_TIMEOUT:-2m}

if [[ -n "$NUMNODESTOUSE" ]] ; then
    ncl=`echo $CLUSTER | tr ' *' '\n' | sed '/^[[:space:]]*$/d' | shuf -n $NUMNODESTOUSE | xargs echo`
    # from now on, CLUSTER will be a subset of original machines
    export CLUSTER=$ncl
fi


export HOSTNAME=${HOSTNAME:-`hostname`}
export CLEANUPDBDIR=${CLEANUPDBDIR:-1}
source $TESTSROOTDIR/setup.common
export PATH="${paths}/:${PATH}"
export pmux_port=${PMUXPORT:-5105}  # assign to 5105 if it was not set as a make parameter
TEST_LOG=${TESTDIR}/test.log
successful=0

DATETIME=$(date +"%Y-%m-%d %H:%M:%S")
echo Starting $TESTCASE with id $TESTID at $DATETIME >> ${TEST_LOG}
mkdir -p ${TESTDIR}/logs/

call_unsetup() {
    [[ $COMDB2_UNITTEST == 1 ]] && return
    ${TESTSROOTDIR}/unsetup $successful &> >(gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' | tee ${TESTDIR}/logs/${DBNAME}.unsetup | cut -c11- | grep "^!" )
}

warn_long_setup() {
    start=$(date +%s)
    ( ${TESTSROOTDIR}/setup &> >(gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' | tee ${TESTDIR}/logs/${DBNAME}.setup | cut -c11- | grep "^!" ) ) &
    pid=$!
    kill -0 $pid >/dev/null 2>&1
    r=$?
    while [[ $r == 0 ]]; do
        sleep 1
        now=$(date +%s)
        if [[ $(( now - start )) -gt 120 ]]; then
            echo "SLOW SETUP : $(( now - start )) SECONDS .. LOOK AT THIS"
        fi
        kill -0 $pid >/dev/null 2>&1
        r=$?
    done
    return 0
}

#
# Find cores from running a test -- primarily aimed to find cores from the
# comdb2 executable in the directory where cores are saved.
# If core_pattern is the default 'core' then it will find and report any cores 
# in the TESTDIR, even those from other programs.
# If core_pattern includes name (%e) and pid (%p), then we will search 
# in the cores directory (if not set then in TESTDIR) for core file 
# containing comdb2 and pid in core filename.
find_cores() {
    # assumes core location and pattern is the same as local machine
    # for all machines in cluster 
    local LCLDBNM=$1
    local LCLDBDIR=$2
    local COREAGE=60
    local CPAT=$(< /proc/sys/kernel/core_pattern)  # like cat core_pattern
    local COREDIR=$(dirname $CPAT 2>/dev/null)
    if [ "x$COREDIR" == "x" ] || [ "x$COREDIR" == "x." ] ; then  # when just 'core'
        COREDIR=$LCLDBDIR
    else
        CPAT=`basename $CPAT`
    fi
    local has_pattern=0  # We assume core pattern is same for all machines
    grep '%e\|%t\|%u\|%g\|%s\|%h\|%p' /proc/sys/kernel/core_pattern > /dev/null && has_pattern=1
    local COREFL="$COREDIR/$CPAT"
    local CORECMD="find ${COREDIR} -mmin -$COREAGE -regex '$COREFL' 2> /dev/null"
    local PIDFL=${TMPDIR}/${LCLDBNM}.pid


    # always check localhost because thats where we create db
    if [ $has_pattern -eq 1 ] ; then
        local PID=$(cat ${PIDFL} 2> /dev/null)
        COREFL=`echo $CPAT | sed "s/%e/comdb2/g; s/.%t/.[^.]*/g; s/.%u/.[^.]*/g; s/.%g/.[^.]*/; s/.%s/.[^.]*/; s/.%h/.[^.]*/; s/%p/$PID/g; s/\.\./\./;"`
        COREFL=$COREDIR/$COREFL
        CORECMD="find ${COREDIR} -mmin -$COREAGE -regex '${COREFL}.*' 2> /dev/null"
        if [ "x$PID" == "x" ] ; then
            CORECMD="echo ''"
        fi
    fi

    eval cr=\$\(${CORECMD}\)       # or can do cr=$(eval ${CORECMD}) or cr=$(find ${COREDIR} | grep $COREFL)
    if [[ -n "$cr" ]] ; then
        echo "Core file $HOSTNAME:${cr} copied to $LCLDBDIR" > $LCLDBDIR/core_stacktrace.$HOSTNAME.txt
        ln ${cr} -t $LCLDBDIR || cp ${cr} $LCLDBDIR #if can't hardlink then just copy
        which gdb > /dev/null && [ -f $cr ] && echo 'where' | gdb -q $COMDB2_EXE $cr &>> $LCLDBDIR/core_stacktrace.$HOSTNAME.txt
        which gdb > /dev/null && [ -f $cr ] && echo 't a a bt full' | gdb -q $COMDB2_EXE $cr &>> $LCLDBDIR/core_stacktrace_long.$HOSTNAME.txt
        ln $COMDB2_EXE -t $LCLDBDIR #make a hardlink of the executable as well
        echo $cr # this is the return value of the function
        echo "    see $LCLDBDIR/core_stacktrace.$HOSTNAME.txt"
    fi


    if [[ -n "$CLUSTER" ]] ; then
        #check again for clustered local crash
        PIDFL=${TMPDIR}/${LCLDBNM}.$HOSTNAME.pid
        if [ $has_pattern -eq 1 ] ; then
            local PID=$(cat ${PIDFL} 2> /dev/null)
            COREFL=`echo $CPAT | sed "s/%e/comdb2/g; s/.%t/.[^.]*/g; s/.%u/.[^.]*/g; s/.%g/.[^.]*/; s/.%s/.[^.]*/; s/.%h/.[^.]*/; s/%p/$PID/g; s/\.\./\./;"`
            COREFL=$COREDIR/$COREFL
            CORECMD="find ${COREDIR} -mmin -$COREAGE -regex '${COREFL}.*' 2> /dev/null"
            if [ "x$PID" == "x" ] ; then
                CORECMD="echo ''"
            fi
        fi

        eval cr=\$\(${CORECMD}\)       # or can do cr=$(eval ${CORECMD}) or cr=$(find ${COREDIR} | grep $COREFL)
        if [[ -n "$cr" ]] ; then
            echo "Core file $HOSTNAME:${cr} copied to $LCLDBDIR" > $LCLDBDIR/core_stacktrace.$HOSTNAME.txt
            cp ${cr} $LCLDBDIR
            which gdb > /dev/null && [ -f $cr ] && echo 'where' | gdb -q $COMDB2_EXE $cr &>> $LCLDBDIR/core_stacktrace.$HOSTNAME.txt
            which gdb > /dev/null && [ -f $cr ] && echo 't a a bt full' | gdb -q $COMDB2_EXE $cr &>> $LCLDBDIR/core_stacktrace_long.$HOSTNAME.txt
            ln $COMDB2_EXE -t $LCLDBDIR #make a hardlink of the executable as well
            echo $cr # this is the return value of the function
            echo "    see $LCLDBDIR/core_stacktrace.$HOSTNAME.txt"
        fi
    fi

    for node in ${CLUSTER} ; do
        if [ $node == $HOSTNAME ] ; then
            continue
        fi
        if [ $has_pattern -eq 1 ] ; then
            PIDFL=${TMPDIR}/${LCLDBNM}.pid
            local PID=`ssh -o StrictHostKeyChecking=no $node "cat ${PIDFL} 2> /dev/null" </dev/null`
            if [ "x$PID" == "x" ] ; then
                continue
            fi
            COREFL=`echo $CPAT | sed "s/%e/comdb2/g; s/.%t/.[^.]*/g; s/.%u/.[^.]*/g; s/.%g/.[^.]*/; s/.%s/.[^.]*/; s/.%h/.[^.]*/; s/%p/$PID/g; s/\.\./\./;"`
            COREFL=$COREDIR/$COREFL
            CORECMD="find ${COREDIR} -mmin -$COREAGE -regex '${COREFL}.*' 2> /dev/null"
        fi

        cr=`ssh -o StrictHostKeyChecking=no $node "$CORECMD" < /dev/null`

        if [[ -n "$cr" ]] ; then
            echo "$node:$cr" # this is the return value of the function
            local space=$(df .  | awk '{print $4}' | grep -v Available)
            local size=$(ssh $node "ls -s $cr | cut -f1 -d' '")
            if [[ $size -lt $space ]] ; then # if there is space, copy locally
                local copy_core=$LCLDBDIR/${node}.`basename $cr`
                scp -o StrictHostKeyChecking=no $node:${cr} $copy_core < /dev/null
                echo "Core file $node:${cr} copied to $copy_core" > $LCLDBDIR/core_stacktrace.$node.txt
                echo 'where' | gdb -q $COMDB2_EXE $copy_core &>> $LCLDBDIR/core_stacktrace.$node.txt
                echo 't a a bt full' | gdb -q $COMDB2_EXE $copy_core &>> $LCLDBDIR/core_stacktrace_long.$node.txt
                ln $COMDB2_EXE -t $LCLDBDIR #make a hardlink of the executable as well
                echo "    see $LCLDBDIR/core_stacktrace.$node.txt"
            fi
        fi
    done
}


call_setup() {
    [[ $COMDB2_UNITTEST == 1 ]] && return

    if [[ $SETUP_WARN ]]; then
         warn_long_setup
         rc=$?
    else
        { timeout ${SETUP_TIMEOUT} ${TESTSROOTDIR}/setup 2>&1 || echo $?; } | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' | tee ${TESTDIR}/logs/${DBNAME}.setup | cut -c11- | grep "^!"
    fi
    sleep 0.8 # wait a bit for any cores
    #last line of .setup file will contain the error rc if any
    ret=`tail -1 ${TESTDIR}/logs/${DBNAME}.setup | cut -c11-`

    cr=`find_cores ${DBNAME} $DBDIR`

    if [[ -z "$cr" ]] && [[ -n "${SECONDARY_DBNAME}" ]] ; then
        cr=`find_cores ${SECONDARY_DBNAME} ${SECONDARY_DBDIR}`
    fi


    if [[ -n "$cr" ]] ; then
        echo "!$TESTCASE: setup failed with core dumped ($cr)" | tee -a ${TEST_LOG}
        call_unsetup
        sleep 0.1
        exit 1
    elif [[ $ret != "setup successful" ]] ; then
        echo "!$TESTCASE: setup failed (rc=$ret)" >> ${TEST_LOG}
        echo "!$TESTCASE: setup failed (rc=$ret) see ${TESTDIR}/logs/${DBNAME}.setup"
        call_unsetup
        sleep 0.1
        exit 1
    fi
}


check_db_at_finish() {
    local LCLDBNM="$1"
    local LCLCONFIG="$2"
    local LCLOPTIONS="--cdb2cfg ${LCLCONFIG}"

    if [[ -z "$CLUSTER" ]] ; then
        out=$(timeout 1m $CDB2SQL_EXE ${LCLOPTIONS} --admin --tabs --host localhost $LCLDBNM 'select 1' 2>&1)
        if [ "$out" != "1" ] ; then
            timeout 1m $CDB2SQL_EXE -v ${LCLOPTIONS} --admin --tabs --host localhost $LCLDBNM 'select 1' &> ${TESTDIR}/logs/${LCLDBNM}.atfinish
            echo $out
            return
        fi

    fi
    for node in ${CLUSTER} ; do
        out=$(timeout 1m $CDB2SQL_EXE ${LCLOPTIONS} --admin --tabs --host $node $LCLDBNM 'select 1' 2>&1)
        if [ "$out" != "1" ] ; then
            timeout 1m $CDB2SQL_EXE -v ${LCLOPTIONS} --admin --tabs --host $node $LCLDBNM 'select 1' &> ${TESTDIR}/logs/${LCLDBNM}.${node}.atfinish
            echo $out
            return
        fi
    done
}

verify_db_at_finish() {
    local LCLDBNM="$1"
    local LCLCONFIG="$2"
    local LCLOPTIONS="--cdb2cfg ${LCLCONFIG}"

    tables=$(timeout 1m $CDB2SQL_EXE ${LCLOPTIONS} --tabs $LCLDBNM default 'select * from comdb2_tables')
    for t in $tables ; do 
        timeout 3m $CDB2SQL_EXE ${LCLOPTIONS} --tabs $LCLDBNM default "exec procedure sys.cmd.verify('$t')" &> verify.out
        if ! grep "Verify succeeded." verify.out > /dev/null ; then
            echo "Table $t"
            return
        fi
    done
}


# start the testing: setup, runit, check cores, unsetup

call_setup

DATETIME=$(date +"%Y-%m-%d %H:%M:%S")
echo "!$TESTCASE: started running with timeout ${TEST_TIMEOUT} at $DATETIME"

timeout ${TEST_TIMEOUT} ./runit ${DBNAME} 2>&1  | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' &> ${TESTDIR}/logs/${DBNAME}.testcase

DATETIME=$(date +"%Y-%m-%d %H:%M:%S")
echo "!$TESTCASE: finished running with timeout ${TEST_TIMEOUT} at $DATETIME"

# get the return code from the first phase of the pipe
rc=${PIPESTATUS[0]}
sleep 1


cr=`find_cores ${DBNAME} $DBDIR`

if [[ -z "$cr" ]] && [[ -n "${SECONDARY_DBNAME}" ]] ; then
    cr=`find_cores ${SECONDARY_DBNAME} ${SECONDARY_DBDIR}`
fi

if [[ -n "$cr" ]] ; then
    CHECK_DB_AT_FINISH=0
elif [[ -z "${CHECK_DB_AT_FINISH}" ]] ; then
   if [[ "$COMDB2_UNITTEST" != 1 ]] ; then
       CHECK_DB_AT_FINISH=1
   else
       CHECK_DB_AT_FINISH=0
   fi
fi
    


if [ $CHECK_DB_AT_FINISH -eq 1 ] ; then
    dbdown=`check_db_at_finish ${DBNAME} $CDB2_CONFIG`

    if [[ -z "$dbdown" ]] && [[ -n "${SECONDARY_DBNAME}" ]]; then
        dbdown=`check_db_at_finish ${SECONDARY_DBNAME} $SECONDARY_CDB2_CONFIG`
    fi

    if [[ -z "$dbdown" ]] ; then
        verify_ret=`verify_db_at_finish ${DBNAME} $CDB2_CONFIG`
        if [[ -z "$verify_ret" ]] && [[ -n "${SECONDARY_DBNAME}" ]]; then
            verify_ret=`verify_db_at_finish ${SECONDARY_DBNAME} $SECONDARY_CDB2_CONFIG`
        fi
    fi
fi



if [[ -n "$cr" ]] ; then
    echo "!$TESTCASE: failed with core dumped ($cr)" | tee -a ${TEST_LOG}
elif [[ -n "$dbdown" ]] ; then
    echo "!$TESTCASE: db was unavailable at finish ($dbdown)" | tee -a ${TEST_LOG}
elif [[ $rc -eq 124 ]] ; then
    echo "!$TESTCASE: timeout (logs in ${TESTDIR}/logs/${DBNAME}.testcase)"
    echo "!$TESTCASE: timeout" >> ${TEST_LOG}
    successful=-1
elif [[ -n "$verify_ret" ]] ; then
    echo "!$TESTCASE: failed verify ($verify_ret)" | tee -a ${TEST_LOG}
elif [[ $rc -eq 0 ]] ; then
    echo "!$TESTCASE: success (logs in ${TESTDIR}/logs/${DBNAME}.testcase)"
    echo "!$TESTCASE: success" >> ${TEST_LOG}
    successful=1
else
    echo "!$TESTCASE: failed rc=$rc (logs in ${TESTDIR}/logs/${DBNAME}.testcase)"
    echo "!$TESTCASE: failed" >> ${TEST_LOG}
fi

trap - INT EXIT

call_unsetup

DATETIME=$(date +"%Y-%m-%d %H:%M:%S")
echo Done $TESTCASE with id $TESTID at $DATETIME >> ${TEST_LOG}
echo "Duration $SECONDS seconds" >> ${TESTDIR}/logs/${DBNAME}.testcase

exit $rc


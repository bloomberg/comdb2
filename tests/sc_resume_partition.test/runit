#!/usr/bin/env bash

set -ex
dbnm=$1
tier="local"
CDB2SQL_EXE="cdb2sql"
DBNAME=$dbnm

source ${TESTSROOTDIR}/tools/runit_common.sh
source ${TESTSROOTDIR}/tools/cluster_utils.sh
source util.sh

declare -r CRASH=1
declare -r DOWNGRADE=2

declare -r CREATE=10
declare -r ALTER=11

test_driver() {
	# Given
	(
		local -r num_shards=$1 num_records_per_shard=$2 resume_trigger=$3 op_for_creating_partition=$4

		local master
		master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm ${tier} 'SELECT host FROM comdb2_cluster WHERE is_master="Y"'`

		local -r tbl_name="t"
		setup_table ${tbl_name} ${num_shards} ${num_records_per_shard} ${op_for_creating_partition}

		trap "cdb2sql ${CDB2_OPTIONS} ${dbnm} ${tier} 'drop table ${tbl_name}'" EXIT

	#	cdb2sql $dbnm --host $master "EXEC PROCEDURE sys.cmd.send('convert_record_sleep 1')"

		# When
		COMDB2_CONFIG_MIN_RETRIES=0 \
		COMDB2_CONFIG_MAX_RETRIES=0 \
		cdb2sql ${CDB2_OPTIONS} ${dbnm} ${tier} "alter table ${tbl_name} partitioned by none" &
		local -r waitpid=$!

		sleep 5

		if (( resume_trigger == CRASH )); then
			restart_cluster ${master}
		elif (( resume_trigger == DOWNGRADE )); then
			downgrade ${master}
		else
			echo "FAIL: expected resume_trigger to be one of: KILL, DOWNGRADE"
			return 1
		fi

		# Then
		if wait ${waitpid};
		then
			echo "FAIL: Merge succeeded before master swing. Test is buggy."
			return 1
		fi

		wait_for_outstanding_scs &> /dev/null

		local timepart
		timepart=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} ${tier} "select * from comdb2_timepartitions where name='${tbl_name}'")
		if [[ -n ${timepart} ]];
		then
			echo "FAIL: Found time partition that should not exist"
			return 1
		fi

		local num_records
		num_records=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} ${tier} "select count(*) from ${tbl_name}")
		if (( num_records != num_shards*num_records_per_shard ));
		then
			echo "FAIL: Unexpected number of records after partition merge"
			return 1
		fi
	)
}

main() {
	local -r num_shards=5
	for num_records_per_shard in 1 10000;
	do
		for resume_trigger in ${CRASH} ${DOWNGRADE};
		do
			for op_for_creating_partition in ${CREATE} ${ALTER};
			do
				echo "------------------------"
				echo "Testing resume of a partitioned table triggered by a ${resume_trigger} "
				echo "Partitioned table was created using ${op_for_creating_partition} and contains ${num_records_per_shard} "
				echo "records in each of ${num_shards} shards"
				if test_driver ${num_shards} ${num_records_per_shard} ${resume_trigger} ${op_for_creating_partition}; then
					echo "Passed test --------------"
				else
					echo "Failed test --------------"
				fi
			done
		done
	done
}

main

#!/usr/bin/env bash

source ${TESTSROOTDIR}/tools/runit_common.sh
source ${TESTSROOTDIR}/tools/cluster_utils.sh

set -ex

[ -z "${CLUSTER}" ] && { echo "Test requires a cluster"; exit 0; }

dbnm=$1

restart_cluster() {
	set +e
	for node in ${CLUSTER} ; do
		kill_restart_node ${node} &
	done
	set -e

	sleep 2

	wait_for_cluster
}

test_alter_resume() {
	# Given
	local master
	master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'SELECT host FROM comdb2_cluster WHERE is_master="Y"'`

	cdb2sql $dbnm --host $master "EXEC PROCEDURE sys.cmd.send('convert_record_sleep 1')"
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "create table t(a int, b int)"
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "insert into t values(1, 1)"

	# When
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "alter table t drop column a" &
	local -r waitpid=$!
	sleep 1
	restart_cluster &> /dev/null

	# Then
	if wait ${waitpid};
	then
		echo "FAIL: Merge succeeded before cluster bounced. Test is buggy."
		return 1
	fi

	# Cleanup
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "drop table t"
}

test_partition_merge_resume() {
	# Given
	local -r num_shards=$1
	local starttime
	starttime=$(get_timestamp 120)
	local master
	master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'SELECT host FROM comdb2_cluster WHERE is_master="Y"'`

	cdb2sql $dbnm --host $master "EXEC PROCEDURE sys.cmd.send('convert_record_sleep 1')"
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "create table t(a int) partitioned by time period 'daily' retention ${num_shards} start '${starttime}'"

	for i in $(seq 0 1 $((num_shards-1)));
	do
		local shard
		shard=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} default "select shardname from comdb2_timepartshards limit 1 offset ${i}")
		cdb2sql ${CDB2_OPTIONS} ${dbnm} default "insert into '${shard}' values(1)"
	done

	# When
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "alter table t partitioned by none" &
	local -r waitpid=$!
	sleep 1

	local -r elapsed_time_before_restart=${SECONDS}
	restart_cluster &> /dev/null
	local -r elapsed_time_after_restart=${SECONDS}

	local -r expected_max_restart_duration=30
	local -r restart_duration=$((elapsed_time_after_restart - elapsed_time_before_restart))
	if (( restart_duration > expected_max_restart_duration ));
	then
		echo "FAIL: Restart took ${restart_duration} seconds. This is larger than expected upper bound ${expected_max_restart_duration}"
		return 1
	fi

	# Then
	if wait ${waitpid};
	then
		echo "FAIL: Merge succeeded before cluster bounced. Test is buggy."
		return 1
	fi

	local timepart
	timepart=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} default "select * from comdb2_timepartitions where name='t'")
	if [[ -n ${timepart} ]];
	then
		echo "FAIL: Found time partition that should not exist"
		return 1
	fi

	local num_records
	num_records=$(cdb2sql --tabs ${CDB2_OPTIONS} ${dbnm} default "select count(*) from t")
	if (( num_records != num_shards ));
	then
		echo "FAIL: Unexpected number of records after partition merge"
		return 1
	fi

	# Cleanup
	cdb2sql ${CDB2_OPTIONS} ${dbnm} default "drop table t"
}

main() {
	# test_alter_resume

	local num_shards=10 records_per_shard=1
	test_partition_merge_resume ${num_shards} ${records_per_shard}

	# Stress test
	num_shards=100 records_per_shard=100000
	# test_partition_merge_resume ${num_shards} ${records_per_shard}
}

main

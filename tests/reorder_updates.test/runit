#!/usr/bin/env bash
bash -n "$0" | exit 1

source ${TESTSROOTDIR}/tools/runit_common.sh

#set -e
set -x

if [[ "x${DEBUGGER}" == "xvalgrind" ]] ; then
    CDB2SQL_EXE="$DEBUGGER $CDB2SQL_EXE" 
fi

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


assert_vers()
{
    local loc_tbl=$1
    local target=$2
    local newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$loc_tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

populate_t2() {
    cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "DROP TABLE IF EXISTS t2" > t2.out
    cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "CREATE TABLE t2 {`cat t2.csc2`}" >> t2.out
    echo "begin" > t2.ins
    local j=0
    while [[ $j -lt 10 ]] ; do
        echo "insert into t2 values('1','${j}')" >> t2.ins
	let j=j+1
    done
    echo "commit" >> t2.ins
    cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default -f t2.ins >> t2.out 
    assertcnt t2 10
}

basic_updates() {
    populate_t2
    echo "begin" > t2.ins
    echo "update t2 set text1='2' where text1='1'" >> t2.ins
    echo "commit" >> t2.ins
    cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default -f t2.ins >> t2.out
    count=`cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t2 where text1='2'"` >> t2.out
    assertres $count 10
}


do_updates()
{
    updater=$1
    count=1000

    j=0
    updfl=update${updater}.out
    sqlfl=update${updater}.sql
    while [[ $j -le $count ]]; do 
        echo "begin" > $sqlfl
        i=0

        while [[ $i -lt $TRANSZ ]] ; do 
          echo "update t1 set b=b,c=c,d=d where a=$((RANDOM%NUM))"  >> $sqlfl
          if [ $? -ne 0 ]; then 
              exit 1
          fi
          let j=j+1
          let i=i+1
        done
        echo "commit" >> $sqlfl

        cdb2sql ${CDB2_OPTIONS} $dbnm default -f $sqlfl  &> $updfl
#if [ $? -ne 0 ]; then
#            failexit "failed to update"
#        fi
    done
    echo "done updater $updater"
}

NUM=10000
TRANSZ=20
UPDATERS=20

basic_updates
cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "INSERT INTO t1 (a,b,c,d) WITH i(x) AS ( VALUES(1) UNION ALL SELECT x+1 FROM i where x < $NUM) SELECT x,(random()+1)%100000,(random()+2)%100000,(random()+3)%100000 FROM i" > ins1.out

assertcnt t1 $NUM

cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('bdb verbdeadlock 1')"
i=0
while [[ $i -lt $UPDATERS ]] ; do 
    do_updates $i &
    let i=i+1
done

wait
assertcnt t1 $NUM

# get master node
master=`getmaster`

export LOGDIR=$TESTDIR/logs # from setup
if [[ -z "$CLUSTER" ]] ; then
    mlog=$LOGDIR/${DBNAME}.db
else
    mlog=$LOGDIR/${DBNAME}.${master}.db
fi

ddcount=`grep -c DEADLOCK $mlog`
rr=$(cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm --host ${master} "select value from comdb2_tunables where name='reorder_idx_writes'")

if [[ $DBNAME == *"noreordergenerated"* ]] ; then
    assertres $rr "OFF"
    if [[ $ddcount -lt 100 ]] ; then
        failexit 'no reorder expected to get more than 100 deadlocks for this test'
    fi
else
    assertres $rr "ON"
    if [[ $ddcount -gt 10 ]] ; then
        failexit 'reorder expected to get less than 10 deadlocks for this test'
    fi
fi


echo "Success"

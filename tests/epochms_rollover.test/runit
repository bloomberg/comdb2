#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function reset_epochms
{
    [[ $debug == "1" ]] && set -x
    typeset func="reset_epochms"
    for node in $CLUSTER; do
        $CDB2SQL_EXE ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('reset_time')" 
    done
}

function wait_for_coherent
{
    [[ $debug == "1" ]] && set -x
    typeset func="wait_for_coherent"
    typeset timeout=${1:-15}
    typeset cnt=0
    typeset incoherent=1
    while [[ "$cnt" -lt "$timeout" && "$incoherent" -ne 0 ]]; do
        incoherent=0
        for node in $CLUSTER; do
            $CDB2SQL_EXE -tabs -admin ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('stat')" | egrep "NOT COHERENT" >/dev/null 2>&1
            r=$?
            if [[ $r == 0 ]]; then
                echo "FOUND INCOHERENT NODE $node"
                export incoherent=1
            else
                echo "NODE $node IS COHERENT"
            fi
        done
        let cnt=cnt+1
        sleep 1
    done
    [[ "$incoherent" -gt "0" ]] && failexit "Replicants stayed incoherent"
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    typeset maxtime=600
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))

    write_prompt $func "Running $func"
    j=0

    while [[ $j -lt 10 ]]; do
        master=$(get_master)
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS --host $master $DBNAME "EXEC PROCEDURE sys.cmd.send('downgrade')"
        wait_for_coherent
        let j=j+1
    done

    reset_epochms
    sleep 80

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        master=$(get_master)
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS --host $master $DBNAME "EXEC PROCEDURE sys.cmd.send('downgrade')"
        wait_for_coherent
        sleep 80
        reset_epochms
    done

    # Different thread failed the test
    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait
}

[[ -z "$CLUSTER" ]] && failexit "This test requires a cluster"

rm $stopfile
run_test
wait
echo "Success"

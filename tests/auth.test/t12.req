# Change to OP user
set user 'user1'
set password 'password1'

# Create a no-OP user
put password 'lua' for 'lua'

create procedure myavg version 'authtest' {
local agg = nil
local function step(a)
	if agg == nil then
		agg = {}
		agg.as = a
		agg.n = 1
	else
		agg.as = agg.as + a
		agg.n = agg.n + 1
	end
end

local function final()
	return agg.as / agg.n	
end
}$$

create procedure json_extract version 'authtest' {
local function json_extract(json, field)
	local tbl = db:json_to_table(json)
	return tbl[field]
end
}$$

# LUA FUNCTION TEST
set user 'lua'
set password 'lua'
select "no-OP creates lua functions"
create lua aggregate function myavg
create lua scalar function json_extract

set user 'user1'
set password 'password1'
select "OP creates lua functions"
create lua aggregate function myavg
create lua scalar function json_extract

set user 'lua'
set password 'lua'
select "no-OP drops lua functions & procedures"
drop lua aggregate function myavg
drop lua scalar function json_extract
drop procedure myavg 'authtest'
drop procedure json_extract 'authtest'

set user 'user1'
set password 'password1'
select "OP drops lua functions & procedures"
drop lua aggregate function myavg
drop lua scalar function json_extract
drop procedure myavg 'authtest'
drop procedure json_extract 'authtest'

# LUA TRIGGER & CONSUMER TEST
create table foraudit {
schema
{
	int i
}
}$$
create table audit {
schema
{
	int iold null=yes
	int inew null=yes
	cstring type[4]
	cstring added_by[10]
}
}$$
create procedure audit version 'authtest' {
local function main(event)
	local audit = db:table("audit")	
	local tp = event.type
	local inew, iold
	if tp == 'add' then
		inew = event.new.i
	elseif tp == 'del' then
		iold = event.old.i
	end
	return audit:insert({added_by='trigger',iold=iold,inew=inew,type=tp})
end
}$$
create procedure cons version 'authtest' {
local function main(consume_first)
	local consumer = db:consumer()
	local audit = db:table("audit")
	while true do
		local event = consumer:get()
		local tp = event.type
		local inew, iold
		if tp == 'add' then
			inew = event.new.i
		elseif tp == 'del' then
			iold = event.old.i
		end

		db:begin()
		if consume_first then
			consumer:consume()
			audit:insert({added_by='consumer',type=tp, inew=inew, iold=iold})
		else
			audit:insert({added_by='consumer',type=tp, inew=inew, iold=iold})
			consumer:consume()
		end
		db:commit()
	end
end
}$$

set user 'lua'
set password 'lua'
select "no-OP creates triggers and consumers"
create lua trigger audit on (table foraudit for insert and update and delete)
create lua consumer cons on (table foraudit for insert and update and delete)

set user 'user1'
set password 'password1'
select "OP creates triggers and consumers"
create lua trigger audit on (table foraudit for insert and update and delete)
create lua consumer cons on (table foraudit for insert and update and delete)

set user 'lua'
set password 'lua'
select "no-OP creates triggers and consumers"
drop lua trigger audit
drop lua consumer cons

set user 'user1'
set password 'password1'
select "OP creates triggers and consumers"
drop lua trigger audit
drop lua consumer cons
drop procedure audit 'authtest'
drop procedure cons 'authtest'

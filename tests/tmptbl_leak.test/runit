#!/usr/bin/env bash
bash -n "$0" | exit 1

dbnm=$1

check_output()
{
  testcase_output=$(cat q_$1.out)
  expected_output=$(cat output.expect)
  testcase_output_alt=$(cat output.expect.alt)
  testcase_output_alt2=$(cat output.expect.alt2)

  if [[ "$testcase_output" != "$expected_output" && "$testcase_output" != "$testcase_output_alt" && "$testcase_output" != "$testcase_output_alt2" ]]; then
    echo "SELECT output mismatch at index $1"
    echo "Failed."
    diff q_$1.out output.expect
    diff q_$1.out output.expect.alt
    diff q_$1.out output.expect.alt2
    exit 1
  fi
}

echo dropping test tables
cdb2sql -s ${CDB2_OPTIONS} $dbnm default "DROP TABLE t1" &> /dev/null
cdb2sql -s ${CDB2_OPTIONS} $dbnm default "DROP TABLE t2" &> /dev/null

echo adding test tables
cdb2sql -s ${CDB2_OPTIONS} $dbnm default "CREATE TABLE t1(x INT, y TEXT)" > /dev/null
cdb2sql -s ${CDB2_OPTIONS} $dbnm default "CREATE TABLE t2(x INT, y TEXT)" > /dev/null

echo inserting test data
cdb2sql -s ${CDB2_OPTIONS} $dbnm default "INSERT INTO t1(x,y) VALUES (1, 'one')" > /dev/null
cdb2sql -s ${CDB2_OPTIONS} $dbnm default "INSERT INTO t1(x,y) VALUES (2, 'two')" > /dev/null
cdb2sql -s ${CDB2_OPTIONS} $dbnm default "INSERT INTO t2(x,y) VALUES (3, 'three')" > /dev/null
cdb2sql -s ${CDB2_OPTIONS} $dbnm default "INSERT INTO t2(x,y) VALUES (4, 'four')" > /dev/null

N=200
echo running $N SELECTs asynchronously...
for i in `seq 1 $N` ; do
  cdb2sql -s ${CDB2_OPTIONS} $dbnm default "SELECT t1.x, t1.y FROM t1 UNION SELECT t2.x, t2.y FROM t2 LEFT OUTER JOIN t1 t1a ON t2.x = t1a.x ORDER BY t1.x, t1.y" &> q_${i}.out &
done

wait

echo running $N SELECTVs asynchronously...
for i in `seq 1 $N` ; do
  cdb2sql -s ${CDB2_OPTIONS} $dbnm default "SELECTV t1.x, t1.y FROM t1 UNION SELECTV t2.x, t2.y FROM t2 LEFT OUTER JOIN t1 t1a ON t2.x = t1a.x ORDER BY t1.x, t1.y" &> q_${i}_v.out &
done

wait

for i in `seq 1 $N` ; do
  check_output ${i}
done

for i in `seq 1 $N` ; do
  check_output ${i}_v
done

echo running $N INSERTs asynchronously...
for i in `seq 1 $N` ; do
  cdb2sql -s ${CDB2_OPTIONS} $dbnm default "INSERT INTO t1 (x, y) VALUES(${i},'some text #' || CAST(${i} AS TEXT))" &
done

wait

echo running $N UPDATEs asynchronously...
for i in `seq 1 $N` ; do
  cdb2sql -s ${CDB2_OPTIONS} $dbnm default "UPDATE t1 SET y = 'other text #' || CAST(${i} AS TEXT) WHERE x = ${i} AND x > 4" &
done

wait

echo running $N DELETEs asynchronously...
for i in `seq 1 $N` ; do
  cdb2sql -s ${CDB2_OPTIONS} $dbnm default "DELETE FROM t1 WHERE x = ${i} AND x > 4" &
done

wait

# give the database time to exit background threads that may be using temp tables...
sleep 60

# cdb2sql -s ${CDB2_OPTIONS} $dbnm default "SELECT x, y FROM t1 ORDER BY x" &> t1_final.out

for node in ${CLUSTER} ; do
  cdb2sql -s ${CDB2_OPTIONS} --host $node $dbnm default "EXEC PROCEDURE sys.cmd.send('temptable_clear')" &> temptable0_${node}.out
  cdb2sql -s ${CDB2_OPTIONS} --host $node $dbnm default "EXEC PROCEDURE sys.cmd.send('temptable_counts')" &> temptable1_${node}.out
  cdb2sql -s ${CDB2_OPTIONS} --host $node $dbnm default "EXEC PROCEDURE sys.cmd.send('bdb temptable')" &> temptable2_${node}.out

  tempdata1=$(cat temptable1_${node}.out)
  regex1="Overall temptable count is ([0-9]+), SQL temptable count is ([0-9]+)"

  if [[ $tempdata1 =~ $regex1 ]]; then
    num1="${BASH_REMATCH[1]}"

    if [[ -n $num1 ]]; then
      num2="${BASH_REMATCH[2]}"

      if [[ -n $num2 ]]; then
        if [[ $num1 -ne 0 ]]; then
          echo "overall temptable count is not zero"
          echo "Failed."
          exit 1
        fi
        if [[ $num2 -ne 0 ]]; then
          echo "SQL temptable count is not zero"
          echo "Failed."
          exit 1
        fi
      else
        echo "missing SQL temptable count"
        echo "Failed."
        exit 1
      fi
    else
      echo "missing overall temptable count"
      echo "Failed."
      exit 1
    fi
  fi

  tempdata2=$(cat temptable2_${node}.out)
  regex2="Temptable pool not enabled"
  regex3="# returns            : ([0-9]+)"
  regex4="# borrows            : ([0-9]+)"

  if [[ $tempdata2 =~ $regex2 ]]; then
    echo "temptable pool is disabled, check skipped"
  else
    if [[ $tempdata2 =~ $regex3 ]]; then
      num1="${BASH_REMATCH[1]}"

      if [[ -n $num1 ]]; then
        if [[ $tempdata2 =~ $regex4 ]]; then
          num2="${BASH_REMATCH[1]}"

          if [[ -n $num2 ]]; then
            if [[ $num1 -ne $num2 ]]; then
              echo "temptable pool return count $num1 does not match temptable pool borrow count $num2"
              echo "Failed."
              exit 1
            fi
          else
            echo "missing temptable pool borrow count"
            echo "Failed."
            exit 1
          fi
        fi
      else
        echo "missing temptable pool return count"
        echo "Failed."
        exit 1
      fi
    fi
  fi
done

echo "Passed."

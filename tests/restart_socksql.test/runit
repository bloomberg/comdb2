#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


failexit()
{
    echo "Failed $1"
    exit -1
}

assertcnt ()
{
    local target=$1
    local cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}

assert_vers()
{
    local loc_tbl=$1
    local target=$2
    local newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$loc_tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

do_verify()
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}

assertres ()
{
    if [ $# != 2 ] ; then 
        failexit "res is $res, target is $target, one or more is blank"
    fi
    res=$1
    target=$2
    if [ "$res" != "$target" ] ; then
        failexit "res is $res but should be $target"
    fi
}


cdb2sql ${CDB2_OPTIONS} $dbnm default "@send debg 10000"
cdb2sql ${CDB2_OPTIONS} $dbnm default "@send ndebg 10000"

cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t2 (i int primary key)"

max=10000
strt=1
end=0
delta=10
while [ $end -lt $max ] ; do
    let end=strt+$delta-1
    cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t2 select * from generate_series($strt,$end)" > ins.out
    rc=$?
    if [ $rc -ne 0 ] ; then
        failexit "Failure from insert "
    fi
    echo "(rows inserted=$delta)" > ins.exp
    if ! diff ins.out ins.exp ; then
        failexit "Error with the insert"
    fi
    let strt=$end+1

    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t2"`
    assertres $res $end
done


strt=1
end=0
delta=10
while [ $end -lt $max ] ; do
    let end=strt+$delta-1
    cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t2 where i >=$strt and i<= $end" > sel.out

    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t2 where i >=$strt and i<= $end"`
    assertres $res $delta

    cdb2sql ${CDB2_OPTIONS} $dbnm default "update t2 set i=i-1 where i >=$strt and i<= $end" > upd.out
    rc=$?
    if [ $rc -ne 0 ] ; then
        failexit "Failure from update "
    fi
    echo "(rows updated=$delta)" > upd.exp
    if ! diff upd.out upd.exp ; then
        failexit "Error with the insert"
    fi
    let strt=$end+1
done




echo "Success"

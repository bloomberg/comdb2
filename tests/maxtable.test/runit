#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/cluster_utils.sh

[[ $debug == "1" ]] && set -x

function write_prompt
{
    typeset func=$1
    echo "[$func] $2"
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    typeset f=$1
    write_prompt $func "$f failed: $2"
    touch ${DBNAME}.failexit # runtestcase script looks for this file
    exit -1
}

function max_table
{
    max_table=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select value from comdb2_limits where name='max_tables'" 2>&1)
    cnt=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select count(*) from comdb2_tables" 2>&1)
    target=$(( max_table - cnt ))
    for ((i=0;i<$target;++i)); do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t$i(a int)" >/dev/null
        [[ $? != 0 ]] && failexit "failed to create table t$i"
        echo "Created table t$i"
    done
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table betterfail(a int)" >/dev/null
    [[ $? == 0 ]] && failexit "should have failed to create table"
}

function rebuild
{
    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select count(*) from comdb2_tables where tablename like 't%'" 2>&1)
    # Keeping at quarter maximum for now 
    max_table=$(( x / 4 ))

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "rebuild t0"
    [[ $? != 0 ]] && failexit "failed to rebuild table"

    fl=rebuild.txn
    echo "begin" > $fl
    for ((i=0;i<$max_table;++i)); do
        echo "rebuild t$i" >> $fl 
    done
    echo "commit" >> $fl
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - < $fl
    [[ $? != 0 ]] && failexit "failed to alter tables"
}

function max_queue
{
    max_queue=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select value from comdb2_limits where name='max_queues'" 2>&1)

    for ((i=0;i<$max_queue;++i)); do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create procedure c$i version 'c$i' {}"
        [[ $? != 0 ]] && failexit "failed to create procedure"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create lua consumer c$i on (table t0 for insert)" >/dev/null
        [[ $? != 0 ]] && failexit "failed to create consumer"
    done

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create procedure betterfail version 'betterfail' {}"
    [[ $? != 0 ]] && failexit "failed to create procedure"

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create lua consumer betterfail on (table t0 for insert)" >/dev/null
    [[ $? == 0 ]] && failexit "should have failed to create consumer"
}

function max_view
{
    max_views=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select value from comdb2_limits where name='max_views'" 2>&1)

    for ((i=0;i<$max_views;++i)); do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create view v$i as select * from t0" >/dev/null
        [[ $? != 0 ]] && failexit "failed to create view"
    done

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create view failme as select * from t0" >/dev/null
    [[ $? == 0 ]] && failexit "should have failed to create view"
}

function run_tests
{
    max_table
    rebuild
    max_queue
    rebuild
    max_view
    rebuild
    return 0
}

run_tests

#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/runit_common.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt
export mod=5000

function create_tables
{
    [[ $debug == "1" ]] && set -x
    typeset func="create_tables"
    write_prompt $func "Running $func"

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists t1(a int unique)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists t2(a int unique)"
    #$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 add constraint 't1fk' foreign key (a) references t2(a) on update cascade on delete cascade"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 add constraint 't2fk' foreign key (a) references t1(a) on update cascade on delete cascade"
}

function insert_loop
{
    [[ $debug == "1" ]] && set -x
    while [[ ! -f $stopfile ]]; do
        r=$(( RANDOM % mod ))
        echo "begin
insert into t1(a) values($r) on conflict do nothing
insert into t2(a) values($r) on conflict do nothing
commit" | $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - >/dev/null 2>&1
    done
}

function delete_loop
{
    [[ $debug == "1" ]] && set -x
    while [[ ! -f $stopfile ]]; do
        r=$(( RANDOM % mod ))
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "delete from t2 where a=$r" >/dev/null 2>&1
        r=$(( RANDOM % mod ))
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "delete from t1 where a=$r" >/dev/null 2>&1
    done
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    typeset maxtime=100
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))

    write_prompt $func "Running $func"
    create_tables

    rm $stopfile >/dev/null 2>&1

    j=0
    while [[ $j -lt 10 ]]; do
        insert_loop &
        delete_loop &
        let j=j+1
    done

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        t1count=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select count(*) from t1")
        t2count=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select count(*) from t2")
        echo "t1 has $t1count records, t2 has $t2count records"
        sleep 1
    done

    # Different thread failed the test
    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait

    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.verify('t1')")
    if [[ "$x" != *"Verify succeeded"* ]] ; then
        echo "$x"
        failexit "Failed verify on t1"
    fi

    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.verify('t2')")
    if [[ "$x" != *"Verify succeeded"* ]] ; then
        echo "$x"
        failexit "Failed verify on t2"
    fi
}

run_test
wait
echo "Success"

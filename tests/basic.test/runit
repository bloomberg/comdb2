#!/usr/bin/env bash
bash -n "$0" | exit 1

set -e
set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

if [[ "x${DEBUGGER}" == "xvalgrind" ]] ; then
    CDB2SQL_EXE="$DEBUGGER $CDB2SQL_EXE" 
fi

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    failexit "need a DB name"
fi

# Number of insert_records function calls
nins=0


if [[ $DBNAME == *"snapshotgenerated"* ]] ; then
    lvl=$(cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select value from comdb2_tunables where name='sql_tranlevel_default'")
    if [ "$lvl" != "SNAPSHOT ISOLATION" ] ; then
       failexit "DB is not running in snapshot isolation mode"
    fi
    $CDB2SQL_EXE ${CDB2_OPTIONS} $DBNAME default "@send get_newsi_status" 
fi

assert_vers()
{
    local loc_tbl=$1
    local target=$2
    local newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$loc_tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

insert_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'aabbccddeeffaabb$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))' ,'mycstring$j' ,'mypstring$j' ,x'$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))00000000$j , $((1-2*(j%2)))000000000000000$j )"  &>> $insfl
        if [ $? -ne 0 ]; then 
            failexit "failure inserting record $j rc = $?"
        fi
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
    done
    echo "done inserting round $nout"
}

update_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    updfl=update${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $updfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set alltypes_short=alltypes_short+1, alltypes_int=alltypes_int+1,alltypes_u_int=alltypes_u_int+1,alltypes_longlong=alltypes_longlong+1,alltypes_float=alltypes_float=1,alltypes_double=alltypes_double+1,alltypes_decimal32=alltypes_decimal32+1,alltypes_decimal64=alltypes_decimal64+1,alltypes_decimal128=alltypes_decimal128+1 where alltypes_u_short=$j"  &>> $updfl
        if [ $? -ne 0 ]; then 
            failexit "failure updating record $j rc = $?"
        fi
        let j=j+1
    done
    echo "done updating round $nout"
}

delete_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    delfl=delete${nout}.out
    echo "Deleting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $delfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t1 where alltypes_u_short=$j"  &>> $delfl
        if [ $? -ne 0 ]; then 
            failexit "failure deleting record $j rc = $?"
        fi
        let j=j+1
    done
    echo "done updating round $nout"
}



echo "Basic tests"

res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select 1"`
assertres $res 1

res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select comdb2_dbname()"`
assertres $res $dbnm
cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `

# this tests connecting to 'local'
for node in $cluster; do
    if [ "$node" = "$HOSTNAME" ]; then
        # if localhost is part of cluster, try local as cluster parameter
        res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm local "select comdb2_host()"`
        assertres $res $HOSTNAME
        res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm @localhost "select comdb2_host()"`
        assertres $res $HOSTNAME
        break
    fi
done

for node in $cluster ; do
    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $node "select comdb2_host()"`
    assertres $res $node


    port=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $node "select comdb2_port()"`
    echo "connect to db with direct port info"
    res=`cdb2sql --tabs $dbnm @$node:port=$port "select comdb2_dbname()"`
    assertres $res $dbnm

    if [ ! -n $PMUXPORT ] ; then
        # this should also work, if pmux is in standard port
        res=`cdb2sql -v --tabs $dbnm @$node "select comdb2_dbname()"`
        assertres $res $dbnm
    fi

    # as should this
    res=`cdb2sql --tabs $dbnm --host $node:$port "select comdb2_dbname()"`
    assertres $res $dbnm

    #check for empty sql stmt
    echo -e "newsql\n\x0\x0\x0\x1\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\x0\n\x0\x0\x0\x1\x0\x0\x0\x0\x0" | nc -w 1 $node $port

    echo "connect with wrong db name"
    set +e
    cdb2sql --tabs badname @$node:port=$port "select comdb2_dbname()" &> out.txt
    echo "[select comdb2_dbname()] failed with rc -1 DB name mismatch query:badname actual:$dbnm" > out.exp
    rc=$?
    set -e
#    TODO: this returns rc=0 even though error and can't run query!!
#    if [ $rc -eq 0 ]; then
#        failexit "Expected bad rc when connecting with the wrong db name"
#    fi
    if ! diff out.txt out.exp ; then
        failexit "Expected failure when connecting with the wrong db name"
    fi
done

echo "core location:" 
cat  /proc/sys/kernel/core_pattern

cdb2sql ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("debg 100")'
cdb2sql ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("ndebg 100")'

echo "create, alter, drop table t2"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t2  { `cat alltypes.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t2  { `cat alltypes.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t2 "

set +e
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t2 " &> baddrop.out
echo "[drop table t2] failed with rc -3 no such table: t2" > baddrop.exp
if ! diff baddrop.out baddrop.exp ; then
    failexit "unexpected $nosuchtbl"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t2 " &> badsel.out
echo "[select * from t2] failed with rc -3 no such table: t2" > badsel.exp
if ! diff badsel.out badsel.exp ; then
    failexit "Expected failure when selecting nonexistent table"
fi

$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "create table t2 (i int primary key)"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "insert into t2 values(1)"
do_verify t2

echo insert 1 will fail because dup
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t2 values(1)" &> dupins1.out
echo "[insert into t2 values(1)] failed with rc 299 add key constraint duplicate key 'COMDB2_PK' on table 't2' index 0" > dupins1.exp
if ! diff  dupins1.out dupins1.exp; then
    failexit "Expected failure when inserting duplicate record"

fi
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t2 values(2)" &> dupins2.out

echo update 2 to 1 will fail
cdb2sql ${CDB2_OPTIONS} $dbnm default "update t2 set i=1 where i=2" &> dupupd2.out
echo "[update t2 set i=1 where i=2] failed with rc 299 add key constraint duplicate key 'COMDB2_PK' on table 't2' index 0" > dupupd2.exp
if ! diff  dupupd2.out dupupd2.exp; then
    failexit "Expected failure when updating with duplicate record"
fi
do_verify t2


echo this one will be an empty transaction -- no ins/del ops are sent to master
echo "
set transaction read committed
begin
insert into t2 values(100)
delete from t2 where i = 100
insert into t2 values(100)
delete from t2 where i = 100
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> dupins3.out
echo "[set transaction read committed] rc 0
[begin] rc 0
[insert into t2 values(100)] rc 0
[delete from t2 where i = 100] rc 0
[insert into t2 values(100)] rc 0
[delete from t2 where i = 100] rc 0
[commit] rc 0" > dupins3.exp
if ! diff  dupins3.out dupins3.exp; then
    failexit "Expected no failure when inserting duplicate record"
fi
do_verify t2


echo 'value 1 is already in, but the insert happens defered, the delete happens inline, so no dup'
echo "begin
insert into t2 values(1)
delete from t2 where i = 1
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> dupins4.out
echo "[begin] rc 0
[insert into t2 values(1)] rc 0
[delete from t2 where i = 1] rc 0
[commit] rc 0" > dupins4.exp
if ! diff  dupins4.out dupins4.exp; then
    failexit "Expected no failure when inserting duplicate record"
fi


if echo $DBNAME | grep 'snapshot\|rowlocks' ; then
  cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t2 values(1)"
fi

assertcnt t2 2
do_verify t2

echo "begin
select count(*) from t1
select count(*) from t2
select count(*) from t2 where i = 1
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> trans1.txt
echo "[begin] rc 0
(count(*)=0)
[select count(*) from t1] rc 0
(count(*)=2)
[select count(*) from t2] rc 0
(count(*)=1)
[select count(*) from t2 where i = 1] rc 0
[commit] rc 0" > trans1.exp 
if ! diff trans1.txt trans1.exp ; then
    failexit "trans1.txt does not match expected"
fi

# test transaction of diff sizes
echo "begin
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> trans0.txt
echo "[begin] rc 0
[commit] rc 0" > trans0.exp
if ! diff trans0.txt trans0.exp ; then
    failexit "trans0.txt does not match expected"
fi


echo "begin
insert into t2 values(3)
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> trans2.txt
echo "[begin] rc 0
[insert into t2 values(3)] rc 0
[commit] rc 0" > trans2.exp
if ! diff trans2.txt trans2.exp ; then
    failexit "trans2 does not match expected"
fi

assertcnt t2 3

echo "begin
insert into t2 values(4)
insert into t2 values(5)
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> trans3.txt
echo "[begin] rc 0
[insert into t2 values(4)] rc 0
[insert into t2 values(5)] rc 0
[commit] rc 0" > trans3.exp
if ! diff trans3.txt trans3.exp ; then
    failexit "trans3 does not match expected"
fi

assertcnt t2 5

echo "begin
insert into t2 values(6)
insert into t2 values(7)
insert into t2 values(8)
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> trans4.txt
echo "[begin] rc 0
[insert into t2 values(6)] rc 0
[insert into t2 values(7)] rc 0
[insert into t2 values(8)] rc 0
[commit] rc 0" > trans4.exp
if ! diff trans4.txt trans4.exp ; then
    failexit "trans4 does not match expected"
fi

assertcnt t2 8

# test rollback
echo "begin
insert into t2 values(9)
rollback" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> trans5.txt
echo "[begin] rc 0
[insert into t2 values(9)] rc 0
[rollback] rc 0" > trans5.exp
if ! diff trans5.txt trans5.exp ; then
    failexit "trans5 does not match expected"
fi

assertcnt t2 8

echo "begin
insert into t2 values(9)
insert into t2 values(10)
rollback" | cdb2sql ${CDB2_OPTIONS} $dbnm default &> trans6.txt
echo "[begin] rc 0
[insert into t2 values(9)] rc 0
[insert into t2 values(10)] rc 0
[rollback] rc 0" > trans6.exp
if ! diff trans6.txt trans6.exp ; then
    failexit "trans6 does not match expected"
fi

assertcnt t2 8

echo update 2 to 1 will fail
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t2 values(11)" &> ins3.out
assertcnt t2 9
do_verify t2

cdb2sql ${CDB2_OPTIONS} $dbnm default "update t2 set i=12 where i=11" &> upd3.out
if [ "`cat upd3.out`" != "(rows updated=1)" ] ; then
    failexit "upd3 does not match"
fi
do_verify t2

cdb2sql ${CDB2_OPTIONS} $dbnm default "select i from t2 where i=12" &> sel3.out 
if [ "`cat sel3.out`" != "(i=12)" ] ; then
    failexit "sel3 does not match"
fi

do_verify t2
cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t2 where i=12" &> del3.out
if [ "`cat del3.out`" != "(rows deleted=1)" ] ; then
    failexit "del3 does not match"
fi
assertcnt t2 8
do_verify t2



#insert in a transaction into two tables
j=1
echo "begin
insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'aabbccddeeffaabb$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))' ,'mycstring$j' ,'mypstring$j' ,x'$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))00000000$j , $((1-2*(j%2)))000000000000000$j )
insert into t2 values (9)
" > trans.in
j=$((j+1))
echo "
insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'aabbccddeeffaabb$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))' ,'mycstring$j' ,'mypstring$j' ,x'$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))00000000$j , $((1-2*(j%2)))000000000000000$j )
insert into t2 values (10)
commit" >> trans.in

cdb2sql ${CDB2_OPTIONS} $dbnm default -f trans.in &> trans.out

assertcnt t1 2
assertcnt t2 10
cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t1 where 1"

cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure nonexistent(4)" &> badproc.txt
echo "[exec procedure nonexistent(4)] failed with rc -3 no such procedure: nonexistent ver:0" > badproc.exp
if ! diff badproc.txt badproc.exp ; then
    failexit "Expected failure when executing bad procedure"
fi
set -e


# https://github.com/bloomberg/comdb2/issues/1080
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "drop table if exists t3"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "create table t3 (i int unique, j int)"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "insert into t3 values(1, 1)"
assertres "`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from t3 order by i'`" "1	1"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "update t3 set j = j+1 where i = 1"
assertres "`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from t3 order by i'`" "1	2"
echo "begin 
insert into t3 values(2, 1)
insert into t3 values(3, 1)
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default -
assertres "`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from t3 order by i' | xargs echo `" "1 2 2 1 3 1"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "drop table t3"


#make sure insert with blob works
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "drop table if exists t4"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "create table t4 (i int unique, j blob(2))"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "insert into t4 values(1, x'aabbccdd')"
assertres "`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from t4 order by i'`" "1	x'aabbccdd'"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "update t4 set j = x'aabbccee' where i = 1"
assertres "`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from t4 order by i'`" "1	x'aabbccee'"
echo "begin
insert into t4 values(2, x'aaaaaaaa')
insert into t4 values(3, x'bbbbbbbb')
commit" | cdb2sql ${CDB2_OPTIONS} $dbnm default -
assertres "`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from t4 order by i' | xargs echo `" "1 xaabbccee 2 xaaaaaaaa 3 xbbbbbbbb"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "drop table t4"


# make sure inplace update works
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "drop table if exists t5"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "create table t5 (i int unique)"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "insert into t5 values(1)"
out=$(cdb2sql ${CDB2_OPTIONS} --tabs $dbnm default "select cast(rowid / 4294967296 as int) & 4043243520 from t5")
if [[ "$out" != "0" ]]; then
    failexit "Insert should have update id 0"
fi
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "update t5 set i = 1"
out=$(cdb2sql ${CDB2_OPTIONS} --tabs $dbnm default "select cast(rowid / 4294967296 as int) & 4043243520 from t5")
if [[ "$out" == "0" ]]; then
    failexit "Inplace update should update updateid to nonzero"
fi


test_t1() {
	INITNUMREC=100

#table t1 was added upon init of the DB from lrl.options
	assert_vers t1 0
	assert_schema t1 alltypes.csc2

	let NEWNUMREC=$((2*INITNUMREC))
	insert_records 1 $NEWNUMREC
	assertcnt t1 $NEWNUMREC
    do_verify t1

	update_records 1 $NEWNUMREC
	assertcnt t1 $NEWNUMREC
    do_verify t1

	delete_records $((INITNUMREC+1)) $NEWNUMREC
	assertcnt t1 $INITNUMREC
    do_verify t1


	echo "Now call task that uses cdb2api to ins/upd/del"
	CDB2API_CALLER=${TESTSBUILDDIR}/cdb2api_caller 
    if [[ "x${DEBUGGER}" == "xvalgrind" ]] ; then
        CDB2API_CALLER="${DEBUGGER} ${CDB2API_CALLER}"
    fi
    $CDB2API_CALLER $dbnm > cdb2api_caller.out
    do_verify t1

	$CDB2SQL_EXE --tabs ${CDB2_OPTIONS} $dbnm default "select * from t1" &> select_all.out
}


test_bulk() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default "create table mytable6 (i int unique, j int, k int)"
    CNT=5000
    echo -n "insert into mytable6 values(1,1,1)" > gg.in
    for i in `seq 2 $CNT` ; do echo -n ",($i, $i, $i)" ; done >> gg.in

    for j in `seq 1 2` ; do
        cdb2sql -s ${CDB2_OPTIONS} $dbnm default -f gg.in
        assertcnt mytable6 $CNT
        cdb2sql -s ${CDB2_OPTIONS} $dbnm default "delete from mytable6 where 1"
    done
}
test_generate_series() {
    CNT=5000
    for j in `seq 1 2` ; do
        cdb2sql -s ${CDB2_OPTIONS} $dbnm default "insert into mytable6 select value, value, value from generate_series limit $CNT"
        assertcnt mytable6 $CNT
        cdb2sql -s ${CDB2_OPTIONS} $dbnm default "delete from mytable6 where 1"
    done
}


test_t1
test_bulk
test_generate_series

$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("sql hist")'


res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select 1"`
assertres $res 1

$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "create table trowid(i int)"
$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "insert into trowid values(12345)"
myrowid=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select comdb2_rowid from trowid"`
res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select i from trowid where comdb2_rowid='${myrowid}'"`
assertres $res 12345

echo "Success"


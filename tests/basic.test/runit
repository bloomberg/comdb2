#!/bin/bash
bash -n "$0" | exit 1

set -e
set -x

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


failexit()
{
    echo "Failed $1"
    exit -1
}

assertcnt ()
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}

assert_vers()
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
    tblver=$newver
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

do_verify()
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}

# Do schema changes
do_schema_changes()
{
    typeset max=$1
    typeset iter=0
    typeset scnt=0

    schema=t2.csc2

    while [[ $scnt -lt $max ]]; do 

        echo "$dbnm alter t1 $schema"
        cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1 { `cat $schema ` }"
        if [[ $? != 0 ]]; then

            echo "Error schema-changing on iteration $scnt"
            return 1

        fi

        let scnt=scnt+1

    done

    return 0
}

# Update all records in the table
update_all_records()
{
    typeset prmsg=$1
    typeset iter=0

    [[ "$debug" == 1 ]] && set -x

    while :; do 

        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=x'1234' where b='test1'" >/dev/null 2>&1
        let iter=iter+1

        if [[ -n "$prmsg" && $(( iter % prmsg )) == 0 ]]; then

            echo "Updated all of table t1 $iter times."

        fi

    done
}

update_records()
{
    j=0
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set d=d+1 where a = $j" >> update.out 
        let j=j+1
    done
}


insert_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))0000000000000000' ,'mycstring$j' ,'mypstring$j' ,x'$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j ,$((1-2*(j%2)))0000$j ,$((1-2*(j%2)))00000000$j ,$((1-2*(j%2)))000000000000000$j )"  &>> $insfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
    done
    echo "done inserting round $nout"
}

update_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    updfl=update${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $updfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set alltypes_short=alltypes_short+1, alltypes_int=alltypes_int+1,alltypes_u_int=alltypes_u_int+1,alltypes_longlong=alltypes_longlong+1,alltypes_float=alltypes_float=1,alltypes_double=alltypes_double+1,alltypes_decimal32=alltypes_decimal32+1,alltypes_decimal64=alltypes_decimal64+1,alltypes_decimal128=alltypes_decimal128+1 where alltypes_u_short=$j"  &>> $updfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
    done
    echo "done updating round $nout"
}

delete_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    delfl=delete${nout}.out
    echo "Deleting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $delfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t1 where alltypes_u_short=$j"  &>> $delfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
    done
    echo "done updating round $nout"
}

assertres ()
{
    if [ $# != 2 ] ; then 
        failexit "res is $res, target is $target, one or more is blank"
    fi
    res=$1
    target=$2
    if [ "$res" != "$target" ] ; then
        failexit "res is $res but should be $target"
    fi
}




echo "Basic tests"

res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select 1"`
assertres $res 1

res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select comdb2_dbname()"`
assertres $res $dbnm
cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `

for node in $cluster ; do
    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $node "select comdb2_host()"`
    assertres $res $node


    port=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $node "select comdb2_port()"`
    echo "connect to db with direct port info"
    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm @$node:port=$port "select comdb2_dbname()"`
    assertres $res $dbnm

    echo "connect with wrong db name"
    set +e
    cdb2sql --tabs ${CDB2_OPTIONS} badname @$node:port=$port "select comdb2_dbname()" &> out.txt
    echo "[select comdb2_dbname()] failed with rc -1 DB name mismatch" > out.exp
    rc=$?
    set -e
#    TODO: this returns rc=0 even though error and can't run query!!
#    if [ $rc -eq 0 ]; then
#        failexit "Expected bad rc when connecting with the wrong db name"
#    fi
    egrep "DB name mismatch" out.txt
    if [ $? -ne 0 ]; then
        failexit "Expected failure when connecting with the wrong db name"
    fi
done



echo "create, alter, drop table t2"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t2  { `cat alltypes.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t2  { `cat alltypes.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t2 "

INITNUMREC=100

assert_vers t1 0
assert_schema t1 alltypes.csc2

let NEWNUMREC=$((2*INITNUMREC))
insert_records 1 $NEWNUMREC
assertcnt $NEWNUMREC

update_records 1 $NEWNUMREC
assertcnt $NEWNUMREC

delete_records $((INITNUMREC+1)) $NEWNUMREC
assertcnt $INITNUMREC


echo "Now call task that uses cdb2api to ins/upd/del"
./cdb2api_caller $dbnm > cdb2api_caller.out

res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select 1"`
assertres $res 1

echo "Success"

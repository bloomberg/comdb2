#!/usr/bin/env bash

bash -n "$0" | exit 1

# Grab my database name.
dbnm=$1

# Enable or disable debugging.
debug=0

# Enable background-debugging.
bgdebug=0

# No initial-insert flag, useful for testing.
noins=0

# Number of random writes per writer.
randwr=1000

# Remember if we've started the coprocess.
stco=0

# Verbose flag.
verbose=0

# Set the maximum number of added records.
maxrc=7000

# Keep track of select iterations.
iter=1

TMPDIR=tmp
mkdir $TMPDIR

# Final tmpfile for t1.
tmp1=${TMPDIR}/cdb2tst_t1.$$.final

# Set to 0 to turn off the t1 table for debugging.
sel_t1=1 

# Set to 0 to turn off counts for t1.
cnt_t1=1

# Set to 0 to disable t1 inserts.
ins_t1=0

# Set to 0 to disable t1 updates.
upd_t1=0

# Set to 0 to disable no-blob t1 updates.
upd_noblob_t1=0

# Set to 0 to disable only-blob t1 updates
upd_onlyblob_t1=0

# Set to 0 to disable t1 deletes.
del_t1=0

# Does t1 have any writes- calculated at end.
wr_t1=0

# 'Background' tmpfile.
bgtmpfl=${TMPDIR}/cdb2tst_bg.$$.tmp

# Rcode to return to comdb2test.
rcode=0

# Counter.
ii=0

# Enable or disable a hello-message from the bg writers.
bghlo=0

# Variable to maintain the pids of the bkground writes.
bkpid=-1

# Count of the bkground pids that are still running.
bkcnt=-1

# Set to 1 if we should fastinit t1 at test start.
t1_fastinit=1

# Perform a subsequent tests on select failure
subs_test=1

# Error/quit function.
function errquit
{
    typeset msg=$1

    # Enable debugging.
    [[ "$debug" == "1" ]] && set -x

    # echo error messages.
    echo -u2 "ERROR: $msg"
    echo -u2 "Testcase failed."

    # Check for the background writer.

        # Kill each pid
        [[ ${bkpid} != "-1" ]] && kill -9 ${bkpid} >/dev/null 2>&1

        # Reset to -1
        bkpid=-1

    # Check for the coprocess.
    if [[ "$stco" == "1" ]]; then
        
        # Ask it to quit.
        echo "quit" >&${COPROC[1]}

    fi

    # Exit test.
    exit 1
}

# Retrieve the 64-bit archcode.
function myarch64
{
    typeset u=$(uname)
    typeset a="<unknown>"

    # Enable debugging if desired.
    [[ "$debug" == "1" ]] && set -x

    # Select the correct 64-bit architecture.
    [[ "$u" == "SunOS" ]]   && a="sundev1_64"
    [[ "$u" == "AIX" ]]     && a="ibm_64"
    [[ "$u" == "HP-UX" ]]   && a="hp_64"
    [[ "$u" == "Linux" ]]   && a="linux_64"

    echo $a
    return 0
}

# Create a random blob 
function randbl
{
    typeset sz=$1
    typeset ii=0
    typeset rtn=

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Generate random blob-bytes
    while [[ $ii -lt $sz ]]; do

        typeset -i x=$RANDOM
        typeset -i A=16#0
        typeset -u A=$(( x % 16 ))

        rtn="${rtn}${A#16#}"

        let ii=ii+1

    done

    echo $rtn

    return 0
}


# Generate insert statements for t1.
function gent1insert
{
    typeset max=$1
    typeset fl=$2
    typeset ii=0
    typeset nullblob=0

    typeset id1
    typeset x1
    typeset id2
    typeset x2
    typeset id3
    typeset x3
    typeset id4
    typeset x4
    typeset id5
    typeset x5
    typeset id6
    typeset x6
    typeset id7
    typeset x7
    typeset id8
    typeset x8
    typeset id9
    typeset x9
    typeset id10
    typeset x10

    typeset b1
    typeset b2
    typeset b3
    typeset b4
    typeset b5
    typeset b6
    typeset b7
    typeset b8
    typeset b9
    typeset b10

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Clear my file
    >$fl

    # Start a loop
    while [[ $ii -lt $max ]] ; do

    # Create a random id for t1
    x2=$RANDOM ; id2=$(( x2 % maxrc ))
    x3=$RANDOM ; id3=$(( x3 % maxrc ))
    x4=$RANDOM ; id4=$(( x4 % maxrc ))
    x5=$RANDOM ; id5=$(( x5 % maxrc ))
    x6=$RANDOM ; id6=$(( x6 % maxrc ))
    x7=$RANDOM ; id7=$(( x7 % maxrc ))
    x8=$RANDOM ; id8=$(( x8 % maxrc ))
    x9=$RANDOM ; id9=$(( x9 % maxrc ))
    x10=$RANDOM ; id10=$((x10 % maxrc ))

    # Create a random blob for t1
    b1=$(randbl 16)
    b2=$(randbl 16)
    b3=$(randbl 16)
    b4=$(randbl 16)
    b5=$(randbl 16)
    b6=$(randbl 16)
    b7=$(randbl 16)
    b8=$(randbl 16)
    b9=$(randbl 16)
    b10=$(randbl 16)
            # echo a line of trace
            # echo "insert into t1(id1, b1, id2, b2, id3, b3, id4, b4, id5, b5, id6, b6, id7, b7, id8, b8, id9, b9, id10, b10, id11, b11, id12, b12, id13, b13, id14, b14, id15, b15, id16, b16, id17, b17, id18, b18, id19, b19, id20, b20, id21, b21, id22, b22, id23, b23, id24, b24, id25, b25, id26, b26, id27, b27, id28, b28, id29, b29, id30, b30, id31, b31, id32, b32, id33, b33, id34, b34, id35, b35, id36, b36, id37, b37, id38, b38, id39, b39, id40, b40, id41, b41, id42, b42, id43, b43, id44, b44, id45, b45, id46, b46, id47, b47, id48, b48, id49, b49, id50, b50) values ($ii, x'$b1', $id2, x'$b2', $id3, x'$b4', $id4, x'$b4', $id5, x'$b5', $id6, x'$b6', $id7, x'$b7', $id8, x'$b8', $id9, x'$b9', $id10, x'$b10', $id11, x'$b11', $id12, x'$b12', $id13, x'$b13', $id14, x'$b14', $id15, x'$b15', $id16, x'$b16', $id17, x'$b17', $id18, x'$b18', $id19, x'$b19', $id20, x'$b20', $id21, x'$b21', $id22, x'$b22', $id23, x'$b23', $id24, x'$b24', $id25, x'$b25', $id26, x'$b26', $id27, x'$b27', $id28, x'$b28', $id29, x'$b29', $id30, x'$b30', $id31, x'$b31', $id32, x'$b32', $id33, x'$b33', $id34, x'$b34', $id35, x'$b35', $id36, x'$b36', $id37, x'$b37', $id38, x'$b38', $id39, x'$b39', $id40, x'$b40', $id41, x'$b41', $id42, x'$b42', $id43, x'$b43', $id44, x'$b44', $id45, x'$b45', $id46, x'$b46', $id47, x'$b47', $id48, x'$b48', $id49, x'$b49', $id50, x'$b50')" >> $fl
            echo "insert into t1(id1, b1, id2, b2, id3, b3, id4, b4, id5, b5, id6, b6, id7, b7, id8, b8, id9, b9, id10, b10) values ($ii, x'aa', $id2, x'aa', $id3, x'aa', $id4, x'aa', $id5, x'aa', $id6, x'aa', $id7, x'aa', $id8, x'aa', $id9, x'aa', $id10, x'aa')" >> $fl

        # Increment ii
        let ii=ii+1

    done

    return 0
}

# Update a random record in t1
function gent1update
{
    typeset fl=$1
    typeset id
    typeset upid
    typeset nullblob=0
    typeset bbblob=0
    typeset x
    typeset rd
    typeset iter

    typeset id1
    typeset x1
    typeset id2
    typeset x2
    typeset id3
    typeset x3
    typeset id4
    typeset x4
    typeset id5
    typeset x5
    typeset id6
    typeset x6
    typeset id7
    typeset x7
    typeset id8
    typeset x8
    typeset id9
    typeset x9
    typeset id10
    typeset x10

    typeset b1
    typeset b2
    typeset b3
    typeset b4
    typeset b5
    typeset b6
    typeset b7
    typeset b8
    typeset b9
    typeset b10

    iter=0

    while [[ $iter -lt $maxrc ]]; do

        let iter=iter+1

    # Create a random id for t1
    x1=$RANDOM ; id1=$(( x1 % maxrc ))
    x2=$RANDOM ; id2=$(( x2 % maxrc ))
    x3=$RANDOM ; id3=$(( x3 % maxrc ))
    x4=$RANDOM ; id4=$(( x4 % maxrc ))
    x5=$RANDOM ; id5=$(( x5 % maxrc ))
    x6=$RANDOM ; id6=$(( x6 % maxrc ))
    x7=$RANDOM ; id7=$(( x7 % maxrc ))
    x8=$RANDOM ; id8=$(( x8 % maxrc ))
    x9=$RANDOM ; id9=$(( x9 % maxrc ))
    x10=$RANDOM ; id10=$((x10 % maxrc ))

    # Create a random blob for t1
    b1=$(randbl 32)
    b2=$(randbl 32)
    b3=$(randbl 32)
    b4=$(randbl 32)
    b5=$(randbl 32)
    b6=$(randbl 32)
    b7=$(randbl 32)
    b8=$(randbl 32)
    b9=$(randbl 32)
    b10=$(randbl 32)

    rd=$((RANDOM % 4 ))

        if [[ "0" == "$rd" ]]; then
            echo "update t1 set b10=NULL, id10 = $id10, b9=NULL, id9 = $id9, b8=NULL, id8 = $id8, b7=NULL, id7 = $id7, b6=NULL, id6 = $id6, b5=NULL, id5 = $id5, b4=NULL, id4 = $id4, b3=NULL, id3 = $id3, b2=NULL, id2 = $id2, b1=NULL, id1 = $id1 where id1=$id1" >> $fl
        elif [[ "1" == "$rd" ]]; then
            echo "update t1 set b10=x'bb', id10 = $id10, b9=x'bb', id9 = $id9, b8=x'bb', id8 = $id8, b7=x'bb', id7 = $id7, b6=x'bb', id6 = $id6, b5=x'bb', id5 = $id5, b4=x'bb', id4 = $id4, b3=x'bb', id3 = $id3, b2=x'bb', id2 = $id2, b1=x'bb', id1 = $id1 where id1=$id1" >> $fl
        elif [[ "2" == "$rd" ]]; then
            echo "update t1 set id10 = $id10, id9 = $id9, id8 = $id8, id7 = $id7, id6 = $id6, id5 = $id5, id4 = $id4, id3 = $id3, id2 = $id2, id1 = $id1 where id1=$id1" >> $fl
        else
            echo "update t1 set b10=x'$b10', id10 = $id10, b9=x'$b9', id9 = $id9, b8=x'$b8', id8 = $id8, b7=x'$b7', id7 = $id7, b6=x'$b6', id6 = $id6, b5=x'$b5', id5 = $id5, b4=x'$b4', id4 = $id4, b3=x'$b3', id3 = $id3, b2=x'$b2', id2 = $id2, b1=x'$b1', id1 = $id1 where id1=$id1" >> $fl
        fi
    done

    return 0
}


# Update a random record in tq
function update_rand_t1
{
    typeset db=$1
    typeset id
    typeset upid
    typeset nullblob=0
    typeset bbblob=0
    typeset x
    typeset rd

    typeset id1
    typeset x1
    typeset id2
    typeset x2
    typeset id3
    typeset x3
    typeset id4
    typeset x4
    typeset id5
    typeset x5
    typeset id6
    typeset x6
    typeset id7
    typeset x7
    typeset id8
    typeset x8
    typeset id9
    typeset x9
    typeset id10
    typeset x10

    typeset b1
    typeset b2
    typeset b3
    typeset b4
    typeset b5
    typeset b6
    typeset b7
    typeset b8
    typeset b9
    typeset b10

    # Create a random id for t1
    x1=$RANDOM ; id1=$(( x1 % maxrc ))
    x2=$RANDOM ; id2=$(( x2 % maxrc ))
    x3=$RANDOM ; id3=$(( x3 % maxrc ))
    x4=$RANDOM ; id4=$(( x4 % maxrc ))
    x5=$RANDOM ; id5=$(( x5 % maxrc ))
    x6=$RANDOM ; id6=$(( x6 % maxrc ))
    x7=$RANDOM ; id7=$(( x7 % maxrc ))
    x8=$RANDOM ; id8=$(( x8 % maxrc ))
    x9=$RANDOM ; id9=$(( x9 % maxrc ))
    x10=$RANDOM ; id10=$((x10 % maxrc ))

    # Create a random blob for t1
    b1=$(randbl 32)
    b2=$(randbl 32)
    b3=$(randbl 32)
    b4=$(randbl 32)
    b5=$(randbl 32)
    b6=$(randbl 32)
    b7=$(randbl 32)
    b8=$(randbl 32)
    b9=$(randbl 32)
    b10=$(randbl 32)

    rd=$((RANDOM % 4 ))

    # Make the blob a NULL once every 3 times
    if [[ "0" == "$rd" ]]; then
        cdb2sql -s ${CDB2_OPTIONS} $db default "update t1 set b10=NULL, id10 = $id10, b9=NULL, id9 = $id9, b8=NULL, id8 = $id8, b7=NULL, id7 = $id7, b6=NULL, id6 = $id6, b5=NULL, id5 = $id5, b4=NULL, id4 = $id4, b3=NULL, id3 = $id3, b2=NULL, id2 = $id2, b1=NULL, id1 = $id1 where id1=$id1" >/dev/null 2>&1
    elif [[ "1" == "$rd" ]]; then
        cdb2sql -s ${CDB2_OPTIONS} $db default "update t1 set b10=x'bb', id10 = $id10, b9=x'bb', id9 = $id9, b8=x'bb', id8 = $id8, b7=x'bb', id7 = $id7, b6=x'bb', id6 = $id6, b5=x'bb', id5 = $id5, b4=x'bb', id4 = $id4, b3=x'bb', id3 = $id3, b2=x'bb', id2 = $id2, b1=x'bb', id1 = $id1 where id1=$id1" >/dev/null 2>&1
    elif [[ "2" == "$rd" ]]; then
        cdb2sql -s ${CDB2_OPTIONS} $db default "update t1 set id10 = $id10, id9 = $id9, id8 = $id8, id7 = $id7, id6 = $id6, id5 = $id5, id4 = $id4, id3 = $id3, id2 = $id2, id1 = $id1 where id1=$id1" >/dev/null 2>&1
    else
        cdb2sql -s ${CDB2_OPTIONS} $db default "update t1 set b10=x'$b10', id10 = $id10, b9=x'$b9', id9 = $id9, b8=x'$b8', id8 = $id8, b7=x'$b7', id7 = $id7, b6=x'$b6', id6 = $id6, b5=x'$b5', id5 = $id5, b4=x'$b4', id4 = $id4, b3=x'$b3', id3 = $id3, b2=x'$b2', id2 = $id2, b1=x'$b1', id1 = $id1 where id1=$id1" >/dev/null 2>&1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then
        if [[ "0" == "$rd" ]]; then
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set b10=NULL, id10 = $id10, b9=NULL, id9 = $id9, b8=NULL, id8 = $id8, b7=NULL, id7 = $id7, b6=NULL, id6 = $id6, b5=NULL, id5 = $id5, b4=NULL, id4 = $id4, b3=NULL, id3 = $id3, b2=NULL, id2 = $id2, b1=NULL, id1 = $id1 where id1=$id1\"" >> $bgtmpfl
        elif [[ "1" == "$rd" ]]; then
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set b10=x'bb', id10 = $id10, b9=x'bb', id9 = $id9, b8=x'bb', id8 = $id8, b7=x'bb', id7 = $id7, b6=x'bb', id6 = $id6, b5=x'bb', id5 = $id5, b4=x'bb', id4 = $id4, b3=x'bb', id3 = $id3, b2=x'bb', id2 = $id2, b1=x'bb', id1 = $id1 where id1=$id1\"" >> $bgtmpfl
        elif [[ "2" == "$rd" ]]; then
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set id10 = $id10, id9 = $id9, id8 = $id8, id7 = $id7, id6 = $id6, id5 = $id5, id4 = $id4, id3 = $id3, id2 = $id2, id1 = $id1 where id1=$id1\"" >> $bgtmpfl
        else
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set b10=x'$b10', id10 = $id10, b9=x'$b9', id9 = $id9, b8=x'$b8', id8 = $id8, b7=x'$b7', id7 = $id7, b6=x'$b6', id6 = $id6, b5=x'$b5', id5 = $id5, b4=x'$b4', id4 = $id4, b3=x'$b3', id3 = $id3, b2=x'$b2', id2 = $id2, b1=x'$b1', id1 = $id1 where id1=$id1\"" >> $bgtmpfl
        fi
    fi

    return 0
}

# Select and compare data. 
function selectcmp
{
    typeset tbl=$1
    typeset iter=$2
    typeset out
    typeset out2
    typeset tmfl
    typeset tmfl2
    typeset ckfl
    typeset docnt=0

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a new-tmpfile for this select with a new name: we might want view.
    tmfl=${TMPDIR}/cdb2tst_$tbl.$$.tmp.$iter

    # Zero out this tmpfile.
    > $tmfl

    # For the check-file name
    ckfl=$(pwd)/select_${tbl}.txt

    # Tell the co-process to redirect to the new tmpfile.
    echo "@redirect $tmfl" >&${COPROC[1]}

    # Perform the select.
    echo "select id5, id1 from $tbl order by id5, id1" >&${COPROC[1]}

    # Tell the co-process to redirect to stdout.
    echo "@redirect" >&${COPROC[1]}

    # Only do a count for t1 if it's enabled.
    [[ "$tbl" == "t1" && "1" == "$cnt_t1" ]] && docnt=1

    # Do a count if it's enabled.
    if [[ "1" == "$docnt" ]]; then

        # Get a count.
        echo "select count(*) from $tbl" >&${COPROC[1]}

        # Block until both are done.
        read -ru ${COPROC[0]} out

        # Sanity check the count.
        if [[ "$out" != "(count(*)=$maxrc)" ]] ; then

            # Do a little extra work if the 'subs_test' flag is lit.
            if [[ "1" == "$subs_test" ]]; then

                # Create the final tmpfile.
                tmfl2=$tmfl.final

                # Zero out this file.
                > $tmfl2

                # Tell the co-process to redirect to a new tmpfile.
                echo "@redirect $tmfl2" >&${COPROC[1]}

                # Do one more select so that we can see if this is 'sticky'.
                echo "select id5, id1 from $tbl order by id5, id1" >&${COPROC[1]}

                # Tell the co-process to redirect to stdout.
                echo "@redirect" >&${COPROC[1]}

                # Get another count.
                echo "select count(*) from $tbl" >&${COPROC[1]}

                # Block until done (again).
                read -ru ${COPROC[0]} out2

                # echo subsequent count
                echo -u2 "A subsequent count returned this: $out2."

                # echo more information.
                echo -u2 "Compare testcase output: diff $tmfl2 $ckfl."

            fi

            # echo a bad error-message.
            echo -u2 "Unexpected count in snapisol session: $out."

            # Return a bad rcode
            return 1

        fi

    # Otherwise, block on something lightweight'ish.
    else

        # What time is it?
        echo "select now()" >&${COPROC[1]}

        # Block until this is done.
        read -ru ${COPROC[0]} out

    fi

    # Diff this against our output
    diff $ckfl $tmfl

    # Check return code
    if [[ $? != 0 ]]; then

        # echo bad errmsg.
        echo -u2 "Incorrect select from snapisol session."

        # Tell the user how to see this.
        echo -u2 "Run 'diff $ckfl $tmfl' to see the error."

        # Return a bad rcode.
        return 1

    fi

    # Great- success!
    return 0
}

# Trap to errquit if the user presses Ctrl-C
trap "errquit \"Cancelling test\"" INT EXIT

# Fastinit t1 if requested
[[ "1" == "$t1_fastinit" ]] && cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate t1"


# If bgdebugging is enabled, echo the filename.
if [[ "1" == "$bgdebug" ]]; then

    # Clear it out.
    > $bgtmpfl

    echo "Enabled 'background' debugging for writes in file '$bgtmpfl'."
fi

echo "Inserting records into t1."
[[ "0" == "$noins" ]] && cdb2sql -s ${CDB2_OPTIONS} $dbnm default - < insert_t1.cfg >/dev/null

# Select t1 back.
echo "Selecting t1."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id5, id1 from t1 order by id5, id1" > select_t1.txt

# Start a snapshot isolation session-coprocess
coproc stdbuf -oL cdb2sql -s ${CDB2_OPTIONS} $dbnm default -
cpid=$!
echo me: $$ COPROC $cppid fd in ${COPROC[0]} out ${COPROC[1]}

# Set the started-coprocess flag
stco=1
export COPROC

# Set the transaction level
echo "set transaction snapshot isolation" >&${COPROC[1]}

# Quick select count(*) sanity-check
echo "select count(*) from t1" >&${COPROC[1]}

# Read the result
read -ru ${COPROC[0]} out 

# Error out if we don't see what we expected
[[ "$out" != "(count(*)=$maxrc)" ]] && errquit \
        "Unexpected results from sql-cprocess (count should be $maxrc)"

# echo status message.
echo "Beginning snapisol transaction."

# Begin a transaction
echo "begin" >&${COPROC[1]}

# Select everything from t1
if [[ "1" == "$sel_t1" ]]; then
    selectcmp t1 0
    [[ "$?" != "0" ]] && errquit "Unexpected results selecting from t1 in a txn."
fi


echo "Updating records in t1."
cdb2sql -s ${CDB2_OPTIONS} $dbnm default - < update_t1.cfg > /dev/null 2>&1 &
bkpid=$!
bkcnt=1 

# echo a status message.
echo "Select and verify the snapshot results."

# Verify the pid in a loop.
while [[ "$bkcnt" != "0" ]];  do

    # Select everything from t1
    if [[ "1" == "$sel_t1" ]]; then
        selectcmp t1 $iter
        [[ "$?" != "0" ]] && errquit "Unexpected results selecting from t1 in a txn."
    fi

    # Increment iter.
    let iter=iter+1

    # Reset bkcnt.
    bkcnt=0 
    
        if [[ "-1" != ${bkpid} ]]; then

            # Is this still alive?
            ps -p ${bkpid} >/dev/null 2>&1

            # It takes only one-runner to break out of the loop.
            if [[ $? == 0 ]] ; then

                # We found a running pid- increment bkcnt.
                let bkcnt=bkcnt+1

            else

                # echo a message while I'm debugging this.
                echo "Writer pid ${bkpid} has completed."

                # Reset this so I don't keep checking for it.
                bkpid=-1

            fi
        fi

done
#
## Finally 'commit' the txn.
#echo "commit" >&${COPROC[1]}
#
# Remove trap-command.
trap - INT EXIT

# If we made it here we passed.
if [[ "$rcode" == "0" ]]; then

    rm -rf $TMPDIR
    echo "Testcase passed."

fi

exit $rcode

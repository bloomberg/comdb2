#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


function failexit
{
    echo "Failed $1"
    exit -1
}

function assertcnt 
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}


function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


function update_records
{
    j=0
    nrecs=$1
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+10000 where a = $j" >> update.out 
        let j=j+1
    done
}

function insert_records
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c) values ($j,'test1$j',$j)"  &>> $insfl
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
    done
}




echo "Test with insert, SC should not fail"

#cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('debg 800')"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1_1.csc2 ` }"

insert_records 1 2000
assertcnt 2000

#check via select * from t1 | make sure that a == b == c == 'test'$


insert_records 2001 3000 &

echo "Alter table to t1_2 version while doing inserts"
sleep 1
cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_2.csc2 ` }"

ret=$?
if [[ "$ret" != 0 ]]; then
    failexit "Schemachange rc=$rc, but it should have succeeded"
fi

wait
assertcnt 3000
do_verify

echo "Alter table to t1_1 version"
cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_1.csc2 ` }"
assertcnt 3000
do_verify


update_records 3000 &

echo "Alter table to t1_2 version while doing updates"
sleep 1
cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_2.csc2 ` }"

ret=$?
if [[ "$ret" != 0 ]]; then
    failexit "Schemachange rc=$rc, but it should have succeeded"
fi

wait
assertcnt 3000
do_verify



function do_alter_and_update (){
#updates fail (deadlock?):
#[update t1 set c=c+10000 where 1] failed with rc 304 unable to update record rc = 199
cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_1.csc2 ` }" 
assertcnt 3000
do_verify

(cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_2.csc2 ` }" || touch alter.failed) &
sleep 0.1
cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+10000 where 1" > update.out 

ret=$?
if [[ "$ret" != 0 ]]; then
    failexit "Schemachange rc=$rc, but it should have succeeded"
fi


wait
assertcnt 3000
do_verify
if [ -f alter.failed ] ; then
    failexit "Alter while updating where 1"
fi
}

do_alter_and_update


function do_rebuild_and_update (){
#rebuild and update fail...2 problems:
#1. not found in new IX, when key a and key c
#2. dup in new IX, when only key c

(cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild t1" || touch rebuild.failed) &
sleep 0.1
cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+10000 where 1" > update.out 

ret=$?
if [[ "$ret" != 0 ]]; then
    failexit "Schemachange rc=$rc, but it should have succeeded"
fi


wait
assertcnt 3000
do_verify
if [ -f rebuild.failed ] ; then
    failexit "Rebuild while updating where 1"
fi
}



insert_records 3001 4000 &

echo "Alter into t1_3.csc2"
sleep 1
cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_3.csc2 ` }"

ret=$?

if [[ "$ret" != 0 ]]; then
    failexit "Test Failed: Schemachange rc=$rc, but it should have succeeded"
fi

wait
assertcnt 4000
do_verify



echo "Simple rebuild while update/deleting"

master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('scdelay 10')"

(cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "rebuild t1 " &> rebuild.out || touch rebuild.failed) &

sleep 15
cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t1 where a % 2 = 1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set a = a + 10000 where 1"


if [ -f rebuild.failed ] ; then
    failexit "Rebuild failed, but it should have succeeded"
fi


echo "Success"

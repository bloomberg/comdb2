#!/usr/bin/env bash
bash -n "$0" | exit 1

###################################################################################
# Verify that the OP_MakeRecord Optimization runs faster and requires less memory #
###################################################################################

set -e

dbnm=$1

host=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "SELECT comdb2_host()"`

# Turn on the optimization
cdb2sql $dbnm --host $host "EXEC PROCEDURE sys.cmd.send('on sqlite_makerecord_for_comdb2')"
# Measure runtime
before=`${TESTSBUILDDIR}/makerecord_timer $dbnm $host 67108864`
# Measure memory
cdb2sql --tabs $dbnm --host $host "EXEC PROCEDURE sys.cmd.send('memstat sqlite')"
totalmembefore=`cdb2sql --tabs $dbnm --host $host "EXEC PROCEDURE sys.cmd.send('memstat sqlite')" | grep total | tail -1 | awk '{print $8}'`

# Turn off the optimization
cdb2sql $dbnm --host $host "EXEC PROCEDURE sys.cmd.send('off sqlite_makerecord_for_comdb2')"
# Measure runtime
after=`${TESTSBUILDDIR}/makerecord_timer $dbnm $host 67108864`
# Measure memory
cdb2sql --tabs $dbnm --host $host "EXEC PROCEDURE sys.cmd.send('memstat sqlite')"
totalmemafter=`cdb2sql --tabs $dbnm --host $host "EXEC PROCEDURE sys.cmd.send('memstat sqlite')" | grep total | tail -1 | awk '{print $8}'`


# With the optimization, insertion should run faster.
echo "Time pre-optimization ($before) < post-optimization ($after) ?"
if [ $before -ge $after ]; then
  exit 1
fi
# With the optimization, insertion should use less memory.
echo "Memory pre-optimization ($totalmembefore) < post-optimization ($totalmemafter) ?"
if [ $totalmembefore -ge $totalmemafter ]; then
  exit 1
fi
echo SUCCESS
exit 0

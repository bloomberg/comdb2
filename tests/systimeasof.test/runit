#!/bin/bash
bash -n "$0" | exit 1

# Grab my database name.
dbnm=$1

# Verify that the user at least supplied a dbname
if [[ -z "$dbnm" ]]; then

    echo "Testcase requires <dbname> argument."
    exit 1

fi

# Enable or disable debugging.
debug=0

# Enable background-debugging.
bgdebug=0

# No initial-insert flag, useful for testing.
noins=0

# Number of random writes per writer.
randwr=200

# Remember if we've started the coprocess.
stco=0

# Verbose flag.
verbose=0

# Set the maximum number of added records for t1.
maxt1=20

# Set the maximum number of added records for t2.
maxt2=20

# Keep track of select iterations.
iter=1

# Final tmpfile for t1.
tmp1=${TMPDIR}/cdb2tst_t1.$$.final

# Final tmpfile for t2.
tmp2=${TMPDIR}/cdb2tst_t2.$$.final

# Set to 0 to turn off the t1 table for debugging.
sel_t1=1

# Set to 0 to turn off the t2 table for debugging.
sel_t2=1

# Set to 0 to turn off the t1 x t2 table for debugging.
sel_t1_t2=1

# Set to 0 to turn off the t2 x t2 table for debugging.
sel_t2_t2=1

# Set to 0 to turn off the ix1 x ix1 table for debugging.
sel_ix1_ix1=1

# Set to 0 to turn off counts for t1.
cnt_t1=1

# Set to 0 to turn off counts for t2.
cnt_t2=1

# Set to 0 to turn off counts for t1 x t2.
cnt_t1_t2=1

# Set to 0 to turn off counts for t2 x t2.
cnt_t2_t2=1

# Set to 0 to turn off counts for ix1 x ix1.
cnt_ix1_ix1=1

# Set to 0 to disable t1 inserts.
ins_t1=1

# Set to 0 to disable t2 inserts.
ins_t2=1

# Set to 0 to disable t1 updates.
upd_t1=1

# Set to 0 to disable t1 no-blob updates.
upd_noblob_t1=1

# Set to 0 to disable only-blob t1 updates
upd_onlyblob_t1=1

# Set to 0 to disable t2 updates.
upd_t2=1

# Set to 0 to disable t1 deletes.
del_t1=1

# Set to 0 to disable t2 deletes.
del_t2=1

# Does t1 have any writes- calculated at end.
wr_t1=1

# Does t2 have any writes- calculated at end.
wr_t2=1

# 'Background' tmpfile.
bgtmpfl=${TMPDIR}/cdb2tst_bg.$$.tmp

# Rcode to return to comdb2test.
rcode=0

# Counter.
ii=0

# Number of background writers.
nwrts=5

# Enable or disable a hello-message from the bg writers.
bghlo=0

# Variable to maintain the pids of the bkground writes.
bkpid=-1

# Count of the bkground pids that are still running.
bkcnt=-1

# Set to 1 if we should fastinit t1 at test start.
t1_fastinit=1

# Set to 1 if we should fastinit t2 at test start.
t2_fastinit=1

# Perform a subsequent tests on select failure
subs_test=1

# Set to 1 to make all blobs NULL originally
allnull_blob=0

# Set the background pids to -1.
while [[ $ii -lt $nwrts ]]; do

    # Reset to -1.
    bkpid[$ii]=-1

    # Increment.
    let ii=ii+1

done

# Error/quit function.
function errquit
{
    typeset msg=$1
    typeset cnt=0

    # Enable debugging.
    [[ "$debug" == "1" ]] && set -x

    echo "ERROR: $msg"
    echo "Testcase failed."

    # Check for the background writer.
    while [[ $cnt -lt $nwrts ]]; do

        # Kill each pid
        [[ ${bkpid[$cnt]} != "-1" ]] && kill -9 ${bkpid[$cnt]} >/dev/null 2>&1

        # Reset to -1
        bkpid[$cnt]=-1

        let cnt=cnt+1

    done

    # Check for the coprocess.
    if [[ "$stco" == "1" ]]; then

        # Ask it to quit.
        echo "quit" >&${COPROC[1]}

    fi

    # Exit test.
    exit 1
}

# Retrieve the 64-bit archcode.
function myarch64
{
    typeset u=$(uname)
    typeset a="<unknown>"

    # Enable debugging if desired.
    [[ "$debug" == "1" ]] && set -x

    # Select the correct 64-bit architecture.
    [[ "$u" == "SunOS" ]]   && a="sundev1_64"
    [[ "$u" == "AIX" ]]     && a="ibm_64"
    [[ "$u" == "HP-UX" ]]   && a="hp_64"
    [[ "$u" == "Linux" ]]   && a="linux_64"

    echo $a
    return 0
}


# Generate insert statements for t1.
function gent1insert
{
    typeset max=$1
    typeset fl=$2
    typeset ii=0
    typeset nullblob=0

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Clear my file
    >$fl

    # Start a loop
    while [[ $ii -lt $max ]] ; do

        # Insert a NULL blob once every 2 records
        if [[ "0" == $(( ii % 2 )) ]]; then

            nullblob=1

        else

            nullblob=0

        fi

        # Set all blobs to NULL initially if allnull_blob is set.
        if [[ "$allnull_blob" == "1" ]]; then

            nullblob=1

        fi

        if [[ "1" == "$nullblob" ]]; then

            # Print a line of trace
            echo "insert into t1(id) values ($ii)" >> $fl

        else

            # Print a line of trace
            echo "insert into t1(id, b1) values ($ii, x'aa')" >> $fl

        fi

        # Increment ii
        let ii=ii+1

    done

    return 0
}

# Generate insert statements for t2
function gent2insert
{
    typeset max=$1
    typeset fl=$2
    typeset ii=0

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Clear my file
    >$fl

    # Start a loop
    while [[ $ii -lt $max ]] ; do

        echo "insert into t2(id) values ($ii)" >> $fl

        # Increment ii
        let ii=ii+1

    done

    return 0
}

# Create a random blob
function randbl
{
    typeset sz=$1
    typeset ii=0
    typeset rtn=

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Generate random blob-bytes
    while [[ $ii -lt $sz ]]; do

        typeset -i x=$RANDOM
        typeset -i A=16#0
        typeset -u A=$(( x % 16 ))

        rtn="${rtn}${A#16#}"

        let ii=ii+1

    done

    echo $rtn

    return 0
}

# Insert a random record into t1
function insert_rand_t1
{
    typeset db=$1
    typeset id
    typeset bl

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id for t1
    id=$(( RANDOM % (maxt1 * 2) ))

    # Create a random blob for t1
    bl=$(randbl 32)

    # Insert the record
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"insert into t1(id, b1) values ($id, x'$bl')\""
        cdb2sql ${CDB2_OPTIONS} $db default "insert into t1(id, b1) values ($id, x'$bl')"
    else
        cdb2sql ${CDB2_OPTIONS} $db default "insert into t1(id, b1) values ($id, x'$bl')" >/dev/null 2>&1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then

        echo "cdb2sql ${CDB2_OPTIONS} $db default \"insert into t1(id, b1) values ($id, x'$bl')\"" >> $bgtmpfl
    fi

    return 0
}

# Insert a random record into t2
function insert_rand_t2
{
    typeset db=$1
    typeset id

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id for t2
    id=$(( RANDOM % ( maxt2 * 2 ) ))

    # Insert the record, discard the result
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"insert into t2(id) values ($id)\""
        cdb2sql ${CDB2_OPTIONS} $db default "insert into t2(id) values ($id)"
    else
        cdb2sql ${CDB2_OPTIONS} $db default "insert into t2(id) values ($id)" >/dev/null 2>&1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then

        echo "cdb2sql ${CDB2_OPTIONS} $db default \"insert into t2(id) values ($id)\"" >> $bgtmpfl
    fi

    return 0
}


function update_noblob_rand_t1
{
    typeset db=$1
    typeset id
    typeset upid
    typeset x

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id for t1
    id=$(( RANDOM % ( maxt1 * 2) )) ; upid=$(( RANDOM % (maxt1 * 2) ))

    # Update a record, discard the result
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set id=$upid where id=$id\""
        cdb2sql ${CDB2_OPTIONS} $db default "update t1 set id=$upid where id=$id"
    else
        cdb2sql ${CDB2_OPTIONS} $db default "update t1 set id=$upid where id=$id" >/dev/null 2>&1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then

        echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set id=$upid where id=$id\"" >> $bgtmpfl
    fi

    return 0
}

# Update a random record in t1
function update_onlyblob_rand_t1
{
    typeset db=$1
    typeset id
    typeset nullblob=0
    typeset x

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id for t1
    x=$RANDOM ; id=$(( x % ( maxt1 * 2) ))

    # Create a random blob for t1
    bl=$(randbl 32)

    # Make the blob a NULL once every 5 times
    if [[ "0" == $((RANDOM % 5 )) ]]; then
        nullblob=1
    fi

    # Update a record, discard the result
    if [[ "1" == "$debug" ]]; then

        if [[ "1" == "$nullblob" ]]; then

            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set b1=NULL where id=$id\""
            cdb2sql ${CDB2_OPTIONS} $db default "update t1 set b1=NULL where id=$id"

        else

            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set b1=x'$bl' where id=$id\""
            cdb2sql ${CDB2_OPTIONS} $db default "update t1 set b1=x'$bl' where id=$id"

        fi

    else
        if [[ "1" == "$nullblob" ]]; then
            cdb2sql ${CDB2_OPTIONS} $db default "update t1 set b1=NULL where id=$id" >/dev/null 2>&1
        else
            cdb2sql ${CDB2_OPTIONS} $db default "update t1 set b1=x'$bl' where id=$id" >/dev/null 2>&1
        fi
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then

        if [[ "1" == "$nullblob" ]]; then
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set b1=NULL where id=$id\"" >> $bgtmpfl
        else
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set b1=x'$bl' where id=$id\"" >> $bgtmpfl
        fi
    fi

    return 0
}


# Update a random record in t1
function update_rand_t1
{
    typeset db=$1
    typeset id
    typeset upid
    typeset nullblob=0

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id for t1
    id=$(( RANDOM % (maxt1 * 2) )) ; upid=$(( RANDOM % (maxt1 * 2) ))

    # Create a random blob for t1
    bl=$(randbl 32)

    # Make the blob a NULL once every 5 times
    if [[ "0" == $(( RANDOM % 5 )) ]]; then
        nullblob=1
    fi

    # Update a record, discard the result
    if [[ "1" == "$debug" ]]; then

        if [[ "1" == "$nullblob" ]]; then

            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set id=$upid, b1=NULL where id=$id\""
            cdb2sql ${CDB2_OPTIONS} $db default "update t1 set id=$upid, b1=NULL where id=$id"

        else

            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set id=$upid, b1=x'$bl' where id=$id\""
            cdb2sql ${CDB2_OPTIONS} $db default "update t1 set id=$upid, b1=x'$bl' where id=$id"

        fi

    else
        if [[ "1" == "$nullblob" ]]; then
            cdb2sql ${CDB2_OPTIONS} $db default "update t1 set id=$upid, b1=NULL where id=$id" >/dev/null 2>&1
        else
            cdb2sql ${CDB2_OPTIONS} $db default "update t1 set id=$upid, b1=x'$bl' where id=$id" >/dev/null 2>&1
        fi
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then

        if [[ "1" == "$nullblob" ]]; then
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set id=$upid, b1=NULL where id=$id\"" >> $bgtmpfl
        else
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t1 set id=$upid, b1=x'$bl' where id=$id\"" >> $bgtmpfl
        fi

    fi

    return 0
}

# Update a random record in t2
function update_rand_t2
{
    typeset db=$1
    typeset id

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id for t1
    id=$(( RANDOM % (maxt2 * 2) )) ; upid=$(( RANDOM % (maxt2 * 2) ))

    # Update a record, discard the result
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t2 set id=$upid where id=$id\""
        cdb2sql ${CDB2_OPTIONS} $db default "update t2 set id=$upid where id=$id"
    else
        cdb2sql ${CDB2_OPTIONS} $db default "update t2 set id=$upid where id=$id" >/dev/null 2>&1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then

        echo "cdb2sql ${CDB2_OPTIONS} $db default \"update t2 set id=$upid where id=$id\""  >> $bgtmpfl
    fi

    return 0
}

# Delete a random record in t1
function delete_rand_t1
{
    typeset db=$1
    typeset id
    typeset x

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id for t1
    x=$RANDOM ; id=$(( x % (maxt1 * 2) ))

    # Delete a record, discard the result
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"delete from t1 where id=$id\""
        cdb2sql ${CDB2_OPTIONS} $db default "delete from t1 where id=$id"
    else
        cdb2sql ${CDB2_OPTIONS} $db default "delete from t1 where id=$id" >/dev/null 2>&1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then

        echo "cdb2sql ${CDB2_OPTIONS} $db default \"delete from t1 where id=$id\"" >> $bgtmpfl

    fi

    return 0
}

# Delete a random record in t2
function delete_rand_t2
{
    typeset db=$1
    typeset id
    typeset x

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id for t1
    x=$RANDOM ; id=$(( x % ( maxt2 * 2) ))

    # Delete a record, discard the result
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"delete from t2 where id=$id\""
        cdb2sql ${CDB2_OPTIONS} $db default "delete from t2 where id=$id"
    else
        cdb2sql ${CDB2_OPTIONS} $db default "delete from t2 where id=$id" >/dev/null 2>&1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then

        echo "cdb2sql ${CDB2_OPTIONS} $db default \"delete from t2 where id=$id\"" >> $bgtmpfl

    fi

    return 0
}

# Perform some random writes
function randomwrites
{
    typeset iter=$1
    typeset ii=0

    # Say 'hello'.
    [[ "1" == "$bghlo" ]] && echo "Background writer executing."

    # Perform some random writes in a loop
    while [[ $ii -lt $iter ]]; do

        # Insert a record into t1
        [[ "1" == "$ins_t1" ]] && insert_rand_t1 $dbnm

        # Insert a record into t2
        [[ "1" == "$ins_t2" ]] && insert_rand_t2 $dbnm

        # Update a random record in t1
        [[ "1" == "$upd_t1" ]] && update_rand_t1 $dbnm

        # Update a random record in t1 without touching the blob
        [[ "1" == "$upd_noblob_t1" ]] && update_noblob_rand_t1 $dbnm

        # Update a random records blob without touching id
        [[ "1" == "$upd_onlyblob_t1" ]] && update_onlyblob_rand_t1 $dbnm

        # Update a random record in t2
        [[ "1" == "$upd_t2" ]] && update_rand_t2 $dbnm

        # Delete a record from t1
        [[ "1" == "$del_t1" ]] && delete_rand_t1 $dbnm

        # Delete a record from t2
        [[ "1" == "$del_t2" ]] && delete_rand_t2 $dbnm

        # Increment my counter
        let ii=ii+1

    done

    return 0
}

# Select and compare a cartesian product of tables t1 and t2
function selectcmp_cart_t1_t2
{
    typeset iter=$1
    typeset out
    typeset out2
    typeset tmfl
    typeset tmfl2
    typeset ckfl
    typeset docnt=0
    typeset maxrc=0

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a new-tmpfile for this select with a new name: we might want view.
    tmfl=${TMPDIR}/cdb2tst_cart_t1_t2.$$.tmp.$iter

    # Zero out this tmpfile.
    > $tmfl

    # For the check-file name
    ckfl=$(pwd)/cartesian_t1_t2.txt

    # Tell the co-process to redirect to the new tmpfile.
    echo "@redirect $tmfl" >&${COPROC[1]}

    # Perform the select.
    echo "select t2.id, t1.id, t1.b1 from t2, t1 for system_time as of '$asof' order by t2.id, t1.id" >&${COPROC[1]}

    # Tell the co-process to redirect to stdout.
    echo "@redirect" >&${COPROC[1]}

    # The count should be count-t1 * count-t2
    maxrc=$(( maxt1 * maxt2 ))

    # Only do a count for t1 if it's enabled.
    [[ "1" == "$cnt_t1_t2" ]] && docnt=1

    # Do a count if it's enabled.
    if [[ "1" == "$docnt" ]]; then

        # Get a count.
        echo "select count(*) from t2, t1 for system_time as of '$asof'" >&${COPROC[1]}

        # Block until both are done.
        read -ru ${COPROC[0]}  out

        # Sanity check the count.
        if [[ "$out" != "(count(*)=$maxrc)" ]] ; then

            # Do a little extra work if the 'subs_test' flag is lit.
            if [[ "1" == "$subs_test" ]]; then

                # Create the final tmpfile.
                tmfl2=$tmfl.final

                # Zero out this file.
                > $tmfl2

                # Tell the co-process to redirect to a new tmpfile.
                echo "@redirect $tmfl2" >&${COPROC[1]}

                # Do one more select so that we can see if this is 'sticky'.
                echo "select t2.id, t1.id, t1.b1 from t2, t1 for system_time as of '$asof' order by t2.id, t1.id" >&${COPROC[1]}

                # Tell the co-process to redirect to stdout.
                echo "@redirect" >&${COPROC[1]}

                # Get another count.
                echo "select count(*) from t2, t1 for system_time as of '$asof'" >&${COPROC[1]}

                # Block until done (again).
                read -ru ${COPROC[0]}  out2

                # Print subsequent count
                echo "A subsequent count returned this: $out2."

                # Print more information.
                echo "Compare testcase output: diff $tmfl2 $ckfl."

            fi

            # Print a bad error-message.
            echo "Unexpected count in snapisol session: $out."

            # Return a bad rcode
            return 1

        fi

    # Otherwise, block on something lightweight'ish.
    else

        # What time is it?
        echo "select now()" >&${COPROC[1]}

        # Block until this is done.
        read -ru ${COPROC[0]}  out

    fi

    # Diff this against our output
    diff $ckfl $tmfl

    # Check return code
    if [[ $? != 0 ]]; then

        # Print bad errmsg.
        echo "Incorrect select from snapisol session."

        # Tell the user how to see this.
        echo "Run 'diff $ckfl $tmfl' to see the error."

        # Return a bad rcode.
        return 1

    fi

    # Great- success!
    return 0
}

# Select and compare a cartesian product of tables t2 and t2
function selectcmp_cart_t2_t2
{
    typeset iter=$1
    typeset out
    typeset out2
    typeset tmfl
    typeset tmfl2
    typeset ckfl
    typeset docnt=0
    typeset maxrc=0

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a new-tmpfile for this select with a new name: we might want view.
    tmfl=${TMPDIR}/cdb2tst_cart_t2_t2.$$.tmp.$iter

    # Zero out this tmpfile.
    > $tmfl

    # For the check-file name
    ckfl=$(pwd)/cartesian_t2_t2.txt

    # Tell the co-process to redirect to the new tmpfile.
    echo "@redirect $tmfl" >&${COPROC[1]}

    # Perform the select.
    echo "select t.id, t2.id from t2 as t join t2 for system_time as of '$asof' order by t.id, t2.id" >&${COPROC[1]}

    # Tell the co-process to redirect to stdout.
    echo "@redirect" >&${COPROC[1]}

    # The count should be count-t1 * count-t2
    maxrc=$(( maxt2 * maxt2 ))

    # Only do a count for t1 if it's enabled.
    [[ "1" == "$cnt_t2_t2" ]] && docnt=1

    # Do a count if it's enabled.
    if [[ "1" == "$docnt" ]]; then

        # Get a count.
        echo "select count(*) from t2 as t join t2 for system_time as of '$asof'" >&${COPROC[1]}

        # Block until both are done.
        read -ru ${COPROC[0]}  out

        # Sanity check the count.
        if [[ "$out" != "(count(*)=$maxrc)" ]] ; then

            # Do a little extra work if the 'subs_test' flag is lit.
            if [[ "1" == "$subs_test" ]]; then

                # Create the final tmpfile.
                tmfl2=$tmfl.final

                # Zero out this file.
                > $tmfl2

                # Tell the co-process to redirect to a new tmpfile.
                echo "@redirect $tmfl2" >&${COPROC[1]}

                # Do one more select so that we can see if this is 'sticky'.
                echo "select t.id, t2.id from t2 as t join t2 for system_time as of '$asof' order by t.id, t2.id" >&${COPROC[1]}

                # Tell the co-process to redirect to stdout.
                echo "@redirect" >&${COPROC[1]}

                # Get another count.
                echo "select count(*) from t2 as t join t2 for system_time as of '$asof'" >&${COPROC[1]}

                # Block until done (again).
                read -ru ${COPROC[0]}  out2

                # Print subsequent count
                echo "A subsequent count returned this: $out2."

                # Print more information.
                echo "Compare testcase output: diff $tmfl2 $ckfl."

            fi

            # Print a bad error-message.
            echo "Unexpected count in snapisol session: $out."

            # Return a bad rcode
            return 1

        fi

    # Otherwise, block on something lightweight'ish.
    else

        # What time is it?
        echo "select now()" >&${COPROC[1]}

        # Block until this is done.
        read -ru ${COPROC[0]}  out

    fi

    # Diff this against our output
    diff $ckfl $tmfl

    # Check return code
    if [[ $? != 0 ]]; then

        # Print bad errmsg.
        echo "Incorrect select from snapisol session."

        # Tell the user how to see this.
        echo "Run 'diff $ckfl $tmfl' to see the error."

        # Return a bad rcode.
        return 1

    fi

    # Great- success!
    return 0
}

# Select and compare a cartesian product of t1 x t1 while walking an index on id.
function selectcmp_cart_ix1_ix1
{
    typeset iter=$1
    typeset out
    typeset out2
    typeset tmfl
    typeset tmfl2
    typeset ckfl
    typeset docnt=0
    typeset maxrc=0

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a new-tmpfile for this select with a new name: we might want view.
    tmfl=${TMPDIR}/cdb2tst_cart_ix1_ix1.$$.tmp.$iter

    # Zero out this tmpfile.
    > $tmfl

    # For the check-file name
    ckfl=$(pwd)/cartesian_ix1_ix1.txt

    # Tell the co-process to redirect to the new tmpfile.
    echo "@redirect $tmfl" >&${COPROC[1]}

    # Perform the select.
    echo "select t.id, t.b1, t1.id, t1.b1 from t1 as t join t1 for system_time as of '$asof' where t.id >= 0 and t1.id >= 0 order by t.id, t1.id" >&${COPROC[1]}

    # Tell the co-process to redirect to stdout.
    echo "@redirect" >&${COPROC[1]}

    # The count should be count-t1 * count-t2
    maxrc=$(( maxt1 * maxt1 ))

    # Only do a count for t1 if it's enabled.
    [[ "1" == "$cnt_ix1_ix1" ]] && docnt=1

    # Do a count if it's enabled.
    if [[ "1" == "$docnt" ]]; then

        # Get a count.
        echo "select count(*) from t1 as t join t1 for system_time as of '$asof' where t.id >= 0 and t1.id >= 0" >&${COPROC[1]}

        # Block until both are done.
        read -ru ${COPROC[0]}  out

        # Sanity check the count.
        if [[ "$out" != "(count(*)=$maxrc)" ]] ; then

            # Do a little extra work if the 'subs_test' flag is lit.
            if [[ "1" == "$subs_test" ]]; then

                # Create the final tmpfile.
                tmfl2=$tmfl.final

                # Zero out this file.
                > $tmfl2

                # Tell the co-process to redirect to a new tmpfile.
                echo "@redirect $tmfl2" >&${COPROC[1]}

                # Do one more select so that we can see if this is 'sticky'.
                echo "select t.id, t.b1, t1.id, t1.b1 from t1 as t join t1 for system_time as of '$asof' where t.id >= 0 and t1.id >= 0 order by t.id, t1.id" >&${COPROC[1]}

                # Tell the co-process to redirect to stdout.
                echo "@redirect" >&${COPROC[1]}

                # Get another count.
                echo "select count(*) from t1 as t join t1 for system_time as of '$asof' where t.id >= 0 and t1.id >= 0" >&${COPROC[1]}

                # Block until done (again).
                read -ru ${COPROC[0]}  out2

                # Print subsequent count
                echo "A subsequent count returned this: $out2."

                # Print more information.
                echo "Compare testcase output: diff $tmfl2 $ckfl."

            fi

            # Print a bad error-message.
            echo "Unexpected count in snapisol session: $out."

            # Return a bad rcode
            return 1

        fi

    # Otherwise, block on something lightweight'ish.
    else

        # What time is it?
        echo "select now()" >&${COPROC[1]}

        # Block until this is done.
        read -ru ${COPROC[0]}  out

    fi

    # Diff this against our output
    diff $ckfl $tmfl

    # Check return code
    if [[ $? != 0 ]]; then

        # Print bad errmsg.
        echo "Incorrect select from snapisol session."

        # Tell the user how to see this.
        echo "Run 'diff $ckfl $tmfl' to see the error."

        # Return a bad rcode.
        return 1

    fi

    # Great- success!
    return 0
}


# Select and compare data.
function selectcmp
{
    typeset tbl=$1
    typeset iter=$2
    typeset out
    typeset out2
    typeset tmfl
    typeset tmfl2
    typeset ckfl
    typeset docnt=0
    typeset maxrc=0
    typeset col="*"

    if [[ "t1" == "$tbl" ]]; then
        col="id, b1"
    else
        col="id"
    fi
    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a new-tmpfile for this select with a new name: we might want view.
    tmfl=${TMPDIR}/cdb2tst_$tbl.$$.tmp.$iter

    # Zero out this tmpfile.
    > $tmfl

    # For the check-file name
    ckfl=$(pwd)/select_${tbl}.txt

    # Tell the co-process to redirect to the new tmpfile.
    echo "@redirect $tmfl" >&${COPROC[1]}

    # Perform the select.
    echo "select $col from $tbl for system_time as of '$asof' order by id" >&${COPROC[1]}

    # Tell the co-process to redirect to stdout.
    echo "@redirect" >&${COPROC[1]}

    # Set the correct count for t1.
    [[ "$tbl" == "t1" ]] && maxrc=$maxt1

    [[ "$tbl" == "t2" ]] && maxrc=$maxt2

    # Only do a count for t1 if it's enabled.
    [[ "$tbl" == "t1" && "1" == "$cnt_t1" ]] && docnt=1

    # Only do a count for t2 if it's enabled.
    [[ "$tbl" == "t2" && "1" == "$cnt_t2" ]] && docnt=1

    # Do a count if it's enabled.
    if [[ "1" == "$docnt" ]]; then

        # Get a count.
        echo "select count(*) from $tbl for system_time as of '$asof'" >&${COPROC[1]}

        # Block until both are done.
        read -ru ${COPROC[0]}  out

        # Sanity check the count.
        if [[ "$out" != "(count(*)=$maxrc)" ]] ; then

            # Do a little extra work if the 'subs_test' flag is lit.
            if [[ "1" == "$subs_test" ]]; then

                # Create the final tmpfile.
                tmfl2=$tmfl.final

                # Zero out this file.
                > $tmfl2

                # Tell the co-process to redirect to a new tmpfile.
                echo "@redirect $tmfl2" >&${COPROC[1]}

                # Do one more select so that we can see if this is 'sticky'.
                echo "select $col from $tbl for system_time as of '$asof' order by id" >&${COPROC[1]}

                # Tell the co-process to redirect to stdout.
                echo "@redirect" >&${COPROC[1]}

                # Get another count.
                echo "select count(*) from $tbl for system_time as of '$asof'" >&${COPROC[1]}

                # Block until done (again).
                read -ru ${COPROC[0]}  out2

                # Print subsequent count
                echo "A subsequent count returned this: $out2."

                # Print more information.
                echo "Compare testcase output: diff $tmfl2 $ckfl."

            fi

            # Print a bad error-message.
            echo "Unexpected count in snapisol session: $out."

            # Return a bad rcode
            return 1

        fi

    # Otherwise, block on something lightweight'ish.
    else

        # What time is it?
        echo "select now()" >&${COPROC[1]}

        # Block until this is done.
        read -ru ${COPROC[0]}  out

    fi

    # Diff this against our output
    diff $ckfl $tmfl

    # Check return code
    if [[ $? != 0 ]]; then

        # Print bad errmsg.
        echo "Incorrect select from snapisol session."

        # Tell the user how to see this.
        echo "Run 'diff $ckfl $tmfl' to see the error."

        # Return a bad rcode.
        return 1

    fi

    # Great- success!
    return 0
}

function verify_results
{
    typeset iter=$1

    # Select everything from t1
    if [[ "1" == "$sel_t1" ]]; then
        selectcmp t1 $iter
        [[ "$?" != "0" ]] && errquit "Unexpected results selecting from t1 in a txn."
    fi

    # Select everything from t2
    if [[ "1" == "$sel_t2" ]]; then
        selectcmp t2 $iter
        [[ "$?" != "0" ]] && errquit "Unexpected results selecting from t2 in a txn."
    fi

    # Select the cartesian product of t2 x t1
    if [[ "1" == "$sel_t1_t2" ]]; then
        selectcmp_cart_t1_t2 $iter
        [[ "$?" != "0" ]] && errquit "Unexpected results selecting from t1 x t2 in a txn."
    fi

    # Select the cartesian product of t2 x t2
    if [[ "1" == "$sel_t2_t2" ]]; then
        selectcmp_cart_t2_t2 $iter
        [[ "$?" != "0" ]] && errquit "Unexpected results selecting from t2 x t2 in a txn."
    fi

    # Select the cartesin product of t1 x t1 (using the index)
    if [[ "1" == "$sel_ix1_ix1" ]]; then
        selectcmp_cart_ix1_ix1 $iter
        [[ "$?" != "0" ]] && errquit "Unexpected results selecting from ix1 x ix1 in a txn."
    fi
}

# Trap to errquit if the user presses Ctrl-C
trap "errquit \"Cancelling test on INT EXIT\"" INT EXIT

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
drop table if exists t1
create table t1 {
tag ondisk
{
   int  id
   blob b1 null=yes
   datetimeus s null=yes
   datetimeus e null=yes
}
keys
{
   "ID"  = id
}
periods
{
    system(s, e)
}
}\$\$
EOF

echo "sleep 5 sec"
sleep 5

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
drop table if exists t2
create table t2 {
tag ondisk
{
   longlong id
   datetimeus s null=yes
   datetimeus e null=yes
}
periods
{
    system(s, e)
}
}\$\$
EOF
echo "sleep 5 sec"
sleep 5

# If bgdebugging is enabled, print the filename.
if [[ "1" == "$bgdebug" ]]; then

    # Clear it out.
    > $bgtmpfl

    echo "Enabled 'background' debugging for writes in file '$bgtmpfl'."
fi

# Create an insert_t1.cfg
echo "Generating insert_t1.cfg."
gent1insert $maxt1 insert_t1.cfg

# Create insert_t2.cfg
echo "Generating insert_t2.cfg."
gent2insert $maxt2 insert_t2.cfg

# Insert records into t1.k
echo "Inserting records into t1."
[[ "0" == "$noins" ]] && cdb2sql ${CDB2_OPTIONS} $dbnm default - < insert_t1.cfg >/dev/null

# Insert records into t2.
echo "Inserting records into t2."
[[ "0" == "$noins" ]] && cdb2sql ${CDB2_OPTIONS} $dbnm default - < insert_t2.cfg >/dev/null

# Select t1 back.
echo "Selecting t1."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id, b1 from t1 order by id" > select_t1.txt

# Select t2 back.
echo "Selecting t2."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id from t2 order by id" > select_t2.txt

# Cartesian product between t1 & t2 to open two cursors at once.
echo "Selecting t2, t1 order by t2.id, t1.id."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select t2.id, t1.id, t1.b1 from t2, t1 order by t2.id, t1.id" > cartesian_t1_t2.txt

# Cartesian product between t2 & t2 to open two cursors on the same table.
echo "Selecting t2, t2."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select t.id, t2.id from t2 as t join t2 order by t.id, t2.id" > cartesian_t2_t2.txt

# Cartesian product between t1 & t1 to open two cursors on the same index.
echo "Selecting t1, t1 ordered by the index"
cdb2sql ${CDB2_OPTIONS} $dbnm default "select t.id, t.b1, t1.id, t1.b1 from t1 as t join t1 where t.id >= 0 and t1.id >= 0 order by t.id, t1.id" > cartesian_ix1_ix1.txt

# Use a local version of cdb2sql while testing '@redirect'
coproc stdbuf -oL cdb2sql -s ${CDB2_OPTIONS} $dbnm default -
cpid=$!
echo me: $$ COPROC $cppid fd in ${COPROC[0]} out ${COPROC[1]}

# Set the started-coprocess flag
stco=1
export COPROC

# Set the transaction level
echo "set transaction snapshot isolation" >&${COPROC[1]}

# Quick select count(*) sanity-check
echo "select count(*) from t1" >&${COPROC[1]}

# Read the result
read -ru ${COPROC[0]}  out

# Error out if we don't see what we expected
[[ "$out" != "(count(*)=$maxt1)" ]] && errquit \
        "Unexpected results from sql-cprocess (count should be $maxt1, not $out)"

echo "sleep 5 sec"
sleep 5

echo "select now()" >&${COPROC[1]}

# Read the result
read -ru ${COPROC[0]}  out

asof=`echo $out | awk '{print substr($0, 9, 17)}'`

echo "now is $asof"

# Reset my background writer pids.
ii=0

verify_results 0

# Print status message.
echo "Writing random records from $nwrts background processes."

# Start my background writers
while [[ $ii -lt $nwrts ]]; do

    # Start a loop of random-writes.
    randomwrites $randwr &

    # Retrieve the pid.
    bkpid[$ii]=$!

    # Increment.
    let ii=ii+1

done

# Print a status message.
echo "Select and verify temporal query results."

# Verify the pid in a loop.
while [[ "$bkcnt" != "0" ]];  do

    verify_results $iter

    # Increment iter.
    let iter=iter+1

    # Reset bkcnt.
    bkcnt=0

    # Reset counter.
    ii=0

    # Check my writer-pids in a loop.
    while [[ $ii -lt $nwrts ]]; do

        # Check the writer pid again
        if [[ "-1" != ${bkpid[$ii]} ]]; then

            # Is this still alive?
            ps -p ${bkpid[$ii]} >/dev/null 2>&1

            # It takes only one-runner to break out of the loop.
            if [[ $? == 0 ]] ; then

                # We found a running pid- increment bkcnt.
                let bkcnt=bkcnt+1

            else

                # Print a message while I'm debugging this.
                echo "Writer pid ${bkpid[$ii]} has completed."

                # Reset this so I don't keep checking for it.
                bkpid[$ii]=-1

            fi
        fi

        # Go to next pid
        let ii=ii+1

    done

done

# A final redirect for t1.
echo "@redirect $tmp1" >&${COPROC[1]}

# Perform the select.
echo "select id, b1 from t1 order by id" >&${COPROC[1]}

# Tell the co-process to redirect to stdout.
echo "@redirect" >&${COPROC[1]}

# Get a count.
echo "select count(*) from t1 '$asof'" >&${COPROC[1]}

# Block until done.
read -ru ${COPROC[0]}  out

# A final redirect for t2.
echo "@redirect $tmp2" >&${COPROC[1]}

# Perform the select.
echo "select id from t2 order by id" >&${COPROC[1]}

# Redirect back to stdout.
echo "@redirect" >&${COPROC[1]}

# Get a count.
echo "select count(*) from t2" >&${COPROC[1]}

# Block until done.
read -ru ${COPROC[0]}  out

# See if t1 was updated during this test.
wr_t1=$(( upd_t1 + del_t1 + ins_t1 ))

# Diff the current t1 against the original snapshot.
diff ./select_t1.txt $tmp1 >/dev/null 2>&1

# If this is the same, something went wrong.
if [[ "0" != "$wr_t1" && $? == 0 ]]; then

    # Print testcase is broken message.
    echo "Testcase is broken: the post-commit t1 should have changed."

    # Tell the user how to see this.
    echo "Run 'diff $(pwd)/select_t1.txt $tmp1' to see the error."

    # Return a bad rcode.
    rcode=1

fi

# See if t2 was updated during this test.
wr_t2=$(( upd_t2 + del_t2 + ins_t2 ))

# Diff the current t2 against the original snapshot.
diff ./select_t2.txt $tmp2 >/dev/null 2>&1

# If this is the same, this testcase is broken.
if [[ "0" != "$wr_t2" && $? == 0 ]]; then

    # Print testcase is broken message.
    echo "Testcase is broken: the post-commit t2 should have changed."

    # Tell the user how to see this.
    echo "Run 'diff $(pwd)/select_t2.txt $tmp2' to see the error."

    # Return a bad rcode.
    rcode=1

fi

# Quit the co-process.
echo "quit" >&${COPROC[1]}

# Remove trap-command.
trap - INT EXIT

# If we made it here we passed.
if [[ "$rcode" == "0" ]]; then
    # Print a final message.
    echo "Testcase passed."
fi

exit $rcode

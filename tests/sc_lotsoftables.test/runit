#!/usr/bin/env bash
bash -n "$0" | exit 1

source ${TESTSROOTDIR}/tools/runit_common.sh
source ${TESTSROOTDIR}/tools/cluster_utils.sh

dbnm=$1
tblcnt=100

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


function insert_records
{
    tbl=$1
    nstop=$2 # enter $2 items
    j=1
    let nins=nins+1
    insfl=insert${tbl}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        echo "insert into $tbl(a,b,c,d,e) values ($((j+10000)),'test1$j',$j,$j,'abc$j')" 
        let j=j+1
    done | cdb2sql ${CDB2_OPTIONS} $dbnm default - &>> $insfl
    assertres $? 0
}

function wait_till_ready
{
    node=$1
    out=0
    # wait until we can query it
    echo "$DBNAME: waiting until ready"
    while [[ "$out" != "1" ]]; do
        sleep 2
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
    done
}

kill_restart_cluster()
{
    delay=$1
    for node in $cluster ; do
        echo "killrestart nodes $node"
        kill_restart_node $node $delay &
    done
    sleep $delay
    # select 1 all nodes
    for node in $cluster ; do
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        # wait until we can query it
        echo "$DBNAME: waiting until ready"
        while [[ "$out" != "1" ]]; do
            sleep 2
            out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        done
    done
}

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `

function flushall 
{
    for node in $cluster; do
        cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('flush')"
    done
}



PRFIX=my_table_name_
master=`cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`
#cdb2sql ${CDB2_OPTIONS} $dbnm --host $master "exec procedure sys.cmd.send('bdb setattr DELAYED_OLDFILE_CLEANUP 0')"

echo "Test with insert, SC should not fail"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table ${PRFIX}0 { `cat t1_1.csc2 ` }"
assertres $? 0

echo "real time creating"
#cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('debg 500')"
for i in `seq 1 $tblcnt`; do
  echo "create t$i: "
  time cdb2sql ${CDB2_OPTIONS} $dbnm default "create table ${PRFIX}$i  { `cat t1_1.csc2 ` }"
  assertres $? 0
  insert_records ${PRFIX}$i $i
  #flushall
done

echo "real time truncating"
for i in `seq 1 20`; do
  echo "truncate ${PRFIX}0"
  time cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate ${PRFIX}0"
  
  if [ $((i % 5)) == 0 ] ; then
      echo delfiles ${PRFIX}0
      time cdb2sql ${CDB2_OPTIONS} $dbnm --host $master "exec procedure sys.cmd.send('delfiles ${PRFIX}0')" &> delfiles.out
  fi
  insert_records ${PRFIX}0 1
done

echo "real time dropping"
for i in `seq 1 $tblcnt`; do
    assertcnt ${PRFIX}$i $i
    time cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table ${PRFIX}$i"
    #echo rebuild t1
    #time cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild t1"
    #assertcnt t$i $i
    #assertcnt t1 1
    #flushall
done

#RESTART_DELAY=35
#echo "killrestart all nodes"
#kill_restart_cluster $RESTART_DELAY

#    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('bdb setattr MIN_KEEP_LOGS 1')"
#    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('bdb setattr MIN_KEEP_LOGS_AGE 10')"
#    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('bdb setattr PRIVATE_BLKSEQ_MAXAGE 10')"
#sleep 20


#for i in `seq 0 $tblcnt`; do
#    assertcnt t$i $i
#    cdb2sql ${CDB2_OPTIONS} $dbnm --host $master "exec procedure sys.cmd.send('delfiles t$i ')"
#done


#create tables with increasing longer tablenames
test_create_tbls() {
    i=0
    tbl="f"
    while [ $i -lt 30 ] ; do
        tbl=$tbl$((i%10))
        $CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "create table $tbl (i int unique, b blob)"
        assertres $? 0
        val=$RANDOM
        $CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm default "insert into $tbl values ($val, NULL)"
        res=`$CDB2SQL_EXE ${CDB2_OPTIONS} $dbnm --tabs default "select i from $tbl"`
        assertres $res $val
        let i=i+1
    done

}

test_create_tbls

if [[ -n "$CLUSTER" ]] ; then
    cdb2sql ${CDB2_OPTIONS} $dbnm --host master 'exec procedure sys.cmd.send("downgrade")'
    for node in "$CLUSTER" ; do
        wait_till_ready $node
    done
fi


echo "Success"

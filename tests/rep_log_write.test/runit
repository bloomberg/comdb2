#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ "$debug" == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/runit_common.sh

export stopfile=./stopfile.txt

function create_table
{
    typeset func=create_table
    write_prompt $func "Creating table"
    $CDB2SQL_EXE -s --cdb2cfg ${CDB2_CONFIG} ${DBNAME} default "create table t1 (a int)" >/dev/null 2>&1
    [[ "$?" == "0" ]] && write_prompt $func "Created table t1"
}

function findmaster
{
    $CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default 'select host from comdb2_cluster where is_master="Y"'
}

function exitcluster
{
    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS --host $node $DBNAME "exec procedure sys.cmd.send('exit')";
    done
}

function verify_up
{
    typeset maxtry=10
    typeset j=0
    typeset failed=1

    while [[ "$failed" == "1" && $j -lt "$maxtry" ]]; do
        failed=0

        for n in $CLUSTER; do
            $CDB2SQL_EXE $CDB2_OPTIONS --host $n $DBNAME "select 1"
            r=$?
            if [[ "$r" != 0 ]]; then
                echo "Verify-up failed to select against node $n, iteration $j of $maxtry"
                failed=1
            fi
        done
        let j=j+1
        if [[ "$failed" == 1 ]]; then
            sleep 3
        fi
    done
    if [[ "$failed" == "1" ]] ; then
        touch $stopfile
        exitcluster
        failexit "database is not up"
    fi
}

function exit_restart_cluster
{
    typeset sltime=${1:-5}

    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS --host $node $DBNAME "exec procedure sys.cmd.send('exit')";
        sleep $sltime
        x=$(egrep "not master and not in recovery" $TESTDIR/logs/${DBNAME}.${node}.db)
        if [[ $? == 0 ]]; then
            touch $stopfile
            exitcluster
            failexit "Replicant emitted log-record"
            return
        fi
        #incoherent_slow.test/runit

        PARAMS="$DBNAME --no-global-lrl"
        CMD="source ${REP_ENV_VARS} ; ${COMDB2_EXE} ${PARAMS} --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/${DBNAME}.pid"
        LOGDIR=$TESTDIR/logs

        if [ $node == $(hostname) ] ; then

        (
            #kill -9 $(cat ${TMPDIR}/${DBNAME}.${node}.pid)
            mv --backup=numbered $LOGDIR/${DBNAME}.db $LOGDIR/${DBNAME}.db.1
            ${DEBUG_PREFIX} ${COMDB2_EXE} ${PARAMS} --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/${DBNAME}.${node}.pid 2>&1 | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >$TESTDIR/logs/${DBNAME}.${node}.db 2>&1
        ) &

        else
            #kill -9 $(cat ${TMPDIR}/${DBNAME}.${node}.pid)
            mv --backup=numbered $LOGDIR/${DBNAME}.${node}.db $LOGDIR/${DBNAME}.${node}.db.1
            ssh -o StrictHostKeyChecking=no -tt $node ${DEBUG_PREFIX} ${CMD} 2>&1 </dev/null > >(gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >> $TESTDIR/logs/${DBNAME}.${node}.db) &
            echo $! > ${TMPDIR}/${DBNAME}.${node}.pid

        fi
    done
}

function run_test
{
    typeset maxtime=`echo "(${TEST_TIMEOUT%%m}-2)*60" | bc`
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))
    typeset func=run_test
    typeset logtarget=10
    rm -f $stopfile >/dev/null 2>&1
    create_table

    while [[ ! -f $stopfile && "$(date +%s)" -lt "$endtime" ]]; do
        master=$(findmaster)
        echo "MASTER is $master"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)";
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate t1";
        $CDB2SQL_EXE $CDB2_OPTIONS --host $master $DBNAME "exec procedure sys.cmd.send('downgrade')";
        sleep 10
		exit_restart_cluster
        sleep 3
        verify_up
    done
}

[[ -z "$CLUSTER" ]] && failexit "this test requires a cluster"
run_test

# Because we bounce we have to exit cluster explicitly
exitcluster

echo "Success!"

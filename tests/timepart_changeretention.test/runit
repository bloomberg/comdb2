#!/usr/bin/env bash
bash -n "$0" | exit 1

# Time partition testcase for comdb2
################################################################################

set -x

# args
# <dbname>
dbname=$1

cmd="cdb2sql ${CDB2_OPTIONS} $dbname default"
cmdt="cdb2sql -tabs ${CDB2_OPTIONS} $dbname default"
master=`${cmdt} 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`
cmdm="cdb2sql ${CDB2_OPTIONS} --host $master $dbname default"
OUT="run.log"

rm $OUT 2>/dev/null
touch $OUT


function timepart_stats
{
    set - x
    # check the current partitions 
    echo ${cmdt} "exec procedure sys.cmd.send('partitions')" | egrep -v "STARTTIME|LOW|HIGH|SOURCE_ID" >> $OUT
    ${cmdt} "exec procedure sys.cmd.send('partitions')" | egrep -v "STARTTIME|LOW|HIGH|SOURCE_ID" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo ${cmd} "select name, period, retention, nshards, version,shard0name from comdb2_timepartitions " >> $OUT
     ${cmd} "select name, period, retention, nshards, version,shard0name from comdb2_timepartitions " >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo ${cmd} "select name, shardname from comdb2_timepartshards" >> $OUT
     ${cmd} "select name, shardname from comdb2_timepartshards" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    #randomly we catch a drop event here; sleep to skip the deterministically
    sleep 6
    echo ${cmdm} "select name, arg1, arg2, arg3 from comdb2_timepartevents order by name, arg1" 
    ${cmdm} "select name, arg1, arg2, arg3 from comdb2_timepartevents" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi
}

function create_partition()
{
    ${cmd} "create table if not exists t(a int)"
    if (( $? != 0 )) ; then
        echo "FAILURE recreating the original table t"
        exit 1
    fi
    echo ${cmd} "CREATE TIME PARTITION ON t as ${VIEW1} PERIOD 'daily' RETENTION 2 START '$1 UTC'" 
    ${cmd} "CREATE TIME PARTITION ON t as ${VIEW1} PERIOD 'daily' RETENTION 2 START '$1 UTC'" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE creating partition ${VIEW1} delay $delay"
        exit 1
    fi
    #time to roll into present
    sleep 15
    timepart_stats
}

function increase_retention()
{
    ${cmd} "put time partition ${VIEW1} retention $1"

    #wait for a rollout 
    sleep ${RELATIVE_TM}

    timepart_stats
}

function delete_partition()
{
    # destroy partition
    echo ${cmd} "DROP TIME PARTITION ${VIEW1}" >> $OUT
    ${cmd} "DROP TIME PARTITION ${VIEW1}" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    ${cmdt} "select name from sqlite_master where type='table' and name like '$%'" | while read t; do ${cmd} "drop table '$t'"; done
    if (( $? != 0 )) ; then
        echo "FAILURE deleting the partition shards"
        exit 1
    fi

    timepart_stats
}

# create the partition
VIEW1="tv1"
RELATIVE_TM=60

echo "Creating partition starting now" >> $OUT
starttime=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()+60)'`
echo $starttime
create_partition $starttime

echo "Increasing retention 2 -> 3, one shard" >> $OUT
increase_retention 3

echo "Deleting partition" >> $OUT
delete_partition

VIEW1="tv2"

echo "Creating partition starting one day ahead" >> $OUT
starttime=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()-24*3600+60)'`
echo $starttime
create_partition $starttime

echo "Increasing retention 2 -> 4, two shards" >> $OUT
increase_retention 4

echo "Deleting partition" >> $OUT
delete_partition

VIEW1="tv3"

echo "Creating partition starting two days ahead" >> $OUT
starttime=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()-2*24*3600+60)'`
echo $starttime
create_partition $starttime

echo "Increasing retention 2 -> 3, one shard" >> $OUT
increase_retention 3

echo "Deleting partition" >> $OUT
delete_partition

VIEW1="tv4"

echo "Creating partition starting three days ahead" >> $OUT
starttime=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()-3*24*3600+60)'`
echo $starttime
create_partition $starttime

echo "Increasing retention 2 -> 4, two shards" >> $OUT
increase_retention 4

echo "Deleting partition" >> $OUT
delete_partition

VIEW1="tv5"

echo "Creating partition starting four days ahead" >> $OUT
starttime=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()-4*24*3600+60)'`
echo $starttime
create_partition $starttime

echo "Increasing retention 2 -> 3, one shard" >> $OUT
increase_retention 3

echo "Deleting partition" >> $OUT
delete_partition


# we need to scrub dbname from alpha
sed "s/dorintdb/$dbname/g; s#\${CDB2_OPTIONS}#${CDB2_OPTIONS}#g" $OUT.alpha > $OUT.alpha.actual


difs=`diff $OUT $OUT.alpha.actual`
if [[ ! -z "${difs}" ]] ; then
   echo "diff $OUT $OUT.alpha.actual"
   echo ${difs}
   echo "FAILURE"
   exit 1
fi

echo "SUCCESS"

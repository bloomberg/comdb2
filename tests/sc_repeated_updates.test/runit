#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

# Grab my database name.
if [[ "x${DBNAME}" == "x" ]] ; then
    echo "need a DB name"
    exit 1
fi

rebuild=1
if [[ "x$2" == "xnorebuild" ]] ; then
    rebuild=0
fi

tbl=t2


# Number of records I will add.
nrecs=0

# Max number of schema changes
max_nusc=1000
upid=0


function checkfailexit
{
    if [[ -f ${DBNAME}.failexit ]] ; then
        exit 1
    fi
}


# this should start incrementally adding new indices, and then repeat rebuild
function do_rebuild_track_pid
{
    typeset loc_dbname=$1
    typeset loc_tbl=$2
    typeset track_pid=$3
    typeset scnt=0
    typeset loc_sleeptm=`echo "scale=0;l($nrecs)/l(100)" | bc -l `
    while `kill -0 $track_pid 2>/dev/null` && [[ $scnt -lt $max_nusc ]]; do

        echo "Running rebuild iteration $scnt"
        $CDB2SQL_EXE ${CDB2_OPTIONS} $loc_dbname default "rebuild $loc_tbl"

        if [[ $? != 0 ]]; then
            failexit "Error schema-changing on iteration $scnt. Testcase failed."
        fi

        checkfailexit
        do_verify $loc_tbl
        let scnt=scnt+1
        #sleep $loc_sleeptm
    done
    wait

    echo "Performed $scnt schema-changes."

    return 0
}




# same record gets repeatedly updated before moving to next record
function update_same_record
{
    nrep=30
    echo -e "\nupdate_same_record: Updating same record in background (update1)"

    let i=$nrecs
    while [[ $i -gt 0 ]]; do
      let j=0
      while [[ $j -lt $nrep ]]; do 
        echo "update $tbl set d=d+1 where a = $i"
        let j=j+1
      done
      let i=i-1
    done | $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default &> update1.out || failexit "update_same_record: failure to update, see update1.out"

    assertcnt $tbl $nrecs "update_same_record"
    do_verify $tbl "done with update_same_record"
    succ=`grep -c "rows updated=1" update1.out`
    if [[ $succ -ne $((nrep*nrecs)) ]] ; then
	    failexit "update_same_record: all $((nrep*nrecs)) should have resulted in successful update instead of $succ"
    fi
    echo "update_same_record: Done (update1)"
}


function update_same_record_fail
{
    j=0
    nrepeat=1000
    echo
    echo "update_same_record_fail: Updating same record resulting in failure for dups (update3)"

    while [[ $j -lt $nrepeat ]]; do
        echo "update $tbl set d=d+1 where a = 10"
        let j=j+1
    done | $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default &> update3.out
    assertcnt $tbl $nrecs "update_same_record_fail"

    failed=`grep -c failed update3.out`
    if [[ $failed -ne $((nrepeat-1)) ]] ; then #only first update should succeed
        failexit "update_same_record_fail: number failed is only $failed -ne $((nrepeat-1))"
    fi
    echo "update_same_record_fail: Done (update3)"
}



# same as update_same_record except the order of the while loop is reversed
function update_records
{
    t=0
    echo
    echo "update_records: Updating $nrecs records (update2)"

    #do this n times
    nrepeat=30
    while [[ $t -lt $nrepeat ]]; do 
        let j=1
        while [[ $j -le $nrecs ]]; do 
            echo "update $tbl set d=d+1, e=e+$nrecs where a = $j"
            let j=j+1
            #sleep 0.1
        done
        let t=t+1
    done | $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default &> update2.out || failexit "update_records: failure to update, see oupdate2.out"
    assertcnt $tbl $nrecs "update_records"
    do_verify $tbl "done with update_records"

    succ=`grep -c "rows updated=1" update2.out`
    if [[ $succ -ne $((nrecs*nrepeat)) ]] ; then
        failexit "update_records: all $((nrecs*nrepeat)) should have resulted in successful update instead of $succ"
    fi

    echo "update_records: Done (update2)"
}


function update_records_fail
{
    j=1
    dist=10
    echo
    echo "update_records_fail: Updating $nrecs records will fail for dup (update4)"

    while [[ $j -le $((nrecs-dist)) ]]; do 
        echo "update $tbl set d=d+1, e=e+$dist where a = $j"
        let j=j+1
        #sleep 0.1
    done | $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default &> update4.out
    assertcnt $tbl $nrecs "update_records_fail"

    failed=`grep -c failed update4.out`
    if [[ $failed -ne $((nrecs-dist)) ]] ; then
        failexit "update_records_fail: number failed is only $failed -ne $((nrecs-dist))"
    fi

    echo "update_records_fail: Done (update4)"
}

function prepare
{
    $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default "drop table if exists $tbl"
    $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default "create table $tbl { `cat ${tbl}_1.csc2` }"

    echo "Insert $nrecs records"
    $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default "insert into $tbl(a,b,c,d,e,f) select value,'test1',x'1234',value*2, value, value from generate_series(1,$nrecs)"
    assertcnt $tbl $nrecs "Prepare"
    do_verify $tbl "After insert"
}

function run_test
{
    typeset upid=''
    nrecs=$1
    set -e

    prepare

    update_same_record &
    upid=$!

    $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default "alter table $tbl { `cat ${tbl}_2.csc2` }"
    do_verify $tbl "Added indices"

    if [[ $rebuild -eq 1 ]] ; then
        do_rebuild_track_pid ${DBNAME} $tbl $upid
    fi
    wait
    checkfailexit


    $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default "alter table $tbl { `cat ${tbl}_1.csc2` }"
    do_verify $tbl "Back to no indices"
    update_records &
    upid=$!

    $CDB2SQL_EXE ${CDB2_OPTIONS} ${DBNAME} default "alter table $tbl { `cat ${tbl}_2.csc2` }"
    do_verify $tbl "Added indices"

    if [[ $rebuild -eq 1 ]] ; then
        do_rebuild_track_pid ${DBNAME} $tbl $upid
    fi
    wait
    checkfailexit


    # this relies on keys being there to fail
    update_same_record_fail &
    upid=$!

    if [[ $rebuild -eq 1 ]] ; then
        do_rebuild_track_pid ${DBNAME} $tbl $upid
    fi
    wait
    checkfailexit

    # this relies on keys being there to fail
    update_records_fail &
    upid=$!

    if [[ $rebuild -eq 1 ]] ; then
        do_rebuild_track_pid ${DBNAME} $tbl $upid
    fi
    wait
    checkfailexit
}

echo "running test in machine $(hostname):${PWD}"
sendtocluster "PUT SCHEMACHANGE COMMITSLEEP 1"
sendtocluster "PUT SCHEMACHANGE CONVERTSLEEP 1"
master=`getmaster`

$CDB2SQL_EXE -s ${CDB2_OPTIONS} ${DBNAME} --host $master "exec procedure sys.cmd.send('goslow')"

for g in 100 200 400 ; do 
    echo "run_test $g"
    $CDB2SQL_EXE -s ${CDB2_OPTIONS} ${DBNAME} --host $master "exec procedure sys.cmd.send('setipu $tbl on')" || failexit "Error while turning ipu on"
    run_test $g
    $CDB2SQL_EXE -s ${CDB2_OPTIONS} ${DBNAME} --host $master "exec procedure sys.cmd.send('setipu $tbl off')" || failexit "Error while turning ipu off"
    run_test $g
    let g=g+g
done

echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

function prefer_new_index
{
    # Make sure that if both indexes exist, the client prefers the new index
    master=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y'")
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master - <<'EOF'
create table tt(a int index, b int index, c int index, d int index, e int index)$$
insert into tt select value, value, value, value, value from generate_series(1, 10000)$$
analyze tt
EOF
    # Verify that this produces both old and new stats

}

# This version creates both stats, so this test should succeed trivially
function verify_map
{
    # Avoid dumb races by always going to the master
    master=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y'")

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master - <<'EOF'
create table t(i int index)$$
insert into t select value from generate_series(1, 1000)
analyze t
delete from sqlite_stat1 where tbl = 't' and idx != 't_ix_0'
delete from sqlite_stat4 where tbl = 't' and idx != 't_ix_0'
create table u(i int index)$$
insert into u select value from generate_series(1, 1000)
delete from sqlite_stat1 where tbl = 'u' and idx = 't_ix_0'
delete from sqlite_stat4 where tbl = 'u' and idx = 't_ix_0'
analyze u
EOF

#     $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master - <<'EOF'
# create table t(i int index)$$
# insert into t select value from generate_series(1, 1000)
# analyze t
# update sqlite_stat1 set idx='t_ix_0'
# update sqlite_stat4 set idx='t_ix_0'
# create table u(i int index)$$
# insert into u select value from generate_series(1, 1000)
# update sqlite_stat1 set idx='$$KEY_3AA4168B_3AA4168B' where idx = 't_ix_0'
# update sqlite_stat4 set idx='$$KEY_3AA4168B_3AA4168B' where idx = 't_ix_0'
# analyze u
# EOF
# 
    # before analyze->dbopen this stat4dump would fail to find any records
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('stat4dump')")
    echo "$x"

    # This needs both 'idx:u' and 'idx:t'
    y=$(echo "$x" | grep "idx:u")
    if [[ -z "$y" ]]; then
        echo "Testcase failed - no idx:u"
        exit 1
    fi

    y=$(echo "$x" | grep "idx:t")
    if [[ -z "$y" ]]; then
        echo "Testcase failed - no idx:t"
        exit 1
    fi
    
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "drop table t"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "drop table u"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "truncate sqlite_stat1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "truncate sqlite_stat4"
}

function run_test
{
    echo "verify_map"
    verify_map

    echo "Success!"
}

run_test

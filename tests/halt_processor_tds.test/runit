#!/bin/bash

#export debug=1
[[ "$debug" == 1 ]] && set -x

# test requires a cluster
needcluster=1
db=$1

# insert metrics
insert_granularity=1000
insert_count=5
insert_sleep=.5

# update metrics
update_granularity=1000
update_count=5
update_sleep=.5

# number of master bounces
master_bounces=5

# length of processor thread poll
processor_thd_polltime_ms=700

# writer threads will stop when they see this file
stop_file=./testcase.done

if [[ "$needcluster" = "1" && -z "$CLUSTER" ]]; then
    echo "This test is only relevant for a CLUSTERED installation."
    exit 1
fi

if [[ -z "$stage" ]]; then
    echo "Setting stage to 'default' (set 'stage' var to override)."
    stage="default"
fi

function createtables
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    cdb2sql ${CDB2_OPTIONS} $db $stage "create table t1 {schema{int id int val null=yes} keys{ dup \"id\" = id }}" >/dev/null 2>&1
}

function exitdatabase
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    if [[ -n "$CLUSTER" ]]; then
        for node in $CLUSTER; do
            kill -9 $(cat ${TMPDIR}/${db}.${node}.pid)
        done
    else
        kill -9 $(cat ${TMPDIR}/${db}.pid)
    fi
}

function update_records_loop
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    sleeptime=$1

    while [[ ! -f $stop_file ]]; do
        cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 1 where 1 limit $update_granularity"
        sleep $sleeptime
    done
}

function insert_records_loop
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    fname=$1
    sleeptime=$2

    while [[ ! -f $stop_file ]]; do
        cdb2sql ${CDB2_OPTIONS} $db $stage - < $fname 2>/dev/null
        sleep $sleeptime
    done
}

function block_until_connected
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    timeout=$1
    starttime=$(date +%s)
    err=1
    while [ $err -ne 0 ] ; do 
        err=0
        for node in $CLUSTER ; do
            cdb2sql ${CDB2_OPTIONS} $db default --host $node "select 1"
            if [[ $? != 0 ]]; then 
                err=1
            fi
        done
        sleep 1
        nowtime=$(date +%s)
        if (( nowtime - starttime >= timeout )) ; then
            echo "${FUNCNAME[0]} timed out"
            return 1
        fi
    done
}

function bounce_master
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    master=`cdb2sql -tabs ${CDB2_OPTIONS} $db default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]' `
    PARAMS="$db --no-global-lrl"
    CMD="source ${TESTDIR}/replicant_vars ; ${COMDB2_EXE} ${PARAMS} --lrl $DBDIR/${db}.lrl -pidfile ${TMPDIR}/${db}.pid"
    if [[ -n "$master" ]]; then
        if [ $master == $(hostname) ]; then
            (
                kill -9 $(cat ${TMPDIR}/${db}.${node}.pid)
                ${DEBUG_PREFIX} ${COMDB2_EXE} ${PARAMS} --lrl $DBDIR/${db}.lrl -pidfile ${TMPDIR}/${db}.${node}.pid 2>&1 | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >$TESTDIR/logs/${db}.${node}.db 2>&1
            ) &
        else
            kill -9 $(cat ${TMPDIR}/${db}.${master}.pid)
            ssh -o StrictHostKeyChecking=no -tt $master ${DEBUG_PREFIX} ${CMD} 2>&1 </dev/null > >(gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >> $TESTDIR/logs/${db}.${master}.db) &
            echo $! > ${TMPDIR}/${db}.${master}.pid
        fi
    fi
}

function runtest
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x

    fname=insert.sql

    echo "BEGIN" > $fname
    i=0

    while [[ $i -lt $insert_granularity ]]; do
        echo "INSERT INTO t1 (id) VALUES (1)" >> $fname
        let i=i+1
    done

    echo "COMMIT" >> $fname

    rm $stop_file

    pidlist=""

    # Insert a bunch of records
    i=0
    while [[ $i -lt $insert_count ]]; do
        insert_records_loop $fname $insert_sleep &
        pidlist="$pidlist $!"
        let i=i+1
    done

    # Update a bunch of records
    i=0
    while [[ $i -lt $update_count ]]; do
        update_records_loop $update_sleep &
        pidlist="$pidlist $!"
        let i=i+1
    done

    # Poll for 10 seconds in the processor thread 
    for node in $CLUSTER; do
        cdb2sql ${CDB2_OPTIONS} $db default --host $node "PUT TUNABLE processor_thd_poll $processor_thd_polltime_ms"
    done

    let j=0

    while [[ $j -lt $master_bounces ]] ; do 

        block_until_connected 10
        bounce_master

        for node in $CLUSTER; do
            cdb2sql ${CDB2_OPTIONS} $db default --host $node "PUT TUNABLE processor_thd_poll $processor_thd_polltime_ms"
        done

        sleep 1
        let j=j+1
    done

    for node in $CLUSTER; do
        cdb2sql ${CDB2_OPTIONS} $db default --host $node "PUT TUNABLE processor_thd_poll 0"
    done

    block_until_connected 100
    for node in $CLUSTER; do
        cdb2sql ${CDB2_OPTIONS} $db default --host $node "PUT TUNABLE processor_thd_poll 0"
    done

    touch $stop_file
    sleep 10

    for x in $pidlist; do
        kill -9 $x
    done

    wait -n $pidlist
    rm $fname

    err=0

    block_until_connected 20

    # If all nodes are still up then we are cool
    for node in $CLUSTER; do
        cdb2sql ${CDB2_OPTIONS} $db default --host $node "select 1" > /dev/null 2>&1
        if [[ $? != 0 ]]; then
            echo "ERROR SELECTING FROM NODE $node"
            cdb2sql ${CDB2_OPTIONS} $db default --host $node "select 1"
            err=1
        fi
    done

    if [[ $err != 0 ]]; then
        echo "Testcase failed"
        exitdatabase
        exit 1
    fi
}

function checkforcorruption
{
    [[ "$debug" == 1 ]] && echo "START ${FUNCNAME[0]}" && set -x
    egrep -i "Log sequence error" $TESTDIR/logs/*db
    if [[ $? == 0 ]]; then
        echo "CORRUPTED DATABASE, LOG SEQUENCE ERROR.  TEST FAILED"
        exit 1
    fi

    egrep -i "Recovery function" $TESTDIR/logs/*db | egrep -i failed
    if [[ $? == 0 ]]; then
        echo "RECOVERY FUNCTION FAILED.  TEST FAILED"
        exit 1
    fi

    egrep -i "transaction failed at" $TESTDIR/logs/*db | egrep -i failed
    if [[ $? == 0 ]]; then
        echo "WORKER THREAD FAILED.  TEST FAILED"
        exit 1
    fi
}

createtables
runtest
exitdatabase
checkforcorruption

echo "Success"
exit 0

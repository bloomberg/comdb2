#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x
. ${TESTSROOTDIR}/tools/runit_common.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

function stop_cluster
{
    for node in $CLUSTER ; do
        $CDB2SQL_EXE -admin $CDB2_OPTIONS --tabs $DBNAME --host $node "exec procedure sys.cmd.send(\"exit\")"
    done
    sleep 5

    for node in $CLUSTER ; do
        if [ $node == $(hostname) ] ; then
            kill -9 $(cat ${TMPDIR}/${DBNAME}.${node}.pid)
        else
            kill -9 $(cat ${TMPDIR}/${DBNAME}.${node}.pid)
        fi
    done
}

function stop_exit
{
    stop_cluster
    failexit
}

function bounce_cluster
{
    typeset count=0
    typeset err=1
    for node in $CLUSTER ; do
        bounce_node $node 1 >/dev/null 2>&1
    done

    while [[ "$count" -lt 100 && "$err" -ne "0" ]]; do
        err=0
        for node in $CLUSTER ; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1" >/dev/null 2>&1
            r=$?
            if [[ $r != 0 ]]; then
                err=1
            fi
        done
        [[ "$err" != 0 ]] && sleep 1
    done
    if [[ "$err" != 0 ]]; then
        stop_exit
    fi
}

function runsql
{
    $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "$1"
    x=$?
    if [[ $x != 0 ]] ; then
        echo "Error running $1, rcode=$x"
        stop_exit
    fi
}

function runsqlfail
{
    $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "$1"
    x=$?
    if [[ $x == 0 ]] ; then
        echo "Error $1 should have failed"
        stop_exit
    fi
}

runsql "create table t1(b byte(512) unique)"
runsql "insert into t1 values(randomblob(512))"

runsql "create table t2 {schema {cstring a[10]}}"
runsql "create index t2_a on t2(a)"
runsql "insert into t2 values(\"123456789\")"
runsqlfail "insert into t2 values(\"1234567890\")" # Exceeds length w terminator

runsql 'create table t3 {schema {cstring a[512]}}'
runsql 'create index t3_a on t3(a)'

runsql 'create table t4 {schema {cstring a[513]}}'
runsqlfail 'create index t4_a on t4(a)' # Index exceeds max length

# Verify this comes up after bounce
bounce_cluster

# Retry sanity checks
runsql "insert into t1 values(randomblob(512))"
runsql "insert into t2 values(\"123456789\")"
runsqlfail "insert into t2 values(\"1234567890\")"
runsqlfail 'create index t4_a on t4(a)'

stop_cluster

echo "Success"

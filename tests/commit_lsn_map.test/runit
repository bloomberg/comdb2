#!/usr/bin/env bash
bash -n "$0" | exit 1
source ${TESTSROOTDIR}/tools/cluster_utils.sh
source ${TESTSROOTDIR}/tools/runit_common.sh
source ./error.sh

# Grab my database name.
dbnm=$1

# Try this many times to see an archive 
seen_iter=${2:-300}

# Try this many times to see an archive 
clean_iter=${3:-10}

# Let the testcase timeout fail us
target=5

seen_count=0
seen_archives=0
seen_clear=0

kill_wait_time=10

CKP_RECTYPE=11
CKP_UTXNID_RECTYPE=2011

count=0
cdb2sql ${CDB2_OPTIONS} $dbnm default 'select comdb2_dbname()'

master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | xargs echo`

kill_restart_cluster()
{
    for node in $CLUSTER ; do
        echo "killrestart nodes $node"
        kill_restart_node $node $kill_wait_time
    done
}

function bounce {
	if [[ -n "$CLUSTER" ]] ; then
		kill_restart_cluster 
	else
		kill_restart_node $(hostname) $kill_wait_time
	fi
}

# Count the number of logs that are ready to archive
function count_archive
{
    typeset dbnm=$1
    cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb log_archive")' | egrep 'log.00000' | wc -l
}

function insert_values
{
	for (( i=0; i<$1; i++))
	do
		cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into "$2" values($3)"
	done
}

function update_tranlog_copy
{
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into tranlog_copy select utxnid, childutxnid, lsnfile, lsnoffset from comdb2_transaction_logs where childutxnid is not null on conflict do nothing'
}

function verify_child_commit_lsn_is_parent_commit_lsn
{
	update_tranlog_copy
	numinvalidchildren=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from comdb2_transaction_commit parent, comdb2_transaction_commit child, tranlog_copy logs where logs.utxnid=parent.utxnid and logs.childutxnid=child.utxnid and (parent.commitlsnfile!=child.commitlsnfile or parent.commitlsnoffset!=child.commitlsnoffset)')
	failif numinvalidchildren
}

function num_children
{
	update_tranlog_copy &>/dev/null
	numchildren=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from tranlog_copy where childutxnid is not null')
	echo $numchildren
}

function test_add_basic
{
	# Verify that transactions that commit are reflected in the map. 

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table data(i int)'

	insert_values 100 data 1

	num_entries_in_map=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from comdb2_transaction_commit')
	if [ $num_entries_in_map -lt 100 ]; then
		echo "FAIL test_add_basic"
		exit 1
	fi

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table data'
}

function test_add_children
{
	# Verify that transaction children are reflected in the map with their
	# parent's commit lsn.

	max_itrs=10
	num_itrs=0
	num=$(num_children)
	
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table data(i int)'

	while [[ "$num" -eq "0" ]]; do
		if (( $num_itrs == $max_itrs )); then
			echo "FAIL test_add_children"
			exit 1
		fi 

		insert_values 10 data 1

		num_itrs=$((num_itrs+1))
		num=$(num_children)
	done

	verify_child_commit_lsn_is_parent_commit_lsn

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table data'
}

function test_add_recovery
{
	# Verify that recovered transactions that are reflected in the map. 

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table data(i int)'

	# Send checkpoint
	cdb2sql ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("bdb setattr CHECKPOINTTIME 10000")'
	res=$(cdb2sql ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("flush")')
	echo "checkpoint $res"
	sleep 10

	insert_values 100 data 1
	verify_child_commit_lsn_is_parent_commit_lsn

	# Get checkpoint lsn file/offset
	res=$(cdb2sql ${CDB2_OPTIONS} $dbnm default 'select lsnfile, max(lsnoffset) from comdb2_transaction_logs where (rectype='$CKP_RECTYPE' or rectype='$CKP_UTXNID_RECTYPE') and lsnfile=(select max(lsnfile) from comdb2_transaction_logs where (rectype='$CKP_RECTYPE' or rectype='$CKP_UTXNID_RECTYPE'))')
	echo "checkpoint from txn logs $res"
	recoverylsnfile=$(echo $res | grep -oP "[0-9]+\,")
	recoverylsnfile=${recoverylsnfile:0:-1}
	recoverylsnoffset=$(echo $res | grep -oP "[0-9]+\)$")
	recoverylsnoffset=${recoverylsnoffset:0:-1}

	# Get max lsn file/offset before bounce
	maxlsnfilebeforebounce=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select max(lsnfile) from comdb2_transaction_logs')
	echo "max lsn file $maxlsnfilebeforebounce"
	maxlsnoffsetbeforebounce=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select max(lsnoffset) from comdb2_transaction_logs where lsnfile='$maxlsnfilebeforebounce'')
	echo "max lsn offset $maxlsnoffsetbeforebounce"

	bounce

	update_tranlog_copy

	numrecoveredtxns=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from comdb2_transaction_commit commits, tranlog_copy logs where commits.utxnid=logs.utxnid and (logs.lsnfile>'$recoverylsnfile' or (logs.lsnfile='$recoverylsnfile' and logs.lsnoffset>'$recoverylsnoffset'))')
	echo "num recovered txns $numrecoveredtxns"

	# Verify that we recovered txns in the recovery range.
	if [[ "$numrecoveredtxns" -eq "0" ]]; then
		echo "FAIL test_add_recovery"
		exit 1
	fi

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table data'
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb setattr CHECKPOINTTIME 60")'
}

function test_add_replicant
{
        cdb2sql ${CDB2_OPTIONS} $dbnm default "create table data(i int)"

        # Run txns
        for (( i=0; i<100; i++))
        do
                cdb2sql ${CDB2_OPTIONS} --host $master $dbnm default "insert into data values(1)"
        done

        # Do ckp

        cdb2sql ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("flush")'
        sleep 10

        # Make sure that replicant has map entries from txns
        for node in $CLUSTER ; do
                if [ $node != $master ]; then
                        num_entries_in_map=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm default 'select COUNT(*) from comdb2_transaction_commit')
                        if [ $num_entries_in_map -lt 100 ]; then
                                echo "FAIL test_add_replicant"
                                exit 1
                        fi
                        break
                fi
        done


        cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table data"
}

function test_add
{
	# Test adding to the commit LSN map

	# A mirror of the transaction log systable is needed to use it for joins.
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table tranlog_copy(utxnid int, childutxnid int, lsnfile int, lsnoffset int)'

	local -r add_tests="test_add_basic test_add_children test_add_recovery test_add_replicant"
	for t in $add_tests;
	do
		$t
		echo "Passed $t"
	done

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table tranlog_copy'
}

pushlogs() {
	local -r target=$1

	get_num_files() { 
		cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select max(commitlsnfile) from comdb2_transaction_commit'
	}
	cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('pushlogs $target')"
	while (( $(get_num_files) < target )); do sleep 5; done
}

verify_txmap_deletes_records() {
	local -r logfile_to_delete=$1 node=$2
	local initial_num_records_for_file initial_num_records final_num_records

	initial_num_records_for_file=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm \
		"select COUNT(*) from comdb2_transaction_commit where commitlsnfile=$logfile_to_delete")
	initial_num_records=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm \
		"select COUNT(*) from comdb2_transaction_commit")
	readonly initial_num_records_for_file initial_num_records

	cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm \
		"exec procedure sys.cmd.send('clm_delete_logfile $logfile_to_delete')" > /dev/null

	final_num_records=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm "select COUNT(*) from comdb2_transaction_commit")
	readonly final_num_records
	if (( final_num_records != ( initial_num_records - initial_num_records_for_file ) )); then
		echo "Did not get expected number of records after deleting logfile $logfile_to_delete"
	fi
}

get_clminfo() {
	cdb2sql ${CDB2_OPTIONS} --host $1 $dbnm "exec procedure sys.cmd.send('bdb clminfo')"
}

extract_modsnap_start_lsn_offset_from_clminfo() {
	grep -oP '(?<=Modsnap start lsn offset: )[0-9]+' <<<"$1"
}

extract_modsnap_start_lsn_file_from_clminfo() {
	grep -oP '(?<=Modsnap start lsn file: )[0-9]+' <<<"$1"
}

extract_smallest_logfile_from_clminfo() {
	grep -oP '(?<=Smallest logfile: )[-]?[0-9]+' <<<"$1"
}

extract_highest_logfile_from_clminfo() {
	grep -oP '(?<=Highest logfile: )[-]?[0-9]+' <<<"$1"
}

verify_txmap_has_expected_min_max_files() {
	trap 'error $LINENO' ERR

	local -r exp_min_file=$1 exp_max_file=$2 node=$3
	local highest_logfile smallest_logfile records_outside_of_expected_window

	# Check that window stored in internal structure is correct
	highest_logfile=$(extract_highest_logfile_from_clminfo "$(get_clminfo $node)")
	smallest_logfile=$(extract_smallest_logfile_from_clminfo "$(get_clminfo $node)")
	readonly highest_logfile smallest_logfile
	if (( highest_logfile != exp_max_file || smallest_logfile != exp_min_file )); then
		echo "Expected max file to be $exp_max_file and min file to be $exp_min_file. Got:"
		echo "highest commit lsn file: $highest_logfile; smallest logfile: $smallest_logfile"
		exit 1
	fi

	# Check that we don't have any map records outside of the window
	records_outside_of_expected_window=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm \
		"select * from comdb2_transaction_commit where commitlsnfile < $exp_min_file or commitlsnfile > $exp_max_file")
	readonly records_outside_of_expected_window
	if [ -n "$records_outside_of_expected_window" ]; then
		echo "Got records with commit LSN file outside of expected window ($exp_min_file to $exp_max_file):"
		echo "$records_outside_of_expected_window"
		exit 1
	fi
}

test_delete() {
	trap 'error $LINENO' ERR

	local node
	node=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select comdb2_host()")
	readonly node

	# Verify that txmap handles deleting middle file, smallest file, largest file, and only file
	pushlogs 4
	verify_txmap_has_expected_min_max_files 1 4 $node

	verify_txmap_deletes_records 2 $node
	verify_txmap_has_expected_min_max_files 1 4 $node

	verify_txmap_deletes_records 1 $node
	verify_txmap_has_expected_min_max_files 3 4 $node

	verify_txmap_deletes_records 4 $node
	verify_txmap_has_expected_min_max_files 3 3 $node

	verify_txmap_deletes_records 3 $node
	verify_txmap_has_expected_min_max_files -1 -1 $node

	# Verify that txmap handles adding new files after deletes
	pushlogs 5
	verify_txmap_has_expected_min_max_files 4 5 $node

	# Verify that txmap handles request to delete non-existing file
	verify_txmap_deletes_records 1 $node
}

verify_cached_modsnap_start_lsn_after_recovery() {
	trap 'error $LINENO' ERR

	local -r node=$1

	local clminfo_after_recovery
	clminfo_after_recovery=$(get_clminfo $node)
	readonly clminfo_after_recovery

	local cached_modsnap_start_lsn_file_after_recovery
	cached_modsnap_start_lsn_file_after_recovery=$(extract_modsnap_start_lsn_file_from_clminfo "$clminfo_after_recovery")
	readonly cached_modsnap_start_lsn_file_after_recovery

	local cached_modsnap_start_lsn_offset_after_recovery
	cached_modsnap_start_lsn_offset_after_recovery=$(extract_modsnap_start_lsn_offset_from_clminfo "$clminfo_after_recovery")
	readonly cached_modsnap_start_lsn_offset_after_recovery

	local modsnap_start_lsn_after_recovery
	modsnap_start_lsn_after_recovery=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm \
		"select commitlsnfile, max(commitlsnoffset) from comdb2_transaction_commit \
		where commitlsnfile in (select max(commitlsnfile) from comdb2_transaction_commit)")
	readonly modsnap_start_lsn_after_recovery

	local modsnap_start_lsn_file_after_recovery
	modsnap_start_lsn_file_after_recovery=$(echo "$modsnap_start_lsn_after_recovery" | cut -f 1)
	readonly modsnap_start_lsn_file_after_recovery

	local modsnap_start_lsn_offset_after_recovery
	modsnap_start_lsn_offset_after_recovery=$(echo "$modsnap_start_lsn_after_recovery" | cut -f 2)
	readonly modsnap_start_lsn_offset_after_recovery

	(( cached_modsnap_start_lsn_file_after_recovery <= modsnap_start_lsn_file_after_recovery ))
	(( cached_modsnap_start_lsn_file_after_recovery < modsnap_start_lsn_file_after_recovery \
	|| cached_modsnap_start_lsn_offset_after_recovery <= modsnap_start_lsn_offset_after_recovery ))
}

verify_correct_utxnids_in_map() {
	trap 'error $LINENO' ERR

	local -r utxnids_to_recover=$1 utxnids_to_be_deleted_during_recovery=$2 host=$3

	local recovered_utxnids
	recovered_utxnids=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $host $dbnm \
		'select distinct utxnid from comdb2_transaction_commit order by utxnid' \
		| sed 's/ /\n/g')
	readonly recovered_utxnids 

	local present_unexpected_utxnids
	present_unexpected_utxnids=$(comm -12 \
		<(sort <<<$(echo "$recovered_utxnids")) \
		<(sort <<<$(echo "$utxnids_to_be_deleted_during_recovery")))
	readonly present_unexpected_utxnids
	[[ -z $present_unexpected_utxnids ]] # Assert that we have no unexpected utxnids

	local absent_expected_utxnids
	absent_expected_utxnids=$(comm -23 \
		<(sort <<<$(echo "$utxnids_to_recover")) \
		<(sort <<<$(echo "$recovered_utxnids")))
	readonly absent_expected_utxnids
	[[ -z $absent_expected_utxnids ]] # Assert that we have all expected utxnids
}

test_recover_to_lsn() {
	trap 'error $LINENO' ERR

	# Given

		# Run some initial traffic 
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t(i int)' > /dev/null
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t values(1)' > /dev/null

	local -r flush_itrs=2
	local itr
	for (( itr=0; itr<flush_itrs; itr++ )); do
		cdb2sql ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("flush")' > /dev/null
	done

	local utxnids_to_recover
	utxnids_to_recover=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm \
		'select distinct utxnid from comdb2_transaction_commit order by utxnid' \
		| sed 's/ /\n/g')
	readonly utxnids_to_recover

	local recovery_lsn
	recovery_lsn=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm default \
		'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | sed 's/.*lsn //g ; s/ .*//g')
	readonly recovery_lsn

	local recovery_lsn_file
	recovery_lsn_file=$(echo "$recovery_lsn" | cut -d: -f 1)
	readonly recovery_lsn_file

	local recovery_lsn_offset
	recovery_lsn_offset=$(echo "$recovery_lsn" | cut -d: -f 2)
	readonly recovery_lsn_offset

		# Run more traffic that will be undone during recovery
	insert_values 10 t 1 # Need to do this because pushlogs doesn't seem to generate child txns
	pushlogs 3

	local utxnids_to_be_deleted_during_recovery
	utxnids_to_be_deleted_during_recovery=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm \
		"select distinct utxnid from comdb2_transaction_commit where commitlsnfile > $recovery_lsn_file or commitlsnfile = $recovery_lsn_file and commitlsnoffset > $recovery_lsn_offset order by utxnid" \
		| sed 's/ /\n/g')
	readonly utxnids_to_be_deleted_during_recovery

	# When

	cdb2sql ${CDB2_OPTIONS} --host $master $dbnm \
		"exec procedure sys.cmd.truncate_log(\"{$recovery_lsn}\")"
	
	# Then

	verify_txmap_has_expected_min_max_files 1 1 "$master"
	verify_cached_modsnap_start_lsn_after_recovery "$master"
	verify_correct_utxnids_in_map "$utxnids_to_recover" "$utxnids_to_be_deleted_during_recovery" "$master"
}

if [ "$TESTCASE" == "commit_lsn_map_delete_generated" ];
then
	set -o pipefail
	test_recover_to_lsn
	test_delete
else
	test_add
fi

echo "Passed test"

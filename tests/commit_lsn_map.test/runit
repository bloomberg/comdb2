#!/usr/bin/env bash
bash -n "$0" | exit 1
source ${TESTSROOTDIR}/tools/cluster_utils.sh

# Grab my database name.
dbnm=$1

# Try this many times to see an archive 
seen_iter=${2:-300}

# Try this many times to see an archive 
clean_iter=${3:-10}

# Let the testcase timeout fail us
target=5

seen_count=0
seen_archives=0
seen_clear=0

kill_wait_time=10

CKP_RECTYPE=11
CKP_UTXNID_RECTYPE=2011

count=0
cdb2sql ${CDB2_OPTIONS} $dbnm default 'select comdb2_dbname()'

master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | xargs echo`

kill_restart_cluster()
{
    for node in $CLUSTER ; do
        echo "killrestart nodes $node"
        kill_restart_node $node $kill_wait_time
    done
}

function failif
{
	if [[ $1 -ne 0 ]]; then
		exit 1
	fi
}

function bounce {
	if [[ -n "$CLUSTER" ]] ; then
		kill_restart_cluster 
	else
		kill_restart_node $(hostname) $kill_wait_time
	fi
}

# Count the number of logs that are ready to archive
function count_archive
{
    typeset dbnm=$1
    cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb log_archive")' | egrep 'log.00000' | wc -l
}

function insert_values
{
	for (( i=0; i<$1; i++))
	do
		cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into "$2" values($3)"
	done
}

function update_tranlog_copy
{
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into tranlog_copy select utxnid, childutxnid, lsnfile, lsnoffset from comdb2_transaction_logs where childutxnid is not null on conflict do nothing'
}

function verify_child_commit_lsn_is_parent_commit_lsn
{
	update_tranlog_copy
	numinvalidchildren=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from comdb2_transaction_commit parent, comdb2_transaction_commit child, tranlog_copy logs where logs.utxnid=parent.utxnid and logs.childutxnid=child.utxnid and (parent.commitlsnfile!=child.commitlsnfile or parent.commitlsnoffset!=child.commitlsnoffset)')
	failif numinvalidchildren
}

function num_children
{
	update_tranlog_copy &>/dev/null
	numchildren=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from tranlog_copy where childutxnid is not null')
	echo $numchildren
}

function test_add_basic
{
	# Verify that transactions that commit are reflected in the map. 

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table data(i int)'

	insert_values 100 data 1

	num_entries_in_map=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from comdb2_transaction_commit')
	if [ $num_entries_in_map -lt 100 ]; then
		echo "FAIL test_add_basic"
		exit 1
	fi

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table data'
}

function test_add_children
{
	# Verify that transaction children are reflected in the map with their
	# parent's commit lsn.

	max_itrs=10
	num_itrs=0
	num=$(num_children)
	
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table data(i int)'

	while [[ "$num" -eq "0" ]]; do
		if (( $num_itrs == $max_itrs )); then
			echo "FAIL test_add_children"
			exit 1
		fi 

		insert_values 10 data 1

		num_itrs=$((num_itrs+1))
		num=$(num_children)
	done

	verify_child_commit_lsn_is_parent_commit_lsn

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table data'
}

function test_add_recovery
{
	# Verify that recovered transactions that are reflected in the map. 

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table data(i int)'

	# Send checkpoint
	cdb2sql ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("bdb setattr CHECKPOINTTIME 10000")'
	res=$(cdb2sql ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("flush")')
	echo "checkpoint $res"
	sleep 10

	insert_values 100 data 1
	verify_child_commit_lsn_is_parent_commit_lsn

	# Get checkpoint lsn file/offset
	res=$(cdb2sql ${CDB2_OPTIONS} $dbnm default 'select lsnfile, max(lsnoffset) from comdb2_transaction_logs where (rectype='$CKP_RECTYPE' or rectype='$CKP_UTXNID_RECTYPE') and lsnfile=(select max(lsnfile) from comdb2_transaction_logs where (rectype='$CKP_RECTYPE' or rectype='$CKP_UTXNID_RECTYPE'))')
	echo "checkpoint from txn logs $res"
	recoverylsnfile=$(echo $res | grep -oP "[0-9]+\,")
	recoverylsnfile=${recoverylsnfile:0:-1}
	recoverylsnoffset=$(echo $res | grep -oP "[0-9]+\)$")
	recoverylsnoffset=${recoverylsnoffset:0:-1}

	# Get max lsn file/offset before bounce
	maxlsnfilebeforebounce=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select max(lsnfile) from comdb2_transaction_logs')
	echo "max lsn file $maxlsnfilebeforebounce"
	maxlsnoffsetbeforebounce=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select max(lsnoffset) from comdb2_transaction_logs where lsnfile='$maxlsnfilebeforebounce'')
	echo "max lsn offset $maxlsnoffsetbeforebounce"

	bounce

	update_tranlog_copy

	numrecoveredtxns=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select COUNT(*) from comdb2_transaction_commit commits, tranlog_copy logs where commits.utxnid=logs.utxnid and (logs.lsnfile>'$recoverylsnfile' or (logs.lsnfile='$recoverylsnfile' and logs.lsnoffset>'$recoverylsnoffset'))')
	echo "num recovered txns $numrecoveredtxns"

	# Verify that we recovered txns in the recovery range.
	if [[ "$numrecoveredtxns" -eq "0" ]]; then
		echo "FAIL test_add_recovery"
		exit 1
	fi

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table data'
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb setattr CHECKPOINTTIME 60")'
}

function test_add_replicant
{
        cdb2sql ${CDB2_OPTIONS} $dbnm default "create table data(i int)"

        # Run txns
        for (( i=0; i<100; i++))
        do
                cdb2sql ${CDB2_OPTIONS} --host $master $dbnm default "insert into data values(1)"
        done

        # Do ckp

        cdb2sql ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("flush")'
        sleep 10

        # Make sure that replicant has map entries from txns
        for node in $CLUSTER ; do
                if [ $node != $master ]; then
                        num_entries_in_map=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm default 'select COUNT(*) from comdb2_transaction_commit')
                        if [ $num_entries_in_map -lt 100 ]; then
                                echo "FAIL test_add_replicant"
                                exit 1
                        fi
                        break
                fi
        done


        cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table data"
}

function test_add
{
	# Test adding to the commit LSN map

	# A mirror of the transaction log systable is needed to use it for joins.
	cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table tranlog_copy(utxnid int, childutxnid int, lsnfile int, lsnoffset int)'

	test_add_basic
	test_add_children
	test_add_recovery
	test_add_replicant

	cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table tranlog_copy'
}

function test_delete
{
	cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('pushlogs 2')"
	maxfileinmap=0
	while [[ "$maxfileinmap" -lt "2" ]]
	do
		sleep 3

		maxfileinmap=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select MAX(commitlsnfile) from comdb2_transaction_commit')
	done

	# Delete logfile txns from map

	for node in $CLUSTER ; do
		cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm "exec procedure sys.cmd.send('clm_delete_logfile 1')"
	done
	sleep 3

	for node in $CLUSTER ; do
		numrecords=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm 'select COUNT(*) from comdb2_transaction_commit where commitlsnfile=1')
		echo $numrecords

		if ((numrecords != 0)); then
		    echo "FAIL test_delete"
		    exit 1
		fi

		numrecords=$(cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm 'select COUNT(*) from comdb2_transaction_commit where commitlsnfile=2')
		echo $numrecords

		if ((numrecords == 0)); then
		    echo "FAIL test_delete"
		    exit 1
		fi
	done
}

test_delete
test_add

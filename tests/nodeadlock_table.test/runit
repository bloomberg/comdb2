#!/usr/bin/env bash
bash -n "$0" | exit 1
set -x
source ${TESTSROOTDIR}/tools/runit_common.sh
################################################################################


f1() {
    echo "
    begin
        insert into t1 (f,g,j,b) values (1, $1, 1, x'abcd')
        insert into t2 (f,g,j,b) values (1, $1, 2, x'abcd')
    commit
    " > in1.sql
    cdb2sql ${CDB2_OPTIONS} $DBNAME default -f in1.sql
}

f2() {
    echo "
    begin
        insert into t2 (f,g,j,b) values (2, $1, 3, x'dcba')
        insert into t1 (f,g,j,b) values (2, $1, 4, x'dcba')
    commit
    " > in2.sql
    cdb2sql ${CDB2_OPTIONS} $DBNAME default -f in2.sql
}


cdb2sql ${CDB2_OPTIONS} $DBNAME default <<"EOF"
create table t1 {
schema
{
    int  f
    int  g
    int  j
    blob b
}
keys{
    dup "KEY_f"=f
}
}
EOF

cdb2sql ${CDB2_OPTIONS} $DBNAME default <<"EOF"
create table t2 {
schema
{
    int  f
    int  g
    int  j
    blob b
}
keys{
    dup "KEY_f"=f
}
}
EOF


cdb2sql ${CDB2_OPTIONS} $DBNAME default <<"EOF"
insert into t1 (f,g,j,b) values (11, 0, 111, x'abcd')
insert into t1 (f,g,j,b) values (12, 0, 112, x'abcd')
EOF

echo "event logging should already be on, no need to @send reql events on"

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
for node in $cluster ; do
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('debg 500')"
#    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('bdb verbdeadlock 1')"
#    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('on verbose_deadlocks')"
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('bdb setattr DELAY_WRITES_IN_RECORD_C 1000')"
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('print_deadlock_cycles on')"
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('track_curtran_locks on')"
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('reql events detailed on')"
#    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('reql trace')"
#    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('reql go')"
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('on extended_sql_debug_trace')"
done

master=`getmaster`

logenabled=`cdb2sql ${CDB2_OPTIONS} --tabs $DBNAME --host $master "exec procedure sys.cmd.send('reql stat')" | grep "Eventlog enabled" `
if [ "x$logenabled" == "x" ]; then
    cdb2sql ${CDB2_OPTIONS} --tabs $DBNAME --host $master "exec procedure sys.cmd.send('reql stat')"
    failexit "Eventlog is not enabled $master"
fi


echo run two transactions that will get in a deadlock
echo will see DEADLOCK-CYCLE: in db log
f1 1 &
f2 1 &

wait

cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 't1',* from t1 where f < 10 order by f,g,j" > content.out
cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 't2',* from t2 order by f,g,j" >> content.out

echo "\
t1	1	1	1	x'abcd'
t1	2	1	4	x'dcba'
t2	1	1	2	x'abcd'
t2	2	1	3	x'dcba'" > content.expected

if ! diff content.expected content.out ; then 
    failexit "content not what it is supposed to be"
fi

echo run two transactions that will get in a deadlock again
f1 2 &
f2 2 &

wait

cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 't1',* from t1 where f < 10 order by f,g,j" > content.out
cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 't2',* from t2 order by f,g,j" >> content.out

echo "\
t1	1	1	1	x'abcd'
t1	1	2	1	x'abcd'
t1	2	1	4	x'dcba'
t1	2	2	4	x'dcba'
t2	1	1	2	x'abcd'
t2	1	2	2	x'abcd'
t2	2	1	3	x'dcba'
t2	2	2	3	x'dcba'" > content.expected

if ! diff content.expected content.out ; then 
    failexit "content not what it is supposed to be"
fi

# try the update now

f3() 
{
    cdb2sql ${CDB2_OPTIONS} $DBNAME default <<"EOF"
begin
update t1 set b = x'cccc', g = 3, j = j+1 where f=1
update t2 set b = x'dddd', g = 3, j = j+1 where f=1
commit
EOF
}

f4() 
{
    cdb2sql ${CDB2_OPTIONS} $DBNAME default <<"EOF"
begin
update t2 set b = x'eeee', g = 4, j = j+1 where f=2
update t1 set b = x'ffff', g = 4, j = j+1 where f=2
commit
EOF
}

f3 &
f4 &
wait

cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 't1',* from t1 where f < 10 order by f,g,j" > content.out
cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 't2',* from t2 order by f,g,j" >> content.out

echo "\
t1	1	3	2	x'cccc'
t1	1	3	2	x'cccc'
t1	2	4	5	x'ffff'
t1	2	4	5	x'ffff'
t2	1	3	3	x'dddd'
t2	1	3	3	x'dddd'
t2	2	4	4	x'eeee'
t2	2	4	4	x'eeee'" > content.expected

if ! diff content.expected content.out ; then 
    failexit "content not what it is supposed to be"
fi

## set ipu off
#cdb2sql ${CDB2_OPTIONS} $DBNAME --host $master "exec procedure sys.cmd.send('setipu t1 off')"
#cdb2sql ${CDB2_OPTIONS} $DBNAME --host $master "exec procedure sys.cmd.send('setipu t2 off')"
#
#
#f3 &
#f4 &
#wait
#
#cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 't1',* from t1 where f < 10 order by f,g,j" > content.out
#cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select 't2',* from t2 order by f,g,j" >> content.out
#
#echo "t1	1	3	x'cccc'" > content.expected
#echo "t1	1	3	x'cccc'" >> content.expected
#echo "t1	2	6	x'ffff'" >> content.expected
#echo "t1	2	6	x'ffff'" >> content.expected
#echo "t2	1	4	x'dddd'" >> content.expected
#echo "t2	1	4	x'dddd'" >> content.expected
#echo "t2	2	5	x'eeee'" >> content.expected
#echo "t2	2	5	x'eeee'" >> content.expected
#
#if ! diff content.expected content.out ; then 
#    failexit "content not what it is supposed to be"
#fi
#
#cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select printf('%llx',comdb2_rowid) as genid,'t1', * from t1 where f < 10 order by f,g,j" > content.out
#cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select printf('%llx',comdb2_rowid) as genid,'t2', * from t2" >> content.out
#

echo perform closing operations, get deadlocks from event log file

logfl=`cdb2sql ${CDB2_OPTIONS} --tabs $DBNAME --host $master "exec procedure sys.cmd.send('reql stat')" | grep "Eventlog enabled" | cut -f2 -d ':'`
if [ "x$logfl" == "x" ]; then
    cdb2sql ${CDB2_OPTIONS} --tabs $DBNAME --host $master "exec procedure sys.cmd.send('reql stat')"
    failexit "cant find events logfile in reql stat on $master"
fi

cdb2sql ${CDB2_OPTIONS} $DBNAME --host $master "exec procedure sys.cmd.send('reql events roll')"

sleep 4

if [ $master != `hostname` ]; then
    scp $master:$logfl $logfl
fi

logflunziped=${logfl}.unzipped 
zcat $logfl > $logflunziped

ddlk_cnt=`grep -c deadlock_cycle $logflunziped `
cnonce_cnt=`grep deadlock_cycle $logflunziped | sed 's/}/}\n/' | grep -c cnonce`

if echo $DBNAME | grep 'noreorder' ; then
    if [ $ddlk_cnt != 3 ]; then
        failexit "expected 3 deadlocks in eventslog (from first trans), found $ddlk_cnt"
    fi

    if [ $cnonce_cnt != 6 ]; then
        failexit "expected 6 cnonces reported part of deadlock_cycle in eventslog, found $cnonce_cnt"
    fi
else
    if [ $ddlk_cnt -gt 0 ]; then
        failexit "expected no deadlocks in eventslog, found $ddlk_cnt"
    fi

    if [ $cnonce_cnt -gt 0 ]; then
        failexit "expected no cnonces reported part of deadlock_cycle in eventslog, found $cnonce_cnt"
    fi
fi

echo "Testcase passed."

#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

stopfile=./stopfile.txt

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

function fail_test
{
    echo "Failed test: $1"
    touch $stopfile
    #exit 1
}

function create_tables
{
    # check-constraints table
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists c(a int, grade varchar(2), constraint valid_grade_check CHECK(LOWER(grade) IN ('a', 'b', 'c', 'd', 'f')))"
    # partial-index table
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists p(a int, constraint 'a_range' check (a >= 0 and a <= 100))"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from comdb2_tables"
}

function write_records
{
    typeset j=0
    while [[ "$j" -lt 1000 ]]; do
        $CDB2SQL_EXE -admin $CDB2_OPTIONS $DBNAME default "insert into c(a, grade) values($j, 'A')"
        [[ $? -ne 0 ]] && fail_test "insert into c failed"
        $CDB2SQL_EXE -admin $CDB2_OPTIONS $DBNAME default "insert into p(a) values($(( j % 100 )))"
        [[ $? -ne 0 ]] && fail_test "insert into p failed"
        let j=j+1
    done
}

function sleep_loop
{
    while [[ ! -f $stopfile ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select sleep(5)"
    done
}

# Use up all sql resources with background sleeps
function background_sleeps
{
    typeset target=10
    if [[ -n $CLUSTER ]]; then
        clcount=$(echo $CLUSTER | wc -w)
        target=$(( clcount * 10 ))
    fi
    typeset c=0
    echo "Starting $target background sleeps"
    while [[ $c -lt $target ]]; do
        sleep_loop & 
        let c=c+1
    done
}

function run_test
{
    write_records

    if [[ -f $stopfile ]]; then
        echo "stopfile exists, exiting"
        exit 1
    fi

    background_sleeps

    sleep 1
    write_records

    rcode=0

    if [[ -f $stopfile ]]; then
        if [[ $DBNAME == *"failwrite"* ]]; then
            echo "Write-records correctly failed, force-writes was disabled"
            rcode=0
        else
            echo "Write-records failed, write-sql should have succeeded"
            rcode=1
        fi
    else
        if [[ $DBNAME == *"failwrite"* ]]; then
            echo "Write-records incorrectly succeeded, force-writes was disabled"
            rcode=1
        else
            echo "Write-records succeeded force_writesql forced master writes"
            rcode=0
        fi
    fi

    touch $stopfile
    wait

    if [[ $rcode -ne 0 ]]; then
        echo "Testcase failed"
        exit 1
    fi
    echo "Success"
}

if [[ -z "$CLUSTER" ]]; then
    echo "This test requires a cluster"
    exit 1
fi

rm -f $stopfile 2>/dev/null
create_tables
run_test

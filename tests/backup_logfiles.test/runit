#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x

source ${TESTSROOTDIR}/tools/runit_common.sh

BACKUPDIR=${TESTDIR}/backup_logs_$DBNAME

# comdb2 task will create "${TESTDIR}/backup_logs_%dbname"
# this part is same as from insert_lots.test

gen_series_test()
{
    MAX=9000
    cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "create table t2 (i int)"
    cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "insert into t2 select * from generate_series(1, $MAX) "
    cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "select distinct i from t2" | sort -n > gen.out
    seq 1 $MAX > gen.exp
    if ! diff gen.out gen.exp ; then 
        failexit 'genseries content not what it is expected'
    fi
}


THRDS=20
CNT=10000
ITERATIONS=2
TRANSIZE=0
#if [[ $DBNAME == *"largetrangenerated"* ]] ; then
#    TRANSIZE=2800
#fi

gen_series_test

cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default 'create table t1 {schema { short i  int j } keys { "PK"=i+j dup "j"=j } }'
time ${TESTSBUILDDIR}/insert_lots_mt $DBNAME $THRDS $CNT $ITERATIONS $TRANSIZE> ins.out
assertcnt t1 $((THRDS * CNT * ITERATIONS))

while [ $SECONDS -lt 120 ] ; do
    cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default "insert into t2 select * from generate_series(1, 100) "
    sleep 10
done

master=`getmaster`

# verify that backup dir has log.0000000001
if [[ -n "$CLUSTER" ]]; then
    ssh -o StrictHostKeyChecking=no $master "ls -al $BACKUPDIR" > ls_out.txt
else
    ls -al $BACKUPDIR > ls_out.txt
fi

cnt=`grep -c log.0000000001 ls_out.txt`
assertres $cnt 1

if [ "$CLEANUPDBDIR" != "0" ] ; then
    if [[ -n "$CLUSTER" ]]; then
        ssh -o StrictHostKeyChecking=no $master "rm -rf $BACKUPDIR"
    fi
    # clean locally (init created locally, even for clustered)
    rm -rf $BACKUPDIR
fi

echo "Success"

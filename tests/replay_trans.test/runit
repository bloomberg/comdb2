#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

function verify() {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out
    if ! grep succeeded verify.out > /dev/null ; then
	failexit "Verify did not succeed, see verify3.out"
    fi
}

function init() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default "CREATE TABLE t1(i INT UNIQUE, j DATETIME)"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "INSERT INTO t1 VALUES(1, NOW())"

    master=`getmaster`
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "PUT TUNABLE 'debug.invalid_genid' 1"
}

function cleanup() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default "DROP TABLE t1"
}

function assert_fail() {
    if [[ $1 -eq 0 ]]; then
        failexit "transaction succeeded, expected it to fail"
    fi
}

function run_bad_tx_with_intransres() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
SET INTRANSRESULTS ON
BEGIN
UPDATE t1 SET j = NOW() WHERE i = 1;
COMMIT
EOF
    assert_fail $?
}

function run_bad_tx_without_intransres() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
SET INTRANSRESULTS OFF
BEGIN
UPDATE t1 SET j = NOW() WHERE i = 1;
COMMIT
EOF
    assert_fail $?
}

init
run_bad_tx_with_intransres
run_bad_tx_without_intransres
verify
cleanup

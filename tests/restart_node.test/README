This test exercises the ability of SC to resume after a master downgrade
and after a crash.


if we downgrade immediately after a downgrade, currently we get 

open_temp_db_resume: failed to open new.t1, rcode 2
Schema change error: failed opening new db
Schema change returning FAILED


After the fix i am getting few issues:

1) new master seems to have trouble to talk to the other node. Several of:

trying readlock (berkdb_receive_rtn -596224256), last writelock is upgrade -6952
32768

2) several of:

back from bdb_upgrade_int
get_origin_mach_by_fd:getpeername failed fd 6: 107 Transport endpoint is not connected

3) new table can't be found:
Didn't find existing tempdb: new.t1, creating a new one

thus resume point is *not* the one where first node left off:

Schema change info: resuming stripe  0 from 0x0000000000000000



- wait_to_resume was stuck in: 

#0  0x00007f5cda919d8d in nanosleep () at ../sysdeps/unix/syscall-template.S:84
#1  0x00007f5cda919cda in __sleep (seconds=0) at ../sysdeps/posix/sleep.c:55
#2  0x00000000008c0379 in wait_to_resume (s=0x3386d28)
    at schemachange/sc_logic.c:190
#3  0x00000000008c14a2 in resume_schema_change ()
    at schemachange/sc_logic.c:658
#4  0x0000000000477d72 in new_master_callback (bdb_handle=0x33c48f0, 
    host=0x33802a8 "pjeshka") at db/glue.c:2873
#5  0x00000000005de6ba in bdb_upgrade_int (bdb_state=0x33c48f0, 
    upgraded=0x7f5cd1cbac0c) at bdb/file.c:4836
#6  0x00000000005de9fb in bdb_upgrade_downgrade_reopen_wrap (
    bdb_state=0x33c48f0, op=1, timeout=30, done=0x7f5cd1cbac0c)
    at bdb/file.c:4963
#7  0x00000000005deb56 in bdb_upgrade (bdb_state=0x33c48f0, 
    done=0x7f5cd1cbac0c) at bdb/file.c:5004
#8  0x000000000058607e in elect_thread (args=0x33cef78) at bdb/rep.c:1370
#9  0x00007f5cdb537444 in start_thread (arg=0x7f5cd1cbb700)
    at pthread_create.c:333
#10 0x00007f5cda94a20d in clone ()


- Fixed send("downgrade") to not stop SC if single node

When a new master gets selected, it calls new_master_callback(), where we 
load_auto_analyze_counters(), and we also resume_schema_change(), which 
after figuring out what table is being schemachanged, calls 
start_schema_change() which after setting sc_set_running(), it starts 
a thread to do_schema_change_thd().

We set SC_RESTART_SEC to test when restart will happen. That is used in 
wait_to_resume() to resume sc with a delay. That delaying occurs in 
do_schema_change_thd(). In order to have all db inserts, updates and deletes
in new btree, we need to init_sc_genids() before we sleep. The reason we had 
the sleep in there is to give the system a chance to come up--need to find 
out what is missing and when is it available, in order to have SC start after
that point without sleeping.



#!/bin/bash
bash -n "$0" | exit 1

#PS4='$(date +%Y%m%d-%H:%M:%S): '
set -x

RESTART_DELAY=35
INITNUMREC=100
NUMREC=300

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

if [ -z $COMDB2_EXE ] ; then
   failexit '$COMDB2_EXE is not set'
fi

# Number of insert_records function calls
nins=0


failexit()
{
    echo "Failed $1"
    exit -1
}


assertcnt()
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}


assert_vers()
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
    tblver=$newver
}


assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}


assert_sc_status()
{
    target=$1
    cdb2sql --tabs --host $master ${CDB2_OPTIONS} $dbnm 'exec procedure sys.cmd.send("stat")' > stat1.out
    if [ $? -ne 0 ] ; then
        failexit "sending stat to new master $master"
    fi

    scrunning=`grep "schema change running" stat1.out | awk '{print $4}' `
    echo "scrunning is $scrunning"
    if [ "$scrunning" == "NO" ] ; then 
        if [ $target != 0 ] ; then
            failexit "scrunning is $scrunning, but target is $target"
        fi
    else 
        if [ $target != 1 ] ; then
            failexit "scrunning is $scrunning, but target is $target"
        fi
    fi
}


get_sc_seed()
{
    cdb2sql --tabs --host $master ${CDB2_OPTIONS} $dbnm 'exec procedure sys.cmd.send("stat")' > stat1.out
    if [ $? -ne 0 ] ; then
        failexit "sending stat to new master $master"
    fi

    grep "Schema change in progress with seed" stat1.out | awk '{print $7}'
}


assert_sc_seed()
{
    target=$1
    scseed=`get_sc_seed`
    echo "scseed is $scseed"
    if [ "$scseed" != "$target" ] ; then 
        failexit "scseed $scseed, but target is $target"
    fi
}


do_verify()
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


# Update all records in the table
update_all_records()
{
    typeset prmsg=$1
    typeset iter=0

    [[ "$debug" == 1 ]] && set -x

    while :; do 

        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=x'1234' where b='test1'" >/dev/null 2>&1
        let iter=iter+1

        if [[ -n "$prmsg" && $(( iter % prmsg )) == 0 ]]; then

            echo "Updated all of table t1 $iter times."

        fi

    done
}


update_records()
{
    j=0
    nrecs=$1
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+100000 where a = $j" >> update.out 
        let j=j+1
    done
}


insert_records()
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs $dbnm default "select 1 from t1 where a=$j"  2>> $insfl)
        if [ "$out" = "1" ]; then 
            let j=j+1
            continue
        fi
        
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c) values ($j,'test1$j',$j)"  &>> $insfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
        sleep 0.01
    done
    echo "done inserting round $nins"
}


insert_records_oneshot()
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        echo "insert into t1(a,b,c) values ($j,'test1$j',$j)" 
        let j=j+1
    done | cdb2sql ${CDB2_OPTIONS} $dbnm default -  &>> $insfl
    echo "done inserting round $nins"
}


kill_by_pidfile() 
{
    pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        ps -p $pid -o args | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then
            echo "kill -9 $pid"
            kill -9 $pid
        fi
        rm -f $pidfile
    else
        failexit "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}

kill_restart_cluster()
{
    delay=$1
    for node in $cluster ; do
        echo "killrestart nodes $node"
        kill_restart_node $node $delay &
    done
    sleep $delay
    # select 1 all nodes
    for node in $cluster ; do
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        # wait until we can query it
        echo "$DBNAME: waiting until ready"
        while [[ "$out" != "1" ]]; do
            sleep 2
            out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        done
    done
}

kill_restart_node()
{
    node=$1
    delay=$2
    pushd $DBDIR
    cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'exec procedure sys.cmd.send("flush")'

    if [ -n "$CLUSTER" ] ; then
        kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
        mv --backup=numbered $TESTDIR/logs/${DBNAME}.${node}.db $TESTDIR/logs/${DBNAME}.${node}.db.1
        sleep $delay
        if [ $node != `hostname` ] ; then
            ssh -o StrictHostKeyChecking=no -tt $node COMDB2_ROOT=$COMDB2_ROOT $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl >$TESTDIR/logs/${DBNAME}.${node}.db 2>&1 </dev/null &
            echo $! > ${TMPDIR}/${DBNAME}.${node}.pid
        else
            $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl &> $TESTDIR/logs/${DBNAME}.${node}.db -pidfile ${TMPDIR}/${DBNAME}.${node}.pid &
        fi
    else
        kill_by_pidfile ${TMPDIR}/${DBNAME}.pid
        mv --backup=numbered $TESTDIR/logs/${DBNAME}.db $TESTDIR/logs/${DBNAME}.db.1
        sleep $delay
        echo "$DBNAME: starting single node"
        echo "$COMDB2_EXE $DBNAME $TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid"
        $COMDB2_EXE $DBNAME >$TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid 2>&1 &
    fi

    popd

    out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
    # wait until we can query it
    echo "$DBNAME: waiting until ready"
    while [[ "$out" != "1" ]]; do
        sleep 2
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
    done
}


get_schemachange_status()
{
    master=$1
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('stat')" | grep "Schema change in progress" > schemachange_status.out
    if [ $? -eq 0 ] ; then
        return 1 
    fi
    return 0
}


getmaster()
{
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

force_delay_master()
{
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('scdelay 300')"
}

echo "Test with insert, SC should not fail"

cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('debg 0')"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1_1.csc2 ` }"

assert_vers t1 0
assert_schema t1 t1_1.csc2
insert_records 1 $INITNUMREC
assertcnt $INITNUMREC

#check via select * from t1 | make sure that a == b == c == 'test'$

echo "TESTING BRING DOWN ALL NODES"
sleep 1

master=`getmaster`
cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
node=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select comdb2_host()'`

echo restart node with delay to make sure when it comes up the cluster is still allright
insert_records $((INITNUMREC+1)) $NUMREC &
pid=$!
while ps -p $pid &> /dev/null ; do
    echo "insert running, killrestart all nodes"
    kill_restart_cluster $RESTART_DELAY
    sleep 2
done

master=`getmaster`
cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t1" > all_rows.txt
assertcnt $NUMREC
do_verify

#sleep 15

#make sure lsn is equal in all nodes
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("bdb cluster")'

echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

#PS4='$(date +%Y%m%d-%H:%M:%S): '
set -x
source ${TESTSROOTDIR}/tools/runit_common.sh
source ${TESTSROOTDIR}/tools/cluster_utils.sh

RESTART_DELAY=35
INITNUMREC=100
NUMREC=300

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

if [ -z $COMDB2_EXE ] ; then
   failexit '$COMDB2_EXE is not set'
fi

# Number of insert_records function calls
nins=0

assert_vers()
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
    tblver=$newver
}


assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

insert_records()
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs $dbnm default "select 1 from t1 where a=$j"  2>> $insfl)
        if [ "$out" = "1" ]; then 
            let j=j+1
            continue
        fi
        
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c) values ($j,'test1$j',$j)"  &>> $insfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
        sleep 0.01
    done
    echo "done inserting round $nins"
}


kill_restart_cluster()
{
    delay=$1
    for node in $cluster ; do
        echo "killrestart nodes $node"
        kill_restart_node $node $delay &
    done
    sleep $delay
    # select 1 all nodes
    for node in $cluster ; do
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        # wait until we can query it
        echo "$DBNAME: waiting until ready"
        while [[ "$out" != "1" ]]; do
            sleep 2
            out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
        done
    done
}

echo "Test with insert, SC should not fail"

cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('debg 0')"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1_1.csc2 ` }"

assert_vers t1 0
assert_schema t1 t1_1.csc2
insert_records 1 $INITNUMREC
assertcnt t1 $INITNUMREC

#check via select * from t1 | make sure that a == b == c == 'test'$

echo "TESTING BRING DOWN ALL NODES"
sleep 1

master=`getmaster`
cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
node=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select comdb2_host()'`

echo restart node with delay to make sure when it comes up the cluster is still allright
insert_records $((INITNUMREC+1)) $NUMREC &
pid=$!
while ps -p $pid &> /dev/null ; do
    echo "insert running, killrestart all nodes"
    kill_restart_cluster $RESTART_DELAY
    sleep 2
done

master=`getmaster`
cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t1" > all_rows.txt
assertcnt t1 $NUMREC
do_verify t1

#sleep 15

#make sure lsn is equal in all nodes
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("bdb cluster")'

echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function insert_records
{
    while [[ ! -f $stopfile ]]; do
        $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)" > /dev/null 2>&1
    done
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    write_prompt $func "Running $func"

    create_table
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure sp version 'v1' {
local function main()
    db:emit(1)
end
}$$
EOF
    insert_records &
    insert_records &
    insert_records &
    insert_records &
    insert_records &
    insert_records &

    failed=0
    j=0

    while [[ $j -lt 10 && "$failed" == "0" ]]; do
        mod=$(( j % 2 ))
        begin=$(date +%s)
        if [[ "$mod" == "0" ]]; then
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create lua trigger sp on (table t1 for insert)"
        else
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop lua trigger sp"
        fi
        finished=$(date +%s)
        elapsed=$(( finished - begin ))
        echo "Update-trigger time is $elapsed"
        if [[ $elapsed -ge 2 ]]; then
            failed=1
            echo "Failing test: trigger operations took $elapsed seconds"
        fi

        let j=j+1
    done

    touch "$stopfile"
    wait
    [[ "$failed" -ne "0" ]] && failexit "testcase failed"
}

rm $stopfile
run_test
echo "Success"

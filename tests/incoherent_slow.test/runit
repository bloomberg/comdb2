#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/runit_common.sh

debug=1
[[ "$debug" == "1" ]] && set -x

function create_table
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1 (a int)"
}

function slow_replication
{
    typeset node=$1
    typeset ms=${2:-2000}
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable slow_rep_process_txn_maxms $ms"
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable slow_rep_process_txn_minms $ms"
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable slow_rep_process_txn_freq 1"
}

function set_short_replication_timeouts
{
    typeset minms=${1:-1}
    typeset maxms=${2:-10}
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "exec procedure sys.cmd.send('bdb setattr REPTIMEOUT_MINMS $minms')"
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "exec procedure sys.cmd.send('bdb setattr REPTIMEOUT_MAXMS $maxms')"
}

function set_normal_replication_timeouts
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "exec procedure sys.cmd.send('bdb setattr REPTIMEOUT_MINMS 10000')"
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "exec procedure sys.cmd.send('bdb setattr REPTIMEOUT_MAXMS 300000')"
}

function restore_replication
{
    typeset node=$1
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable slow_rep_process_txn_maxms 0"
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable slow_rep_process_txn_minms 10000"
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable slow_rep_process_txn_freq 0"
}

function enable_reptrace
{
    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "exec procedure sys.cmd.send('bdb reptrcy')"
    done
}

function disable_reptrace
{
    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "exec procedure sys.cmd.send('bdb reptrcan')"
    done
}

function slow_replication_all
{
    typeset ms=${1:-2000}
    for node in $CLUSTER ; do
        slow_replication $node $ms
    done
}

function restore_replication_all
{
    for node in $CLUSTER ; do
        restore_replication $node
    done
}

function restore_replication_all
{
    for node in $CLUSTER ; do
        restore_replication $node
    done
}

function disable_slow_replicant_check
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable make_slow_replicants_incoherent 0"
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable warn_slow_replicants 0"
}

function enable_slow_replicant_check
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable make_slow_replicants_incoherent 1"
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable warn_slow_replicants 1"
}

function set_inactive_timeout
{
    typeset node=$(get_master)
    typeset timeout=$1
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable slowrep_inactive_timeout $timeout"
}

function enable_inactive_timeout
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable incoherent_slow_inactive_timeout 1"
}

function disable_inactive_timeout
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable incoherent_slow_inactive_timeout 0"
}

function enable_block_until_applied_quorum
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable block_until_applied_quorum 1"
}

function disable_block_until_applied_quorum
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable block_until_applied_quorum 0"
}

function choose_replicant
{
    typeset master=$(get_master)
    typeset host="unset"

    for node in $CLUSTER ; do
        if [[ "$node" != "$master" ]]; then
            host=$node
            #if [[ $(( RANDOM % 2 )) == 0 ]]; then
            #    break
            #fi
        fi
    done
    echo $host
}

function set_dynamic_incoherent_percentage
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable dynamic_max_incoherent_percent $1"
}

function enable_dynamic_incoherent_slow
{
    typeset node=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable dynamic_max_incoherent_slow 1"
}

function set_max_incoherent_slow_to_zero
{
    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable max_incoherent_slow 0"
        $CDB2SQL_EXE $CDB2_OPTIONS -admin --tabs $DBNAME --host $node "put tunable dynamic_max_incoherent_slow 0"
done
}

function retrieve_incoherent_slow_percent
{
    typeset master=$(get_master)
    percent=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS -admin --tabs $DBNAME --host $master "select value from comdb2_tunables where name='dynamic_max_incoherent_percent'")
    echo "$percent"
}

function count_cluster
{
    typeset count=0
    for node in $CLUSTER ; do
        let count=count+1
    done
    echo $count
}

function test_max_incoherent_slow
{
    typeset master=$(get_master)
    typeset rep=$(choose_replicant)

    echo "Disable the inactive timeout"
    disable_inactive_timeout

    echo "Setting max-incoherent slow to 0- which effectively disables incoherent-slow"
    set_max_incoherent_slow_to_zero

    echo "Enable slow replication for $rep"
    slow_replication $rep

    echo "Inserting 10 records"
    j=0
    while [[ $j -lt 10 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)"
        let j=j+1
    done

    echo "Make sure that we are not incoherent-slow"

    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")

    if [[ "$x" == *"INCOHERENT_SLOW"* ]]; then
        failexit "Replicant became incoherent-slow, even though max-incoherent-slow was 0"
    fi

    restore_replication $rep

    echo "Search trace to ensure this codepath"
    egrep -i "reached maximum incoherent_slow" ${TESTDIR}/logs/${DBNAME}.${master}.db

    r=$?
    if [[ "$r" != "0" ]]; then
        echo "couldn't find maximum-incoherent-slow trace??"
        failexit "couldn't find maximum-incoherent-slow trace"
    fi

    echo "Set dynamic incoherent slow percent to 1"
    set_dynamic_incoherent_percentage 1

    echo "Enable dynamic incoherent slow- will have precedence over incoherent-slow"
    enable_dynamic_incoherent_slow

    incoherent_slow_percent=$(retrieve_incoherent_slow_percent)
    cluster_count=$(count_cluster)
    max=$(( cluster_count * incoherent_slow_percent / 100 ))

    echo "slow-percent is $incoherent_slow_percent"
    echo "cluster-count is $cluster_count"
    echo "max incoherent is $max"
    echo "."
    echo "Verify that nothing is incoherent-slow"

    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
    if [[ "$x" == *"INCOHERENT_SLOW"* ]]; then
        failexit "Replicant became incoherent-slow inexplicably??"
    fi

    echo "Testing dynamic incoherent-slow, max incoherent slow should be $max"

    rep=$(choose_replicant)
    echo "Enable slow replication for $rep"
    slow_replication $rep

    echo "Inserting 30 records"
    j=0
    while [[ $j -lt 30 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)"
        sleep 1
        let j=j+1
    done

    echo "Count the number of incoherent-slow nodes"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")

    cnt=$(echo "$x" | egrep -c "INCOHERENT_SLOW")

    restore_replication_all

    if [[ "$cnt" -ne "$max" ]]; then
        failexit "Number of incoherent-slow nodes $cnt is not equal to $max"
    fi

    echo "Set dynamic incoherent slow percent to 40"
    set_dynamic_incoherent_percentage 40

    echo "Enable dynamic incoherent slow- will have precedence over incoherent-slow"
    enable_dynamic_incoherent_slow

    incoherent_slow_percent=$(retrieve_incoherent_slow_percent)
    cluster_count=$(count_cluster)
    max=$(( cluster_count * incoherent_slow_percent / 100 ))

    echo "slow-percent is $incoherent_slow_percent"
    echo "cluster-count is $cluster_count"
    echo "max incoherent is $max"
    echo "."
    echo "Verify that nothing is incoherent-slow"

    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
    if [[ "$x" == *"INCOHERENT_SLOW"* ]]; then
        failexit "Replicant became incoherent-slow inexplicably??"
    fi

    echo "Testing dynamic incoherent-slow, max incoherent slow should be $max"

    echo "Inserting 30 records"
    j=0
    while [[ $j -lt 30 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)"
        sleep 1
        let j=j+1
    done

    echo "Count the number of incoherent-slow nodes"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")

    cnt=$(echo "$x" | egrep -c "INCOHERENT_SLOW")

    restore_replication_all

    if [[ "$cnt" -ne "$max" ]]; then
        failexit "Number of incoherent-slow nodes $cnt is not equal to $max"
    fi

    echo "Disable slow replicant check"
    disable_slow_replicant_check

    echo "Enable inactive-timeout"
    enable_inactive_timeout

    echo "Set inactive-timeout to 1 second"
    set_inactive_timeout 1

    echo "Restore replication"
    restore_replication_all

    echo "Verify that we return to 'coherent'"
    j=0
    slow=1
    while [[ "$j" -lt 200 && "$slow" == 1 ]]; do
        let j=j+1
        x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
        if [[ "$x" == *"INCOHERENT_SLOW"* ]]; then
            echo "Replicant is still incoherent-slow iteration $j"
            slow=1
            sleep 1
        else
            echo "Replicant is no longer incoherent-slow!"
            slow=0
        fi
    done
}

function test_block_until_applied_quorum
{
    typeset master=$(get_master)
    typeset replicants=$(get_replicants)
    typeset cluster_count=$(count_cluster)
    typeset quorum=$(( ( cluster_count / 2 ) + 1 ))
    #typeset rep_quorum=$(( quorum - 1 ))

    echo "Enable reptrace"
    enable_reptrace

    echo "Disable the inactive timeout"
    disable_inactive_timeout

    echo "Enabling block_until_applied_quorum"
    enable_block_until_applied_quorum

    echo "Disabling normal replication codepath"
    set_short_replication_timeouts

    echo "Enabling replicant latency of 2 seconds on enough replicants to prevent a quorum"
    j=0
    for node in $replicants ; do
        let j=j+1
        echo "Slowing replication for $node"
        slow_replication $node 2000
    done

    echo "Inserting 10 records (this should take 20 seconds)"
    j=0
    while [[ $j -lt 10 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)"
        let j=j+1
    done

    echo "Search for bdb_block_until_applied_quorum to verify the master blocked"
    egrep "bdb_block_until_applied_quorum" ${TESTDIR}/logs/${DBNAME}.${master}.db
    r=$?
    if [[ "$r" != "0" ]]; then
        echo "Master did not execute block-until-applied-quorum codepath"
        failexit "Master did not execute block-until-applied-quorum codepath"
    fi

    echo "Increasing replicant latency to 5 seconds"
    j=0
    for node in $replicants ; do
        let j=j+1
        echo "Slowing replication for $node"
        slow_replication $node 5000
    done

    echo "Insert a record, but downgrade the master while it is waiting to apply"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)" &
    sqlpid=$!

    sleep 2
    echo "Downgrade the master"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('downgrade')"

    echo "Waiting for sqlpid to finish"
    wait

    echo "Search for bdb_block_until_applied_quorum, lock-desired case"
    egrep "bdb_block_until_applied_quorum.*lock_desired=1" ${TESTDIR}/logs/${DBNAME}.${master}.db 
    if [[ "$r" != "0" ]]; then
        echo "Master did not execute lock-desired codepath"
        failexit "Master did not execute lock-desired codepath"
    fi

    echo "Reseting tunables"
    enable_inactive_timeout
    disable_block_until_applied_quorum
    set_normal_replication_timeouts
    restore_replication_all

    echo "Verify cluster is reachable"
    j=0
    could_not_reach=1
    while [[ "$j" -lt 60 && "$could_not_reach" -ne 0 ]]; do
        let j=j+1
        could_not_reach=0
        for node in $CLUSTER ; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1"
            if [[ $? != 0 ]]; then
                echo "Could not reach $node"
                could_not_reach=1
            fi
        done
        [[ "$could_not_reach" == "1" ]] && sleep 1
    done

    echo "Success"
}

function test_inactive_timeout
{
    typeset master=$(get_master)
    typeset rep=$(choose_replicant)

    echo "Disable the inactive timeout"
    disable_inactive_timeout

    echo "Enable slow replication for $rep"
    slow_replication $rep

    echo "Inserting 10 records"
    j=0
    while [[ $j -lt 10 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)"
        let j=j+1
    done

    echo "Make sure that we are incoherent-slow"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
    if [[ "$x" != *"INCOHERENT_SLOW"* ]]; then
        failexit "Replicant never became incoherent-slow"
    fi

    echo "Keep tunable set for a minute"
    sleep 60

    echo "Make sure that we are still incoherent-slow"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
    if [[ "$x" != *"INCOHERENT_SLOW"* ]]; then
        failexit "Replicant didn't stay incoherent-slow"
    fi

    echo "Restore replication"
    restore_replication $rep

    echo "Verify that we return to 'coherent'"
    j=0
    slow=1
    while [[ "$j" -lt 200 && "$slow" == 1 ]]; do
        let j=j+1
        x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
        if [[ "$x" == *"INCOHERENT_SLOW"* ]]; then
            echo "Replicant is still incoherent-slow iteration $j"
            slow=1
            sleep 1
        else
            echo "Replicant is no longer incoherent-slow!"
            slow=0
        fi
    done

    echo "Search for is-within-bounds trace to verify this path out of incoherent-slow"
    egrep "is within bounds of second-worst node" ${TESTDIR}/logs/${DBNAME}.${master}.db
    r=$?
    if [[ "$r" != "0" ]]; then
        echo "couldn't find trace, slow-replicant-check didn't return this to coherency ??"
        failexit "slow-replicant check didn't return this to coherency"
    fi

    echo "Make sure we can select against every node"
    for node in $CLUSTER ; do
        r=1
        while [[ "$r" -ne "0" ]]; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1"
            r=$?
            [[ "$r" -ne "0" ]] && sleep 1
        done
    done

    echo "Redoing the test: enabling slow replication for $rep"

    slow_replication $rep

    echo "Inserting 10 records"
    j=0
    while [[ $j -lt 10 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)"
        let j=j+1
    done

    echo "Make sure that we are incoherent-slow"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
    if [[ "$x" != *"INCOHERENT_SLOW"* ]]; then
        failexit "Replicant never became incoherent-slow"
    fi

    echo "Keep tunable set for a minute"
    sleep 60

    echo "Make sure that we are still incoherent-slow"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
    if [[ "$x" != *"INCOHERENT_SLOW"* ]]; then
        failexit "Replicant didn't stay incoherent-slow"
    fi

    echo "Disable slow replicant check"
    disable_slow_replicant_check

    echo "Enable inactive-timeout"
    enable_inactive_timeout

    echo "Set inactive-timeout to 1 second"
    set_inactive_timeout 1

    echo "Restore replication"
    restore_replication $rep

    echo "Verify that we return to 'coherent'"
    j=0
    slow=1
    while [[ "$j" -lt 200 && "$slow" == 1 ]]; do
        let j=j+1
        x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb cluster')")
        if [[ "$x" == *"INCOHERENT_SLOW"* ]]; then
            echo "Replicant is still incoherent-slow iteration $j"
            slow=1
            sleep 1
        else
            echo "Replicant is no longer incoherent-slow!"
            slow=0
        fi
    done

    echo "Search for inactive-timeout trace to verify this path out of incoherent-slow"
    egrep "INCOHERENT_SLOW to INCOHERENT on inactive timeout" ${TESTDIR}/logs/${DBNAME}.${master}.db
    r=$?
    if [[ "$r" != "0" ]]; then
        echo "couldn't find trace, inactive timeout didn't return this to coherency ??"
        failexit "inactive timeout check didn't return this to coherency"
    fi

    echo "Make sure we can select against every node"
    for node in $CLUSTER ; do
        r=1
        while [[ "$r" -ne "0" ]]; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1"
            r=$?
            [[ "$r" -ne "0" ]] && sleep 1
        done
    done

    echo "Enable slow replicant check"
    enable_slow_replicant_check
}

function run_test
{
    test_inactive_timeout
    test_max_incoherent_slow
    test_block_until_applied_quorum
}

if [[ -z "$CLUSTER" ]]; then 
    echo "This test requires a cluster"
    exit -1
fi

export n=0 ; for x in $CLUSTER ; do let n=n+1 ; done
if [[ "$n" -lt 3 ]]; then
    echo "This test requires at least 3 nodes"
    exit -1
fi

create_table
run_test

echo "Success"

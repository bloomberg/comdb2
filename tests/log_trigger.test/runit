#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/runit_common.sh

export stopfile=./stopfile.txt
export COPYCOMDB2_EXE=${BUILDDIR}/db/copycomdb2
export DESTDB=${TESTCASE}dest${TESTID}
export REPLOG=$TESTDIR/logs/$DESTDB.db
export COPY_DBDIR=${DBDIR}/$DESTDB
export DEST_DBDIR=${COPY_DBDIR}/$DBNAME
export PHYSREP_PID=-1

function failexit
{
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function override_physrep_sp()
{
    local mnode=`getmaster`
    # Override the register_replicant stored procedure
    ${CDB2SQL_EXE} $CDB2_OPTIONS $DBNAME --host $mnode "create procedure 'sys.physrep.register_replicant' version '1' { `cat ./register_replicant.lua`  }"
}

function setup_physical_replicant
{
	mkdir -p $DEST_DBDIR
    cl="-y @$(echo $CLUSTER | tr ' ' ',')"

    if [[ "$CLUSTER" =~ .*$myhost.* ]]; then
        rmt=""
    else
        clarray=($CLUSTER)
        rmt="${clarray[0]}:"
    fi

	${COPYCOMDB2_EXE} -x ${COMDB2_EXE} -H $DESTDB $cl $rmt${DBDIR}/${DBNAME}.lrl $DEST_DBDIR $DEST_DBDIR
	if [ $? -ne 0 ]; then
	    failexit "copycomdb2 failed"
	fi
    df $DBDIR | awk '{print $1}' | grep "tmpfs\|nfs" && echo "setattr directio 0" >> $DEST_DBDIR/${DESTDB}.lrl
    echo "verbose_fills on" >> $DEST_DBDIR/${DESTDB}.lrl
    if [ -n "$PMUXPORT" ] ; then
        echo "portmux_port $PMUXPORT" >> $DEST_DBDIR/${DESTDB}.lrl
        echo "portmux_bind_path $pmux_socket" >> $DEST_DBDIR/${DESTDB}.lrl
    fi

    sed -i "s/qdump const1 const1.txt 0/qdump const1 rconst1.txt 0/g" $DEST_DBDIR/${DESTDB}.lrl
    sed -i "s/qdump const2 const2.txt 0/qdump const2 rconst2.txt 0/g" $DEST_DBDIR/${DESTDB}.lrl
    sed -i "s/qdump const3 const3.txt 1/qdump const3 rconst3.txt 1/g" $DEST_DBDIR/${DESTDB}.lrl

    (cd $DBDIR; timeout --kill-after=5s $TEST_TIMEOUT $COMDB2_EXE $DESTDB --lrl $DEST_DBDIR/${DESTDB}.lrl > $REPLOG 2>&1 &) &
    PHYSREP_PID=$!

    out=
    retries=0

    while [[ "$out" != "1" ]]; do
        out=$(${CDB2SQL_EXE} --tabs $DESTDB --host localhost 'select 1' 2>/dev/null)
        sleep 1

        let retries=retries+1
        if [ $retries -eq 10 ]; then
            failexit "Timeout waiting for local replicant to come up"
        fi
    done
}

function create_tables
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int, b blob, c longlong autoincrement)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create index t1a on t1(a)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create index t1c on t1(c)"

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table xxx(a int, b blob, c longlong autoincrement)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create index xxxa on xxx(a)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create index xxxc on xxx(c)"

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<EOF
create procedure const1 version 'v1' {$(cat consumer.lua)}\$\$
create lua consumer const1 on (table xxx for insert and update and delete)
create procedure const2 version 'v1' {$(cat consumer.lua)}\$\$
create lua consumer const2 on (table alltypes for insert and update and delete)
create procedure const3 version 'v1' {$(cat consumer.lua)}\$\$
create lua consumer const3 on (table alltypes for insert and update and delete)
create procedure noprint version 'v1' {$(cat consumer.lua)}\$\$
create lua consumer noprint on (table alltypes for insert and update and delete)
EOF
}

# Create a blob
function makebl
{
    typeset sz=$1
    typeset val=$2
    for i in $(seq 1 $sz); do
        echo -n $(echo "obase=16; $(($val % 16))" | bc);
    done
    echo
    return 0
}

function insert_alltypes
{
    s=$1
    e=$2
    typeset i
    for i in $(seq $s $e); do
        bl=$(makebl 32 $i)
        echo "insert into alltypes (alltypes_short, alltypes_ushort, alltypes_int, alltypes_uint, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_datetime, alltypes_datetimeus, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ($i, $i, $i, $i, $i, '$i.$i', $i.$i, x'$bl', 'abcdefghij$i', cast(\"2015-02-23T080000.$i\" as datetime), cast(\"2015-02-23T080000.$i\" as datetimeus), cast($i as years), cast($i as days), cast($i as days), '$(($i % 1000)).$(($i % 1000))e$(($i % 92))', '$(($i % 1000)).$(($i % 1000))e$(($i % 381))', '$(($i % 1000)).$(($i % 1000))e$(($i % 6141))')"
    done | $CDB2SQL_EXE -s ${CDB2_OPTIONS} $DBNAME default - >/dev/null
}

function insert_records
{
    j=0
    while [[ $j -lt 10 ]]; do

        bl=$(makebl 16 $j)
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a, b) select *, x'$bl' from generate_series(1, 10)"
        bl=$(makebl 16 $j)
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into xxx(a, b) select *, x'$bl' from generate_series(1, 10)"
        insert_alltypes 1 10
        let j=j+1
    done
}

function insert_big
{
    j=0
    while [[ $j -lt 5 ]]; do
        bl=$(makebl 16384 $j)
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into xxx(a, b) select *, x'$bl' from generate_series(1, 1)"
        let j=j+1
    done
}

function update_records
{
    j=1
    m=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select max(c) from t1")
    while [[ $j -le $m ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update t1 set a=a+1 where c = $j"
        let j=j+1
    done


    j=1
    m=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select max(c) from xxx")
    while [[ $j -le $m ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update xxx set a=a+1 where c = $j"
        let j=j+1
    done

    j=1
    m=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select max(c) from alltypes")
    while [[ $j -le $m ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update alltypes set alltypes_short = alltypes_short, alltypes_ushort = alltypes_ushort, alltypes_int = alltypes_int, alltypes_uint = alltypes_uint, alltypes_longlong = alltypes_longlong, alltypes_float = alltypes_float, alltypes_double = alltypes_double, alltypes_byte = alltypes_byte, alltypes_cstring = alltypes_cstring, alltypes_datetime = alltypes_datetime, alltypes_datetimeus = alltypes_datetimeus, alltypes_intervalym = alltypes_intervalym, alltypes_intervalds = alltypes_intervalds, alltypes_intervaldsus = alltypes_intervaldsus, alltypes_decimal32 = alltypes_decimal32, alltypes_decimal64 = alltypes_decimal64, alltypes_decimal128 = alltypes_decimal128 where j = $j"
        let j=j+1
    done
}

function delete_records
{
    j=1
    m=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select max(c) from t1")
    while [[ $j -le $m ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "delete from t1 where c = $j"
        let j=j+1
    done

    j=1
    m=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select max(c) from xxx")
    while [[ $j -le $m ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "delete from xxx where c = $j"
        let j=j+1
    done

    j=1
    m=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select max(c) from alltypes")
    while [[ $j -le $m ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "delete from alltypes where c = $j"
        let j=j+1
    done
}

function find_log_trigger_trace_node
{
    typeset node=$1
    typeset trace=$2
    log=$TESTDIR/logs/logtrigger${TESTID}.${node}.db
    egrep log_trigger_callback $log | egrep $trace
}

function find_log_trigger_trace_physrep
{
    log=$TESTDIR/logs/$DESTDB.db
}

function find_queue_trigger_trace_node
{
    typeset node=$1
    typeset trace=$2
    log=$TESTDIR/logs/logtrigger${TESTID}.${node}.db
    egrep "Processing record for" $log | egrep $trace
}

function find_trigger_trace_physrep
{
    x=$(egrep log_trigger_callback $REPLOG | egrep xxx)
    if [[ -z $x ]]; then
        failexit "Couldn't find trigger trace in physrep-log"
    fi
    echo "$x"
}

function find_trigger_trace
{
    found=0
    for node in $CLUSTER ; do
        x=$(find_log_trigger_trace_node $node xxx)
        if [[ -n $x ]]; then
            found=1
        fi
        echo "$x"
    done

    if [[ "$found" == 0 ]]; then
        failexit "Couldn't find trigger trace in log"
    fi
}

function check_trigger_trace
{
    x=$(find_trigger_trace)
    if [[ -z $x ]]; then
        failexit "Trigger did not fire"
    fi
    x=$(find_trigger_trace_physrep)
    if [[ -z $x ]]; then
        failexit "Trigger did not fire in physrep"
    fi
    echo "Found trigger trace"
    echo "$x"
}

function check_no_noprint
{
    found=0
    for node in $CLUSTER ; do
        log=$TESTDIR/logs/logtrigger${TESTID}.${node}.db
        egrep "log_trigger" $log | egrep "noprint"
        if [[ $? -eq 0 ]]; then
            found=1
        fi
    done

    if [[ "$found" == 1 ]]; then
        failexit "Found noprint extraneous trace in log"
    fi
}

function check_dropped_trace
{
    found=0
    for node in $CLUSTER ; do
        log=$TESTDIR/logs/logtrigger${TESTID}.${node}.db
        egrep "__qconst3 dropped" $log
        if [[ $? -eq 0 ]]; then
            found=1
        fi
    done

    if [[ "$found" == 0 ]]; then
        failexit "Couldn't find dropped trace in log"
    fi

    egrep "__qconst3 dropped" $REPLOG
    if [[ $? -ne 0 ]]; then
        failexit "Couldn't find dropped trace in physrep"
    fi
}

function check_empty_dump_output
{
    typeset fl=$1
    typeset empty=1
    log=$TESTDIR/logtrigger${TESTID}/$fl.txt

    for node in $CLUSTER ; do
        scp $node:$log $log.${node}
        if [[ -s $log.${node} ]]; then
            empty=0
        fi
    done

    prlog=$TESTDIR/r${fl}.txt
    if [[ -s $prlog ]]; then
        echo "Non-empty physrep $prlog was found"
        empty=0
    fi

    if [[ "$empty" == 0 ]]; then
        failexit "non-empty $log was found"
    fi
}

function check_queue_dump_output
{
    typeset fl=$1
    typeset found=0
    log=$TESTDIR/logtrigger${TESTID}/$fl.txt
    gunzip $fl.expected.gz

    for node in $CLUSTER ; do
        scp $node:$log $log.${node}
        if [[ -s $log.${node} ]]; then
            found=1
            egrep -vi "genid|epoch|Commit-lsn" $log.${node} > $log.${node}.clean
            diff $log.${node}.clean $fl.expected
            r=$?
            if [[ $r -ne 0 ]]; then
                echo "Failed: $log.${node}.clean does not match $(pwd)/$fl.expected"
                exit 1
            fi
        fi
    done
    if [[ "$found" == 0 ]]; then
        failexit "non-empty $log was not found"
    fi

    # physrep name is prepended by r
    prlog=$TESTDIR/$DBNAME/r${fl}.txt
    egrep -vi "genid|epoch|Commit-lsn" $prlog > ${prlog}.clean
    diff ${prlog}.clean $fl.expected
    r=$?
    if [[ $r -ne 0 ]]; then
        echo "Failed: physrep ${prlog}.clean does not match $(pwd)/$fl.expected"
        exit 1
    fi
}

function setup
{
    override_physrep_sp
    setup_physical_replicant
}

function run_test
{
    rm $stopfile 2>/dev/null
    create_tables
    insert_records
    insert_big
    update_records
    delete_records

    # Sleep a bit: make sure physrep is caught up
    echo "Sleeping for 10"
    sleep 10

    check_trigger_trace
    check_queue_dump_output const1
    check_queue_dump_output const2
    check_empty_dump_output const3
    check_dropped_trace
    check_no_noprint
}

if [[ -z $CLUSTER ]]; then
    failexit "This test requires a cluster"
fi

trap - INT EXIT

setup
run_test

if [[ $PHYSREP_PID -ne -1 ]]; then
    kill -9 $PHYSREP_PID
fi

if [[ -f "$stopfile" ]]; then
    echo "Testcase failed"
    exit 1
else
    echo "Success"
    exit 0
fi

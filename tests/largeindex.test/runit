#!/usr/bin/env bash
bash -n "$0" | exit 1

source ${TESTSROOTDIR}/tools/runit_common.sh
# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


# Update all records in the table
function update_all_records
{
    typeset prmsg=$1
    typeset iter=0

    [[ "$debug" == 1 ]] && set -x

    while :; do 

        cdb2sql -s ${CDB2_OPTIONS} $dbnm default "update t1 set c=x'1234' where b='test1'" &> /dev/null
        let iter=iter+1

        if [[ -n "$prmsg" && $(( iter % prmsg )) == 0 ]]; then

            echo "Updated all of table t1 $iter times."

        fi

    done
}

function update_records
{
    j=0
    nrecs=$1
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+10000 where a = $j" >> update.out 
        let j=j+1
    done
}

function insert_records_oneshot
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        printf "insert into t1(a,b,c) values ($j,'hex 0x%06X',$j)\n" $j
        let j=j+1
    done | cdb2sql ${CDB2_OPTIONS} $dbnm default - &> $insfl
}

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
echo "creating table t1 with index less than 512 bytes"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1.csc2 ` }"
if [ $? != 0 ] ; then
    failexit "could not create table t1"
fi

echo "creating table t1 with index greater than 512 bytes"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t2  { `cat t2.csc2 ` }"
if [ $? == 0 ] ; then
    failexit "should not be able to create table t2"
fi


echo "Add table with long tablename 32 characters-- should not succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
create table t2345678901234567890123456789012 {
schema
{
   int  id
   blob b1 null=yes
}
}\$\$
EOF
if [[ $? == 0 ]]; then
    failexit "Schemachange has succeded and thats a problem"
fi


echo "Add table with long tablename 31 characters-- should succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
drop table if exists t234567890123456789012345678901 
create table t234567890123456789012345678901 {
schema
{
   int  id
   blob b1 null=yes
}
}\$\$
EOF
if [[ $? != 0 ]]; then
    failexit "Schemachange has failed and thats a problem"
fi


echo "Add table t4 needed for alters"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
drop table if exists t4
create table t4 {
schema
{
   int  id
   blob b1 null=yes
}
}\$\$
EOF
if [[ $? != 0 ]]; then
    failexit "Schemachange has failed"
fi


echo "Add index with spaces -- should not succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
create table t5 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "KEYWITH SPACE"  = id
}
}\$\$
EOF
if [[ $? == 0 ]]; then
    failexit "Schemachange has succeded and thats a problem"
fi


echo "Alter index with spaces -- should not succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
alter table t4 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "KEYWITH SPACE"  = id
}
}\$\$
EOF
if [[ $? == 0 ]]; then
    failexit "Schemachange has succeded and thats a problem"
fi



echo "Add index with empty name -- should not succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
create table t5 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup ""  = id
}
}\$\$
EOF
if [[ $? == 0 ]]; then
    failexit "Schemachange has succeded and thats a problem"
fi



echo "Alter index with empty name -- should not succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
alter table t4 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup ""  = id
}
}\$\$
EOF
if [[ $? == 0 ]]; then
    failexit "Schemachange has succeded and thats a problem"
fi


echo "Add long index name -- 54 chars should not succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
create table t5 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "KEY_12345678901234567890123456789012345678901234567890"  = id  // 54 characters -- too long
}
}\$\$
EOF
if [[ $? == 0 ]]; then
    failexit "Schemachange has succeded and thats a problem"
fi


echo "Alter long index name -- 54 chars should not succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
alter table t4 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "KEY_12345678901234567890123456789012345678901234567890"  = id  // 54 characters -- too long
}
}\$\$
EOF
if [[ $? == 0 ]]; then
    failexit "Schemachange has succeded and thats a problem"
fi

echo "Add long index name -- 53 chars should succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
create table t5 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "KEY_1234567890123456789012345678901234567890123456789"  = id  // 53 characters -- should work
}
}\$\$
EOF
if [[ $? != 0 ]]; then
    failexit "Schemachange has failed and thats a problem"
fi


echo "Alter long index name -- 53 chars should succeed"
cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
alter table t4 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "KEY_1234567890123456789012345678901234567890123456789"  = id  // 53 characters -- should work
}
}\$\$
EOF
if [[ $? != 0 ]]; then
    failexit "Schemachange has failed and thats a problem"
fi




INITCNT=100
echo "Test with insert, updates, deletes into t1"

insert_records_oneshot 1 $INITCNT

assertcnt t1 $INITCNT
do_verify t1

NEWCNT=$((INITCNT*2))

insert_records_oneshot $INITCNT $NEWCNT
assertcnt t1 $NEWCNT
do_verify t1

> shouldhave.txt
i=1
while [ $i -le $NEWCNT ] ; do 
    printf "(a=$i, b='hex 0x%06X', c=$i)\n" $i >> shouldhave.txt
    let i=i+1
done

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by a" > have_a.txt
if ! diff have_a.txt shouldhave.txt ; then
    failexit "have_a.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by b" > have_b.txt
if ! diff have_b.txt shouldhave.txt ; then
    failexit "have_b.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by c" > have_c.txt
if ! diff have_c.txt shouldhave.txt ; then
    failexit "have_c.txt shouldhave.txt differ"
fi    


cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+100000, a=a+100000 where 1" > update.txt
> shouldhave.txt
i=1
while [ $i -le $NEWCNT ] ; do 
    printf "(a=$((100000+i)), b='hex 0x%06X', c=$((100000+i)))\n" $i >> shouldhave.txt
    let i=i+1
done

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by a" > have_a.txt
if ! diff have_a.txt shouldhave.txt ; then
    failexit "have_a.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by b" > have_b.txt
if ! diff have_b.txt shouldhave.txt ; then
    failexit "have_b.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by c" > have_c.txt
if ! diff have_c.txt shouldhave.txt ; then
    failexit "have_c.txt shouldhave.txt differ"
fi    



do_verify t1
cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t1 where c % 2 = 1"

> shouldhave.txt
i=0
while [ $i -lt $NEWCNT ] ; do 
    let i=i+1
    if [ $((i%2)) -eq 1 ]; then 
        continue 
    fi
    printf "(a=$((100000+i)), b='hex 0x%06X', c=$((100000+i)))\n" $i >> shouldhave.txt
done

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by a" > have_a.txt
if ! diff have_a.txt shouldhave.txt ; then
    failexit "have_a.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by b" > have_b.txt
if ! diff have_b.txt shouldhave.txt ; then
    failexit "have_b.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by c" > have_c.txt
if ! diff have_c.txt shouldhave.txt ; then
    failexit "have_c.txt shouldhave.txt differ"
fi    


do_verify t1
cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild t1"  > rebuild.txt 


echo "Success"

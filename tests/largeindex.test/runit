#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


function failexit
{
    echo "Failed $1"
    exit -1
}

function assertcnt 
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}


function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


# Update all records in the table
function update_all_records
{
    typeset prmsg=$1
    typeset iter=0

    [[ "$debug" == 1 ]] && set -x

    while :; do 

        cdb2sql -s ${CDB2_OPTIONS} $dbnm default "update t1 set c=x'1234' where b='test1'" &> /dev/null
        let iter=iter+1

        if [[ -n "$prmsg" && $(( iter % prmsg )) == 0 ]]; then

            echo "Updated all of table t1 $iter times."

        fi

    done
}

function update_records
{
    j=0
    nrecs=$1
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+10000 where a = $j" >> update.out 
        let j=j+1
    done
}

function insert_records_oneshot
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        str=`echo $j | awk '{printf ("0x%06X", $1)}'`
        echo "insert into t1(a,b,c) values ($j,'hex $str',$j)"  
        let j=j+1
    done | cdb2sql ${CDB2_OPTIONS} $dbnm default - &> $insfl
}

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
echo "creating table t1 with index less than 512 bytes"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1.csc2 ` }"
if [ $? != 0 ] ; then
    failexit "could not create table t1"
fi

echo "creating table t1 with index greater than 512 bytes"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t2  { `cat t2.csc2 ` }"
if [ $? == 0 ] ; then
    failexit "should not be able to create table t2"
fi


INITCNT=100
echo "Test with insert, updates, deletes"

insert_records_oneshot 1 $INITCNT

assertcnt $INITCNT
do_verify

NEWCNT=$((INITCNT*2))

insert_records_oneshot $INITCNT $NEWCNT
assertcnt $NEWCNT
do_verify

> shouldhave.txt
for i in `seq 1 $NEWCNT` ; do 
    str=`echo $i | awk '{printf ("0x%06X", $1)}'`
    echo "(a=$i, b='hex $str', c=$i)" >> shouldhave.txt
done

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by a" > have_a.txt
if ! diff have_a.txt shouldhave.txt ; then
    failexit "have_a.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by b" > have_b.txt
if ! diff have_b.txt shouldhave.txt ; then
    failexit "have_b.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by c" > have_c.txt
if ! diff have_c.txt shouldhave.txt ; then
    failexit "have_c.txt shouldhave.txt differ"
fi    


cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+100000, a=a+100000 where 1" > update.txt
> shouldhave.txt
for i in `seq 1 $NEWCNT` ; do 
    str=`echo $i | awk '{printf ("0x%06X", $1)}'`
    echo "(a=$((100000+i)), b='hex $str', c=$((100000+i)))" >> shouldhave.txt
done

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by a" > have_a.txt
if ! diff have_a.txt shouldhave.txt ; then
    failexit "have_a.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by b" > have_b.txt
if ! diff have_b.txt shouldhave.txt ; then
    failexit "have_b.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by c" > have_c.txt
if ! diff have_c.txt shouldhave.txt ; then
    failexit "have_c.txt shouldhave.txt differ"
fi    



do_verify
cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t1 where c % 2 = 1"

> shouldhave.txt
for i in `seq 1 $NEWCNT` ; do 
    if [ $((i%2)) -eq 1 ]; then 
        continue 
    fi
    str=`echo $i | awk '{printf ("0x%06X", $1)}'`
    echo "(a=$((100000+i)), b='hex $str', c=$((100000+i)))" >> shouldhave.txt
done

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by a" > have_a.txt
if ! diff have_a.txt shouldhave.txt ; then
    failexit "have_a.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by b" > have_b.txt
if ! diff have_b.txt shouldhave.txt ; then
    failexit "have_b.txt shouldhave.txt differ"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c from t1 order by c" > have_c.txt
if ! diff have_c.txt shouldhave.txt ; then
    failexit "have_c.txt shouldhave.txt differ"
fi    


do_verify
cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild table t1  }"  > rebuild.txt 


echo "Success"

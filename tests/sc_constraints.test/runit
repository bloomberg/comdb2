#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

# Grab my database name.
dbnm=$1
if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

rebuild=1
if [ "x$2" == "xnorebuild" ] ; then
    rebuild=0
fi

tbl=t2
newtbl=t3
morecnstrttbl=t4
failcnstrttbl=t5
foreigntbl=t1


# Number of records I will add.
nrecs=2000

# Max number of schema changes
max_nusc=1000

function failexit
{
    echo "Failure: $1"
    exit -1
}

function assertcnt 
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from $tbl")
    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}

function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


function do_alter
{
    locnewtbl=$1
    echo "do alter t2 -> ${locnewtbl}"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table $tbl { `cat ${locnewtbl}.csc2 ` }"

    if [[ $? -ne 0 ]]; then
        touch failedalter
    fi
}


function do_sc_track_pid
{
    typeset loc_dbnm=$1
    typeset loc_tbl=$2
    typeset track_pid=$3
    typeset scnt=0
    typeset failed=0
    while `kill -0 $track_pid 2>/dev/null` && [[ $scnt -lt $max_nusc ]]; do

        v=$((scnt%2 + 2)) #2 or 3
        csc=t${v}.csc2

        echo "Running rebuild iteration $scnt: $loc_tbl $csc"
        cdb2sql ${CDB2_OPTIONS} $loc_dbnm default "alter table $loc_tbl { `cat $csc ` }"

        if [[ $? != 0 ]]; then
            echo "Error schema-changing on iteration $scnt"
            echo "NOTE: schemachange above CORRECTLY failed"
            failed=1
        fi

        do_verify 
        let scnt=scnt+1
        #sleep 1
    done

    echo "Performed $scnt schema-changes."

    if [ $failed -eq 0 ] ; then
        echo "Testcase failed: SC succeeded $scnt times"
        exit 1
    fi

    return 0
}


function do_rebuild_track_pid
{
    typeset loc_dbnm=$1
    typeset loc_tbl=$2
    typeset track_pid=$3
    typeset scnt=0
    while `kill -0 $track_pid 2>/dev/null` && [[ $scnt -lt $max_nusc ]]; do

        echo "Running rebuild iteration $scnt"
        cdb2sql ${CDB2_OPTIONS} $loc_dbnm default "rebuild $loc_tbl"

        if [[ $? != 0 ]]; then
            echo "Error schema-changing on iteration $scnt"
            echo "Testcase failed"
            kill -9 $track_pid
            exit 1
        fi

        do_verify 
        let scnt=scnt+1
        #sleep 1
    done

    echo "Performed $scnt schema-changes."

    return 0
}




function do_rebuild
{
    typeset max=$1
    typeset scnt=0
    while [[ $scnt -lt $max ]]; do 

        echo "Running rebuild iteration $scnt"
        cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"

        if [[ $? != 0 ]]; then
            echo "Error schema-changing on iteration $scnt"
            echo "Testcase failed"
            return 1
        fi
        let scnt=scnt+1
        do_verify
    done
    assertcnt $nrecs

    return 0
}



function delete_records
{
    j=1
    remaining=$nrecs
    echo
    echo "Deleting $nrecs records."
    echo "" > delete.out
    strt=$(date +%s)

    while [[ $j -le $nrecs ]]; do 
         cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from $tbl where a = $j" >> delete.out 2>&1 || $(echo "ERROR DELETING"; exit -1)
         cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from $foreigntbl where a = $j" >> delete_${foreigntbl}.out 2>&1 || $(echo "ERROR DELETING"; exit -1)
         let j=j+1
	     let remaining=remaining-1
         #assertcnt $remaining
         #sleep 0.1
    done
    end=$(date +%s)
    echo "delete_records took $((end - strt)) sec."
}

function insert_foreign
{
    j=1
    locnrecs=$1
    echo
    echo "Inserting $locnrecs records to tbl $foreigntbl."

    while [[ $j -le $locnrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into $foreigntbl(a) values ($j)"  >> insert_${foreigntbl}.out 2>&1
        let j=j+1
    done
}


function insert_records
{
    j=1
    locnrecs=$1
    slptm=$2

    echo
    echo "Inserting $locnrecs records."
    strt=$(date +%s)

    while [[ $j -le $locnrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into $tbl(a,b,c,d,e,f) values ($j,'test1',x'1234',$j, $((j*2)),$j)"  >> insert.out 2>&1
        #assertcnt $j
        let j=j+1
        if [ $slptm -gt 0 ] ; then
            sleep $slptm
        fi
    done
    end=$(date +%s)
    echo "insert_records took $((end - strt)) sec."
}


function runsql_from_fl_with_time 
{
    sqlfl=$1
    exec 3>&1 4>&2
    sqltime=$(TIMEFORMAT="%R"; { time cdb2sql -f $sqlfl ${CDB2_OPTIONS} $dbnm default 1>&3 2>&4; } 2>&1)
    exec 3>&- 4>&-
}


function addrecords
{
    echo "addrecords $@"
    typeset loc_DB=$1
    typeset loc_tbl=$2
    typeset loc_i=$3
    typeset loc_max=$4
    typeset loc_transize=0
    typeset loc_tran=0

    if [ "x$5" != "x" ] ; then
        loc_transize=$5
    fi
    r=$RANDOM
    sqlfl=add.sql.${r}
    > $sqlfl
    timefl=add.time

    while [ $loc_i -le $loc_max ] ; do
        if [[ $loc_transize -gt 0 && $loc_tran -eq 0 ]] ; then
            echo "BEGIN" > $sqlfl
        fi
        echo "INSERT INTO $loc_tbl values($loc_i, 'test1', x'1234', $((loc_i*2)), $loc_i, $((loc_i*2))) " >> $sqlfl
        let loc_tran=loc_tran+1
        let loc_i=loc_i+1

        if [[ $loc_transize -gt 0 && $loc_tran -ge $loc_transize ]] ; then
            echo "COMMIT" >> $sqlfl
            loc_tran=0

            #will set $sqltime
            runsql_from_fl_with_time $sqlfl
            echo "sqltime $sqltime"
            echo $sqltime >> $timefl
            rm $sqlfl
        elif [[ $loc_transize -eq 0 ]] ; then
            #will set $sqltime
            runsql_from_fl_with_time $sqlfl
            echo $sqltime >> $timefl
            rm $sqlfl
        fi
    done  
    rm $sqlfl 2> /dev/null
}




#first with table without foreign constraints
function run_first_test
{
    nrecs=$1
	echo 
	echo "runfirst_test $nrecs : add foreign constraints, SC only, SC should fail"

    > insert.out
    insert_records $nrecs 0
    assertcnt $nrecs
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table $tbl { `cat ${newtbl}.csc2 ` }"
    if [ $? -eq 0 ] ; then
        failexit "SC should have failed due to foreign constraint viloation"
    fi

    echo "SC correctly failed due to foreign constraint violation"

    assertcnt $nrecs
    do_verify

    delete_records 
    assertcnt 0
    do_verify
}



function run_second_test
{
	echo 
	echo "run_second_test: SC in background, insert and update record which will introduce constraint, SC should fail"

    EXTRA=10000
	echo "adding $EXTRA records to one stripe"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure addrecs($EXTRA)"  #add large numbers at offset > 0.1M

    #SC_FORCE_DELAY is needed because "verify constraints" is very-very fast
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
	echo "start rebuild for alter tbl in background"
    do_alter $newtbl &

	echo "delay 2 sec, then start insert which will conflict SC"
    sleep 2

	echo "doing conflicting insert"
    insert_records 1 0
    
    wait
    if [ ! -f failedalter ] ; then
        failexit "SC did not fail and thats an error in this case"
    fi
    rm failedalter

    echo "SC correctly failed due to foreign constraint violation"
    assertcnt $((EXTRA+1))
    do_verify

    echo "add 1 missing"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a) select e from t2 where e not in t1"  

	echo "start rebuild for alter tbl in background"
    do_alter $newtbl &

	echo "delay 2 sec, then start update which will conflict SC"
    sleep 2

    cdb2sql ${CDB2_OPTIONS} $dbnm default "update t2 set d=2 where d = 1"
    wait

    if [ ! -f failedalter ] ; then
        failexit "SC did not fail and thats an error in this case"
    fi
    rm failedalter


    echo "SC correctly failed due to foreign constraint violation"
    assertcnt $((EXTRA+1))
    do_verify

    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 0')"

    echo "rebuild tbl for verification"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"

    if [ $? -ne 0 ] ; then
        failexit "SC should not fail rebuild"
    fi
}


function run_third_test
{
    typeset ipid=''
    nrecs=$1
	echo 
	echo "run_third_test $nrecs: insert records in background, SC to rebuild, all should succeed"

    EXTRA=10000
	echo "adding $EXTRA records to one stripe"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure addrecs($EXTRA)"  #add large numbers at offset > 0.1M

	echo "adding $nrecs foreign records"
    insert_foreign $nrecs

	echo "adding $nrecs records in the background"
    insert_records $nrecs 0 &
    ipid=$!

    if [ $rebuild -eq 1 ] ; then
        do_rebuild_track_pid $dbnm $tbl $ipid
    fi
    wait

    assertcnt $((EXTRA+nrecs))
    do_verify

    echo "deleting all records in background"
    delete_records &
    upid=$!

    if [ $rebuild -eq 1 ] ; then
        do_rebuild_track_pid $dbnm $tbl $upid
    fi
    wait

    assertcnt $EXTRA
    do_verify
}

function run_fourth_test
{
    typeset ipid=''
    nrecs=$1
	echo 
	echo "run_fourth_test $nrecs: insert records in background, SC to add more constraints, all should succeed"

    EXTRA=10000
	echo "adding $EXTRA records to one stripe"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure addrecs($EXTRA)"  #add large numbers at offset > 0.1M

	echo "adding $nrecs foreign records"
    insert_foreign $nrecs

	echo "adding $nrecs records in the background"
    insert_records $nrecs 0 &

    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
	echo "adding a constraint but sc shoud not fail (cause we added foreign records first)"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table $tbl { `cat ${morecnstrttbl}.csc2 ` }"

    if [ $? -ne 0 ] ; then
        failexit "SC should NOT have failed due to foreign constraint viloation"
    fi

    wait

    assertcnt $((EXTRA+nrecs))
    do_verify
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 0')"
    echo "rebuild tbl for verification"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"
    if [ $? -ne 0 ] ; then
        failexit "SC should not fail rebuild"
    fi
}



function run_fifth_test
{
    typeset ipid=''
    nrecs=$1
	echo 
	echo "run_fifth_test: SC to add more constraints, SC should fail"

    EXTRA=10000
	echo "adding $EXTRA records to one stripe"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure addrecs($EXTRA)"  #add large numbers at offset > 0.1M

	echo "altering in a way that will fail"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table $tbl { `cat ${failcnstrttbl}.csc2 ` }"

    if [ $? -eq 0 ] ; then
        failexit "SC should have failed due to foreign constraint viloation"
    fi

    echo "SC correctly failed due to foreign constraint violation"

    assertcnt $((EXTRA))
    do_verify
    echo "rebuild tbl for verification"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"
    if [ $? -ne 0 ] ; then
        failexit "SC should not fail rebuild"
    fi
}



function run_sixth_test
{
    typeset ipid=''
    nrecs=$1
	echo 
	echo "run_sixth_test: insert violating records, SC to add more constraints, SC should fail"

    EXTRA=10000
	echo "adding $EXTRA records to one stripe"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure addrecs($EXTRA)"  #add large numbers at offset > 0.1M

    cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a) select e from t2 where e not in t1"  #add missing t2.e

	echo "adding $nrecs foreign records" # no issues with col t2.a
    insert_foreign $nrecs

    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"

	echo "adding $nrecs records in the background"
    insert_records $nrecs 0 &

	echo "altering in a way that will fail"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table $tbl { `cat ${failcnstrttbl}.csc2 ` }"
    if [ $? -eq 0 ] ; then
        failexit "SC should have failed due to foreign constraint viloation"
    fi

    echo "SC correctly failed due to foreign constraint violation"
    wait

    assertcnt $((EXTRA+nrecs))
    do_verify
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 0')"

    echo "rebuild tbl for verification"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"
    if [ $? -ne 0 ] ; then
        failexit "SC should not fail rebuild"
    fi
}


#like second test, but adding more constraints
function run_seventh_test
{
    typeset ipid=''
    nrecs=$1
	echo 
	echo "run_seventh_test: SC to add more constraints, insert/update viol records, SC should fail"

    EXTRA=10000
	echo "adding $EXTRA records to one stripe"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure addrecs($EXTRA)"  #add large numbers at offset > 0.1M

    cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a) select e from t2 where e not in t1"  #add missing t2.e

	echo "adding $nrecs foreign records" # no issues with col t2.a
    insert_foreign 1

    #SC_FORCE_DELAY is needed because "verify constraints" is very-very fast
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"

    echo "start rebuild for alter tbl in background"
    do_alter $failcnstrttbl &

	echo "delay 2 sec, then start insert which will conflict SC"
    sleep 2

    echo "insert will have issue with constraints on t2.e"
    insert_records 1 0
    wait

    if [ ! -f failedalter ] ; then
        failexit "SC did not fail and thats an error in this case"
    fi
    rm failedalter


    echo "SC correctly failed due to foreign constraint violation"
    assertcnt $((EXTRA+1))
    do_verify
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 0')"

    echo "rebuild tbl for verification"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"
    if [ $? -ne 0 ] ; then
        failexit "SC should not fail rebuild"
    fi

    echo "add 1 missing"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a) select e from t2 where e not in t1"  


    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"

    echo "start rebuild for alter tbl in background"
    do_alter $failcnstrttbl &

	echo "delay 2 sec, then start update which will conflict SC"
    sleep 2

    echo "update will have issue with constraints on t2.e"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "update t2 set e=13 where e = 2"
    wait

    if [ ! -f failedalter ] ; then
        failexit "SC did not fail and thats an error in this case"
    fi
    rm failedalter

    echo "SC correctly failed due to foreign constraint violation"
    assertcnt $((EXTRA+1))
    do_verify

    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 0')"

    echo "rebuild tbl for verification"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"
    if [ $? -ne 0 ] ; then
        failexit "SC should not fail rebuild"
    fi
}

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `

function flushall 
{
    for node in $cluster; do
        cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('flush')"
    done
}



echo "running test in machine $(hostname):${PWD}"
master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`

#comdb2sc $dbnm delsp addrecs 2
#comdb2sc $dbnm delsp addrecs 1
#comdb2sc $dbnm delsp addrecs 0
#comdb2sc $dbnm addsp addrecs addrecs.lua
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default - <<EOF
create procedure addrecs version 'sptest' {$(cat addrecs.lua)}\$\$
put default procedure addrecs 'sptest'
EOF

function dontrun {
    echo "blah"
}

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat t2.csc2 ` }"

run_first_test 100
flushall

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat t2.csc2 ` }"

run_second_test 
flushall


cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat t2.csc2 ` }"


g=100
while [ $g -le 200 ] ; do 
    rm insert_${foreigntbl}.out
	run_third_test $g
    flushall
    let g=g+g
done


cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat t2.csc2 ` }"



run_fourth_test 1000
flushall


cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat t2.csc2 ` }"


run_fifth_test
flushall


cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat t2.csc2 ` }"


run_sixth_test 1000
flushall


cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat t2.csc2 ` }"

run_seventh_test 1000
flushall

#run seventh test again but now with a different original newtbl
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat t2.csc2 ` }"

run_seventh_test 1000
flushall

echo "Success"

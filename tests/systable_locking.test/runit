#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/ddl.sh

[[ $debug == "1" ]] && set -x

export TESTITERS=20
export TESTQUEUEITERS=20
export MAXTABLES=20
export MAXVIEWS=20
export MAXQUEUES=20
export STOP_TRIGGERS_TEST_TOUCHFILE="stop_triggers_test.txt"
export STOP_TABLES_TEST_TOUCHFILE="stop_tables_test.txt"

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    typeset f=$1
    write_prompt $func "$f failed: $2"
    exit -1
}

# The test will pass this after all the "chunked" changes are checked in
function stat_all_tables
{
    [[ $debug == "1" ]] && set -x
    t=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "SELECT * FROM COMDB2_SYSTABLES")
    for x in $t; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "SELECT * FROM $x LIMIT 10" >/dev/null 2>&1
    done
}

function enable_sleep_in_trigger_info
{
    [[ $debug == "1" ]] && set -x
    if [[ -z "$CLUSTER" ]]; then
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put tunable 'debug_sleep_in_trigger_info' 1" >/dev/null 2>&1
    else
        for m in $CLUSTER ; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $m "put tunablel 'debug_sleep_in_trigger_info' 1" >/dev/null 2>&1
        done
    fi
}

function disable_sleep_in_trigger_info
{
    [[ $debug == "1" ]] && set -x
    if [[ -z "$CLUSTER" ]]; then
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put tunable 'debug_sleep_in_trigger_info' 0" >/dev/null 2>&1
    else
        for m in $CLUSTER ; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $m "put tunablel 'debug_sleep_in_trigger_info' 0" >/dev/null 2>&1
        done
    fi
}

function write_tables
{
    [[ $debug == "1" ]] && set -x
    for (( x = 0 ; x < MAXTABLES ; ++x )) ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t$x SELECT * FROM generate_series LIMIT 10" >/dev/null 2>&1
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "UPDATE t$x SET a=1 WHERE a=1 LIMIT 10" >/dev/null 2>&1
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "SELECT * FROM t$x" >/dev/null 2>&1
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "DELETE FROM t$x LIMIT 9" >/dev/null 2>&1
    done
}

function write_tables_loop
{
    [[ $debug == "1" ]] && set -x
    let count=0
    while [[ ! -f $STOP_TABLES_TEST_TOUCHFILE ]];  do
        let count=count+1
        write_tables
        [[ $(( count % 10 )) == 0 ]] && echo "Completed $count write_tables"
    done
}

function select_triggers_loop
{
    [[ $debug == "1" ]] && set -x
    typeset j=0
    while [[ ! -f $STOP_TABLES_TEST_TOUCHFILE ]];  do
        let j=j+1
        if [[ $(( j % 2 )) == 1 ]]; then
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "SELECT * FROM comdb2sys_triggers" >/dev/null 2>&1
        else
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "SELECT * FROM comdb2_triggers" >/dev/null 2>&1
        fi
    done
}

function start_select_triggers
{
    [[ $debug == "1" ]] && set -x
    typeset cnt=${1:-10}
    for (( x = 0 ; x < cnt ; ++x )) ; do
        select_triggers_loop &
    done
}

function drop_tables
{
    [[ $debug == "1" ]] && set -x
    for (( x = 0 ; x < MAXTABLES ; ++x )) ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t$x"
    done
}

function drop_views
{
    [[ $debug == "1" ]] && set -x
    for (( x = 0 ; x < MAXVIEWS ; ++x )) ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop view v$x"
    done
}

function create_views
{
    [[ $debug == "1" ]] && set -x
    for (( x = 0 ; x < MAXVIEWS ; ++x )) ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create view v$x as select a from t$x"
    done
}

function create_tables
{
    [[ $debug == "1" ]] && set -x
    for (( x = 0 ; x < MAXTABLES ; ++x )) ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t$x (a int)"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create index ix$x on t$x(a)"
    done
}

function drop_triggers
{
    [[ $debug == "1" ]] && set -x
    for (( x = 0 ; x < MAXQUEUES ; ++x )) ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop lua trigger audit$x"
    done
}



function create_triggers
{
    [[ $debug == "1" ]] && set -x
    for (( x = 0 ; x < MAXQUEUES ; ++x )) ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create lua trigger audit$x on (table foraudit for insert and update and delete)"
    done
}

function setup
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table foraudit {$(<foraudit.csc2)}"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table audit {$(<audit.csc2)}"

    for (( x = 0 ; x < MAXQUEUES ; ++x )) ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create procedure audit$x {$(<audit.lua)}"
    done

}

function stat_tables_loop
{
    [[ $debug == "1" ]] && set -x
    let count=0
    while [[ ! -f $STOP_TABLES_TEST_TOUCHFILE ]];  do
        stat_all_tables
        let count=count+1
        [[ $(( count % 10 )) == 0 ]] && echo "Completed $count stat_all_tables"
    done
}

function check_all_nodes
{
    if [[ -z "$CLUSTER" ]]; then
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('stat')" >/dev/null 2>&1
        [[ $? != 0 ]] && failexit check_all_nodes
    else
        for m in $CLUSTER ; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $m "exec procedure sys.cmd.send('stat')" >/dev/null 2>&1
            [[ $? != 0 ]] && failexit check_all_nodes
        done
    fi
    return 0
}

function alltables_test

{
    [[ $debug == "1" ]] && set -x
    rm -Rf $STOP_TABLES_TEST_TOUCHFILE

    stat_tables_loop &
    pid=$!
    write_tables_loop &
    writepid=$!
    for (( i = 0; i < TESTITERS; ++i )); do
        create_triggers
        create_tables
        create_views
        drop_views
        drop_tables
        drop_triggers
        [[ $(( i % 10 )) == 0 ]] && echo "Completed $i create and drop tables and views"
    done
    touch $STOP_TABLES_TEST_TOUCHFILE
    wait
    check_all_nodes
    rm -Rf $STOP_TABLES_TEST_TOUCHFILE
}

function splock_test
{
    [[ $debug == "1" ]] && set -x
    rm -Rf $STOP_TABLES_TEST_TOUCHFILE
    enable_sleep_in_trigger_info
    start_select_triggers
    for (( i = 0; i < TESTQUEUEITERS; ++i )); do
        create_triggers
        drop_triggers
        [[ $(( i % 10 )) == 0 ]] && echo "Completed $i create and drop triggers"
    done
    touch $STOP_TABLES_TEST_TOUCHFILE
    disable_sleep_in_trigger_info
    wait
    check_all_nodes
    rm -Rf $STOP_TABLES_TEST_TOUCHFILE
}

function read_all_systables_from_consumer {
	$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<-'EOF'
	CREATE PROCEDURE foo VERSION 'bar' {
	local function emit_stmt(stmt)
		local row = stmt:fetch()
		while row do
			local j = db:table_to_json(row)
			db:emit(j)
			row = stmt:fetch()
		end
		stmt:close()
	end
	local function main()
		emit_stmt(db:exec("SELECT 't1', * FROM t1"))
		emit_stmt(db:exec("SELECT 't2', * FROM t2"))
		local all = db:exec("SELECT name FROM comdb2_systables order by name")
		local tbl = all:fetch()
		while tbl do
			db:emit(tbl.name)
			local stmt = db:exec("SELECT * FROM " .. tbl.name)
			stmt:close()
			tbl = all:fetch()
		end
		all:close()

		local c = db:consumer()

		--emit t1:1
		local j = db:table_to_json(c:get())
		c:emit(j)
		c:consume()

		--emit t1:2
		j = db:table_to_json(c:get())
		c:emit(j)
		c:consume()
	end
	}$$
	CREATE PROCEDURE bar VERSION 'foo' {}$$
	DROP TABLE IF EXISTS t1
	DROP TABLE IF EXISTS t2
	CREATE TABLE t1(i INTEGER)$$
	CREATE TABLE t2(i INTEGER) PARTITIONED BY MANUAL RETENTION 7$$
	CREATE LUA CONSUMER foo ON (TABLE t1 FOR INSERT)
	CREATE LUA CONSUMER bar ON (TABLE t1 FOR INSERT)
	EOF

	timeout 1s $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1 VALUES(1)"
	if [[ $? -ne 0 ]]; then failexit "t1 insert 1 timed out"; fi
	timeout 1s $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t2 VALUES(10)"
	if [[ $? -ne 0 ]]; then failexit "t2 insert 1 timed out"; fi

	$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<-'EOF' &
		EXEC PROCEDURE sys.cmd.send('recover_ddlk_sp_delay 1')
		EXEC PROCEDURE foo()
		EXEC PROCEDURE sys.cmd.send('recover_ddlk_sp_delay 0')
	EOF
	foo_pid=$!
	sleep 1

	#Make sure nothing is blocked while consumer is waiting
	timeout 3s $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "PUT COUNTER t2 INCREMENT"
	if [[ $? -ne 0 ]]; then failexit "put counter timed out"; fi
	timeout 3s $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "DROP LUA CONSUMER bar"
	if [[ $? -ne 0 ]]; then failexit "drop consumer timed out"; fi
	timeout 1s $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "EXEC PROCEDURE sys.info.cluster()"
	if [[ $? -ne 0 ]]; then failexit "sys.info.cluster timed out"; fi
	timeout 1s $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t2 VALUES(20)"
	if [[ $? -ne 0 ]]; then failexit "t2 insert 2 timed out"; fi

	#consumer:foo will finish after following insert
	timeout 1s $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1 VALUES(2)"
	if [[ $? -ne 0 ]]; then failexit "t1 insert 2 timed out"; fi

	wait $foo_pid
	if [[ $? -ne 0 ]]; then failexit "consumer failed"; fi
}

function runit
{
    setup
    splock_test
    alltables_test
	read_all_systables_from_consumer
}

runit
echo "Success"
# vim: set noet:

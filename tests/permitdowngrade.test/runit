#!/usr/bin/env bash
bash -n "$0" | exit 1
selectpid=0

. ${TESTSROOTDIR}/tools/cluster_utils.sh

[[ $debug == "1" ]] && set -x

function failexit
{
    [[ "$selectpid" != 0 ]] && kill -9 $selectpid
    exit -1
}

function setup
{
    typeset func="setup"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "CREATE TABLE t1 (a INT)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1 SELECT * FROM GENERATE_SERIES(1, 300)"
    for n in ${CLUSTER} ; do 
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $n "PUT TUNABLE debug_sleep_in_sql_tick = '1'"
    done
}

function run_tests
{
    set -x
    master=$(get_master)
    echo "MASTER IS $master"
    newmaster=0
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "SELECT * FROM t1" &
    selectpid=$!
    sleep 2
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "EXEC PROCEDURE sys.cmd.send('downgrade')"
    sleep 2
    for ((i=0;i<60;++i)); do
        m=$(get_master)
        if [[ "$m" == "$master" ]] ; then
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "EXEC PROCEDURE sys.cmd.send('downgrade')"
        else
            newmaster=1
            break 2
        fi
        sleep 1
    done

    kill -9 $selectpid
    selectpid=0

    echo "OLD MASTER WAS $master NEW MASTER IS $(get_master)"
    [[ "$newmaster" == "0" ]] && failexit "master never downgraded"
}

# Eventually master is watchdogged - this "succeeds" but produces a core
setup
run_tests

echo "Success!"

#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/runit_common.sh


function setup
{
    typeset func="setup"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "CREATE TABLE t1 (a INT)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1 SELECT * FROM GENERATE_SERIES(1, 300)"
    sendtocluster "PUT TUNABLE debug_sleep_in_sql_tick = '1'"
}

function run_tests
{
    master=$(getmaster)
    echo "MASTER IS $master"
    newmaster=0
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "SELECT * FROM t1" &
    selectpid=$!
    trap "kill -9 $selectpid" INT EXIT

    sleep 2
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "EXEC PROCEDURE sys.cmd.send('downgrade')"
    sleep 2
    for ((i=0;i<60;++i)); do
        m=$(getmaster)
        if [[ "$m" == "$master" ]] ; then
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "EXEC PROCEDURE sys.cmd.send('downgrade')"
        elif [[ ! -z "$m" ]]; then
            sleep 5 #give replicants time to run upgrade and get out of INCOHERENT_WAIT
            newmaster=1
            break 2
        fi
        sleep 1
    done

    kill -9 $selectpid
    trap - INT EXIT

    echo "OLD MASTER WAS $master NEW MASTER IS $(getmaster)"
    [[ "$newmaster" == "0" && -n "$CLUSTER" ]] && failexit "master never downgraded"
}

# Eventually master is watchdogged - this "succeeds" but produces a core
setup
run_tests
echo "Success!"

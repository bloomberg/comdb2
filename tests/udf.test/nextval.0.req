# Quick and dirty (and extermely slow and expensive) sequences
# This is just to demo UDF capability

##########
# setval #
##########
CREATE PROCEDURE setval version 'demo' {
local function work(seq, value)
    local ret
    local retry = 0
    while retry < 500 do
        db:begin()
        local sel = db:exec("selectv max(value) from "..seq)
        sel:fetch()
        local upd = db:prepare("update "..seq.." set value = ?")
        upd:bind(1, value)
        upd:exec()
        ret = db:commit()
        if ret == 0 then return 0, value end
        retry = retry + 1
        if retry % 10 == 0 then
            local ms = math.random(1, 100)
            print("setval retry:"..retry.." sleepms:"..ms)
            db:sleepms(ms)
        end
    end
    return  ret, db:error() .. ' retry:'.. retry
end
local function setval(seq, value)
    local thd = db:create_thread(work, seq, value)
    local ret, value = thd:join()
    if ret == 0 then return value end
    return db:udf_error(value)
end
}$$
CREATE LUA SCALAR FUNCTION setval

###########
# nextval #
###########
CREATE PROCEDURE nextval version 'demo' {
local function work(seq)
    local ret
    local retry = 0
    while retry < 500 do
        db:begin()
        local sel = db:exec("selectv max(value) + 1 as value from "..seq)
        local value = sel:fetch().value
        local upd = db:prepare("update "..seq.." set value = ?")
        upd:bind(1, value)
        upd:exec()
        ret = db:commit()
        if ret == 0 then return 0, value end
        retry = retry + 1
        if retry % 10 == 0 then
            local ms = math.random(1, 100)
            print("nextval retry:"..retry.." sleepms:"..ms)
            db:sleepms(ms)
        end
    end
    return  ret, db:error() .. ' retry:'.. retry
end
local function nextval(seq)
    local thd = db:create_thread(work, seq)
    local ret, value = thd:join()
    if ret == 0 then return value end
    return db:udf_error(value)
end
}$$
CREATE LUA SCALAR FUNCTION nextval


##########
# curval #
##########
CREATE PROCEDURE curval version 'demo' {
local function curval(seq)
    local cur = db:exec("select max(value) as value from "..seq)
    return cur:fetch().value
end
}$$
CREATE LUA SCALAR FUNCTION curval

SELECT 'create two named sequences and seed initial value'
CREATE TABLE foo (value longlong PRIMARY KEY)$$
INSERT INTO foo values(0)

CREATE TABLE bar (value longlong PRIMARY KEY)$$
INSERT INTO bar values(0)

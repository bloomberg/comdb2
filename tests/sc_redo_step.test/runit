#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt
export baseiters=400
export basevalue=100000000
export statusinterval=400
export updatethds=16

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function set_sc_delay
{
    [[ $debug == "1" ]] && set -x
    typeset func="set_sc_delay"
    typeset arg=$1
    typeset amount=$(( arg * 1000 ))
    write_prompt $func "Running $func"

    if [[ -n "$CLUSTER" ]]; then
        for n in $CLUSTER; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $n "exec procedure sys.cmd.send('scdelay $amount')"
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $n "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
        done
    else
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('scdelay $amount')"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
    fi
}

function clear_sc_delay
{
    [[ $debug == "1" ]] && set -x
    typeset func="clear_sc_delay"
    write_prompt $func "Running $func"

    if [[ -n "$CLUSTER" ]]; then
        for n in $CLUSTER; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $n "exec procedure sys.cmd.send('scdelay 0')"
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $n "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 0')"
        done
    else
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('scdelay 0')"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 0')"
    fi
}

function rebuild
{
    [[ $debug == "1" ]] && set -x
    typeset func="rebuild"
    write_prompt $func "Running $func"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "rebuild t1" 2>&1)
    [[ $? -ne 0 ]] && failexit "Rebuild failed, $x"
}

function add_uniq_index
{
    [[ $debug == "1" ]] && set -x
    typeset func="add_uniq_index"
    write_prompt $func "Running $func"
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "create unique index uniqix1 on t1(a)" 2>&1)
    if [[ $? -ne 0 ]] ; then
        write_prompt $func "Add unique index correctly failed: $x"
    else
        failexit "Add unique index should have failed"
    fi
}

function force_redo_constraint_violation
{
    [[ $debug == "1" ]] && set -x
    typeset beforeend=${1:-0}
    typeset master=$(get_master)
    typeset func="force_redo_constraint_violation"

    write_prompt $func "Running $func"
    write_prompt $func "Inserting records 10 and 1, there is no unique index"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)" 2>&1)
    [[ $? != 0 ]] && failexit "Error inserting record: $x"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(10)" 2>&1)
    [[ $? != 0 ]] && failexit "Error inserting record: $x"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(100)" 2>&1)
    [[ $? != 0 ]] && failexit "Error inserting record: $x"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1000)" 2>&1)
    [[ $? != 0 ]] && failexit "Error inserting record: $x"

    write_prompt $func "Set convert-delay to 3 seconds"
    set_sc_delay 3

    write_prompt $func "Select the records and genids so we can see what's happening in the db"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select *, printf('%llx', cast(substr(comdb2_rowid,3) as integer)) as genid from t1"

    write_prompt $func "Pausing the redo thread"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb setattr SC_PAUSE_REDO 1')" 2>&1)
    [[ $? != 0 ]] && failexit "Error setting sc_pause_redo: $x"

    write_prompt $func "Add unique index"
    add_uniq_index &

    write_prompt $func "Sleep for 10 to let all records be converted"
    sleep 10
 
    write_prompt $func "Update to force a conflict in the redo thread"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update t1 set a=10 where a=1" 2>&1)

    write_prompt $func "Unpause the redo-thread"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb setattr SC_PAUSE_REDO 0')" >/dev/null 2>&1)
    [[ $? != 0 ]] && failexit "Error setting sc_pause_redo: $x"

    if [[ $beforeend -eq 1 ]]; then
        write_prompt $func "Make another non-conflicting update before the sc is done to make sure the SC stops"
        x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update t1 set a=100 where a=100" 2>&1)
        [[ $? != 0 ]] && failexit "Error updating record, $x"
    else
        write_prompt $func "This should fail at SC END because there are genids left in the redo-genid list"
    fi

    write_prompt $func "We want the REDO conflict rather than converter conflict to fail the sc"
    write_prompt $func "Just Wait for sc to finish"
    wait
    [[ -f "$stopfile" ]] && failexit "Testcase failed"
    
    clear_sc_delay
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "delete from t1 where 1" 2>&1)
    write_prompt $func "Success"
}

function force_redo_duplicate
{
    [[ $debug == "1" ]] && set -x
    typeset master=$(get_master)
    typeset func="force_redo_duplicate"
    write_prompt $func "Running $func"
    write_prompt $func "Inserting records 1 and 2 against unique index"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(1)" >/dev/null 2>&1)
    [[ $? != 0 ]] && failexit "Error inserting record: $x"

    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(2)" >/dev/null 2>&1)
    [[ $? != 0 ]] && failexit "Error inserting record: $x"

    write_prompt $func "Set convert-delay to 3 seconds"
    set_sc_delay 3

    write_prompt $func "Start rebuild"
    rebuild &

    write_prompt $func "Pausing the redo thread"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb setattr SC_PAUSE_REDO 1')" >/dev/null 2>&1)
    [[ $? != 0 ]] && failexit "Error setting sc_pause_redo: $x"

    write_prompt $func "Sleeping for 1"
    sleep 1

    write_prompt $func "Updating 1 -> 100"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update t1 set a = 100 where a = 1" 2>&1)
    [[ $? != 0 ]] && failexit "Error updating record (1): $x"

    write_prompt $func "Updating 100 -> 1"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update t1 set a = 1 where a = 100" 2>&1)
    [[ $? != 0 ]] && failexit "Error updating record (2): $x"

    write_prompt $func "Updating 2 -> 100"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update t1 set a = 100 where a = 2" 2>&1)
    [[ $? != 0 ]] && failexit "Error updating record (1): $x"

    write_prompt $func "Sleeping for 4"
    sleep 4

    write_prompt $func "Unpausing the redo thread"
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('bdb setattr SC_PAUSE_REDO 0')" >/dev/null 2>&1)
    [[ $? != 0 ]] && failexit "Error unpausing sc_pause_redo: $x"

    write_prompt $func "SC should succeed because conflicting records never co-existed"

    wait
    [[ -f "$stopfile" ]] && failexit "Testcase failed"

    clear_sc_delay
    x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "delete from t1 where 1" 2>&1)
    write_prompt $func "Success"
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    typeset maxtime=$(( 8 * 60 ))
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))
    typeset cnt=0

    rm $stopfile

    write_prompt $func "Running $func"
    create_table
    create_unique_index
    force_redo_duplicate
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "alter table t1 drop index 'uniqix1'")
    [[ $? != 0 ]] && failexit "Failed to drop index: $x"
    force_redo_constraint_violation
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "alter table t1 drop index 'uniqix1'")
    force_redo_constraint_violation 1
}

run_test
echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

source ${TESTSROOTDIR}/tools/runit_common.sh

# Grab my database name.
dbnm=$1

tbl=t1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of records I will add.
nrecs=100

# Max number of schema changes
max_nusc=100

function checkfailexit
{
    if [[ -f ${DBNAME}.failexit ]] ; then
        exit 1
    fi
}


function insert_records
{
    j=0
    echo "Inserting $nrecs records."

    while [[ $j -lt $nrecs ]]; do 
        #insert next, if error continue to try again
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c,d,e,f) values ($j,'test1',x'1234',$((j*2)),$j,$j)"  >> insert.out 2>&1
        if [ $? -ne 0 ] ; then
            failexit "Inserting record $j "
        fi
        let j=j+1
        assertcnt t1 $j
        if [ $1 -gt 0 ] ; then
            sleep 0.1
        fi
    done
}




#insert all records, alter aftewards, check content
function run_test_one
{
    > insert.out
    insert_records 0

    cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c,d,e,f from t1" > out1.txt
    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  {`cat t1_2.csc2 ` }"

    cdb2sql ${CDB2_OPTIONS} $dbnm default "select a,b,c,d,e,f from t1" > out2.txt
    assertcnt t1 $nrecs
    do_verify t1

    if ! diff out1.txt out2.txt ; then
        failexit "out1 and out2 differ"
    fi

    cdb2sql ${CDB2_OPTIONS} $dbnm default "select g,h,i from t1" > out3.txt
    grep -v "g=NULL, h=NULL, i='INVALID_VALUE'" out3.txt && failexit "out3.txt unexpented content"
    mv insert.out insert1.out
}

#insert records while doing schemachange
function run_test_two
{
    typeset ipid=''

    > insert.out
    insert_records 0 &
    typeset ipid=$!

    cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t1" > out1.txt
    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  {`cat t1_2.csc2 ` }"

    wait
    checkfailexit

    cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t1" > out2.txt
    assertcnt t1 $nrecs
    do_verify t1
    mv insert.out insert2.out
}

# alter table several times adding vutf8 fields, we should only 
# be able to add a max of 15 vutf8 fields
function run_test_three
{
    $CDB2SQL_EXE $CDB2_OPTIONS $dbnm default "create table t2 (i int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $dbnm default "insert into t2 values(1)"
    let i=1

    > add_vutf8.out
    echo 'i' > add_vutf8.expected

    while [ $i -lt 16 ]; do 
        $CDB2SQL_EXE $CDB2_OPTIONS $dbnm default "alter table t2 add v$i vutf8" &>> add_vutf8.out
        echo "v$i" >> add_vutf8.expected
        let i=i+1
    done

    # adding the 16th vutf8 field will fail
    $CDB2SQL_EXE --tabs $CDB2_OPTIONS $dbnm default 'select columnname from comdb2_columns where tablename = "t2"' >> add_vutf8.out
    $CDB2SQL_EXE $CDB2_OPTIONS $dbnm default "alter table t2 add v$i vutf8" &>> add_vutf8.out
    echo "[alter table t2 add v$i vutf8] failed with rc 240 " >> add_vutf8.expected

    if ! diff add_vutf8.out add_vutf8.expected ; then
        echo "diff $PWD/{add_vutf8.out,add_vutf8.expected}"
        echo "Failed"
        exit 1
    fi
}


echo "running test in machine $(hostname):${PWD}"

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1.csc2 ` }"


master=`cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`

function cleanup
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("delfiles t1")'
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('flush')"
}

run_test_one

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1.csc2 ` }"

run_test_two

cleanup

run_test_three


echo "Success"

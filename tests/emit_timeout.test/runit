#!/usr/bin/env bash
bash -n "$0" | exit 1

TIER=${TIER:-"default"}

${CDB2SQL_EXE} -s ${DBNAME} ${CDB2_OPTIONS} ${TIER} -<<'EOF'
create table t(i int)$$
create procedure emit_test version 'test' {
local function main(expected)

    db:num_columns(1)
    db:column_name("i", 1)
    db:column_type("int", 1)

    local c = db:consumer()
    c:emit_timeout(2000)

    db:begin()
    local e = c:get()
    print("emit - call")
    c:emit(e.new.i)
    print("emit - return")
    c:consume()
    local rc = db:commit()

    if rc == expected then
        return 0
    else
        return -200
    end
end}$$
create lua consumer emit_test on (table t for insert)
insert into t values (1),(2)
EOF

#No other consumer, slow instance continues to run.
${TESTSBUILDDIR}/emit_timeout ${DBNAME} 0 20 ${TIER} ${CDB2_CONFIG}
slow=$?
if [[ $slow != 0 ]]; then
    echo "slow failed"
    exit 1
fi

#Block 20 sec, timeout, and fail to consume as fast consumer got to it.
#expected CDB2ERR_VERIFY_ERROR = 2
${TESTSBUILDDIR}/emit_timeout ${DBNAME} 2 20 ${TIER} ${CDB2_CONFIG} &
failpid=$!
sleep 2 #Let it register with master

#This waits for previous execution to timeout, then consumes successfully.
${TESTSBUILDDIR}/emit_timeout ${DBNAME} 0 0 ${TIER} ${CDB2_CONFIG}
fast=$?
if [[ $fast != 0 ]]; then
    echo "fast failed"
    exit 1
fi

#Timed-out consumer should have failed with expected verify err.
wait $failpid
if [[ $? != 0 ]]; then
    echo "failure candidate didn't fail"
    exit 1
fi

exit 0

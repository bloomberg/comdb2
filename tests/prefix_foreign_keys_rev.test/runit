#!/usr/bin/env bash
bash -n "$0" | exit 1

TMPDIR=${TMPDIR:-/tmp}

# args
a_dbn=$1

# find input files
files=$( find . -type f -name \*.req | sort )

# counter 
nfiles=0

# last batch
last_batch=

# post-process
pproc=cat

# testcase output
testcase_output=

# expected output
expected_output=


# fastinit
function fastinit
{
    # print debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset db=$1
    typeset iter=$2
    typeset tbl

    # flagged?
    if [[ ! -f $iter.fastinit ]]; then
        return 0
    fi

    # fastinit
    for tbl in $(cat $iter.fastinit) ; do
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"truncate $tbl\""
        cdb2sql ${CDB2_OPTIONS} $db default "truncate $tbl"
    done

    return 0
}

# iterate through input files
for testcase in $files ; do

    # increment counter
    let nfiles=nfiles+1

    # cleanup testcase
    testcase=${testcase##*/}
    
    # see if the prefix has changed
    new_batch=${testcase%%_*}

    # fastinit if requested
    if [[ $new_batch != $last_batch ]] ; then

        fastinit $a_dbn $new_batch
        last_batch=$new_batch

    fi

    res_file=$testcase.res

    expected_file=$testcase.out

    # switch the expected result file if we're running a generated test
    curdir=`basename ${PWD}`
    if [[ $curdir =~ "no_nullfkey_generated.test" ]]; then
        expected_file=$expected_file.no_nullfkey
    fi

    cdb2sql -s -f $new_batch ${CDB2_OPTIONS} $a_dbn default &> $res_file

    # verify 
    cmd="diff $expected_file $res_file"
    $cmd > /dev/null
    if [[  $? -eq 0 ]]; then
        echo "passed $testname"
    else
        echo "failed $testname"
        echo "see diffs here: $HOSTNAME"
        echo "> diff ${PWD}/{$expected_file,$res_file}"
        diff ${PWD}/{$expected_file,$res_file}
        echo
        exit 1
    fi
done
echo
exit 0


#!/usr/bin/env bash
bash -n "$0" | exit 1
export debug=1

# Cursor moves testcase for comdb2
################################################################################


# args
a_dbn=$1
a_testdir=$7

#cd $a_testdir

# find input files
files=$( find . -type f -name \*.req | sort )

# counter 
nfiles=0

# last batch
last_batch=

# post-process
pproc=cat

# testcase output
testcase_output=

# expected output
expected_output=

# fastinit
function fastinit
{
    # echo debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset db=$1
    typeset iter=$2
    typeset tbl

    # flagged?
    if [[ ! -f $iter.fastinit ]]; then
        return 0
    fi

    # fastinit
    for tbl in $(cat $iter.fastinit) ; do
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"truncate $tbl\""
        cdb2sql ${CDB2_OPTIONS} $db default "truncate $tbl"
    done

    return 0
}

function send_tunable
{
    # echo debug trace
    [[ "$debug" == "1" ]] && set -x

    if [[ -z $CLUSTER ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"put tunable $1\""
        cdb2sql ${CDB2_OPTIONS} $db default "put tunable $1"
    else
        for mach in $CLUSTER ; do
            echo "cdb2sql ${CDB2_OPTIONS} $db --host $mach \"put tunable $1\""
            cdb2sql ${CDB2_OPTIONS} $db --host $mach "put tunable $1"
        done
    fi
}

function tunables
{
    # echo debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset db=$1
    typeset iter=$2

    if [[ ! -f ${iter}.tunables ]]; then
        return 0
    fi

    # tunables
    cat ${iter}.tunables | while read tunable ; do
        echo "read tunable $tunable"
        send_tunable "$tunable"
    done
}

# archcode function
function myarch
{
    # echo debug trace
    [[ "$debug" == "1" ]] && set -x

    u=$(uname)
    a="<unknown>"
    [[ "$u" == "SunOS" ]]   && a="sundev1"
    [[ "$u" == "AIX" ]]     && a="ibm"
    [[ "$u" == "HP-UX" ]]   && a="hp"
    [[ "$u" == "Linux" ]]   && a="linux"

    echo $a
    return 0
}



# runstepper
function runstepper
{
    # echo debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset db=$1
    typeset tcs=$2
    typeset log=$3

    # teststepper
    typeset stp=${TESTSBUILDDIR}/stepper

    # echo
    echo "> $stp $db $tcs $log"

    # execute
    $stp $db $tcs $log
}

# Iterate through input files
for testcase in $files ; do

    # increment counter
    let nfiles=nfiles+1

    # cleanup testcase
    testcase=${testcase##*/}
    
    # see if the prefix has changed
    new_batch=${testcase%%_*}

    # set output
    output=$testcase.res
    
    # fastinit if requested
    if [[ $new_batch != $last_batch ]] ; then

        fastinit $a_dbn $new_batch
        tunables  $a_dbn $new_batch
        last_batch=$new_batch

    fi

    # Check for run-stepper
    if [[ -f $new_batch.runstepper ]] ; then

        runstepper $a_dbn $testcase $output

    else

        # Be verbose
        cmd="cdb2sql -showeffects ${CDB2_OPTIONS} $a_dbn default - < $testcase > $output 2>&1"
        echo $cmd

        # run command
        eval $cmd

    fi

    # post-process
    if [[ -f $new_batch.post ]]; then

        # zap file
        > $output.postprocess

        # collect post-processing tool
        pproc=$(cat $new_batch.post)

        # post-process output
        $pproc $output >> $output.postprocess

        # copy post-processed output to original
        mv $output.postprocess $output
    fi

    # get testcase output
    testcase_output=$(cat $output)

    # get expected output
    expected_output=$(cat $testcase.exp)

    found_match=0
    if [[ "$testcase_output" == "$expected_output" ]]; then
        found_match=1
    fi

    if [[ "$found_match" == "0" && -f $testcase.exp.alt ]]; then # && "$testcase_output" == "$(cat $testcase.exp.alt)" ]]; then
        expected_output=$(cat $testcase.exp.alt)
        if [[ "$testcase_output" == "$expected_output" ]]; then
            found_match=1
        fi
    fi

    if [[ "$found_match" == "0" && -f $testcase.exp.alt2 ]]; then # && "$testcase_output" == "$(cat $testcase.exp.alt2)" ]]; then
        expected_output=$(cat $testcase.exp.alt2)
        if [[ "$testcase_output" == "$expected_output" ]]; then
            found_match=1
        fi
    fi

    # verify 
    if [[ "$found_match" == "0" ]]; then

        echo "  ^^^^^^^^^^^^"
        echo "The above testcase (${testcase}) has failed!!!"
        echo " "
        echo "Use 'diff <expected-output> <my-output>' to see why:"
        echo "> diff ${PWD}/{$testcase.exp,$output}"
        echo " "
        diff $testcase.exp $output
        echo " "
        exit 1

    fi

done

echo "Testcase passed."

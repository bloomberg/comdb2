#!/bin/bash
bash -n "$0" | exit 1

set -e
set -x
################################################################################

function getmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

failexit()
{
    echo "Failed $1"
    exit -1
}



# debug=1

# args
dbnm=$1

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
for node in $cluster ; do
#    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('debg 500')"
#    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('bdb verbdeadlock 1')"
#    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('on verbose_deadlocks')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('bdb setattr DELAY_LOCK_TABLE_RECORD_C 1000000')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('on print_deadlock_cycles')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('reql events detailed on')"
done

f1() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
insert into t1 values (1, x'11')
insert into t2 values (1, x'11')
commit
EOF
}

f2() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
begin
insert into t2 values (2, x'22')
insert into t1 values (2, x'22')
commit
EOF
}

#run two transactions that will get in a deadlock
#will see DEADLOCK-CYCLE: in db log
f1 &
f2 &

wait

master=`getmaster`
logfl=`cdb2sql ${CDB2_OPTIONS} --tabs $dbnm --host $master "exec procedure sys.cmd.send('reql stat')" | grep "Eventlog enabled" | cut -f2 -d ':'`
if [ "x$logfl" == "x" ]; then
    cdb2sql ${CDB2_OPTIONS} --tabs $dbnm --host $master "exec procedure sys.cmd.send('reql stat')"
    failexit "cant find events logfile in reql stat on $master"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm --host $master "exec procedure sys.cmd.send('reql events roll')"

sleep 4

if [ $master != `hostname` ]; then
    scp $master:$logfl $logfl
fi

logflunziped=${logfl}.unzipped 
zcat $logfl > $logflunziped

cnt=`grep deadlock_cycle $logflunziped | head -1 | sed 's/}/}\n/' | grep -c cnonce`

if [ $cnt != 2 ]; then
    failexit 'expected two cnonces reported part of deadlock_cycle in eventslog'
fi

echo "Testcase passed."

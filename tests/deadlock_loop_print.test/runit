#!/bin/bash
bash -n "$0" | exit 1

################################################################################


# debug=1

# args
a_dbn=$1

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
for node in $cluster ; do
    cdb2sql ${CDB2_OPTIONS} $a_dbn --host $node "exec procedure sys.cmd.send('debg 500')"
    cdb2sql ${CDB2_OPTIONS} $a_dbn --host $node "exec procedure sys.cmd.send('bdb setattr DELAY_LOCK_TABLE_RECORD_C 1000000')"
    cdb2sql ${CDB2_OPTIONS} $a_dbn --host $node "exec procedure sys.cmd.send('bdb verbdeadlock 1')"
    cdb2sql ${CDB2_OPTIONS} $a_dbn --host $node "exec procedure sys.cmd.send('on verbose_deadlocks')"
    cdb2sql ${CDB2_OPTIONS} $a_dbn --host $node "exec procedure sys.cmd.send('on print_deadlock_cycles')"
done

f1() {
    cdb2sql ${CDB2_OPTIONS} $a_dbn default - <<"EOF"
begin
insert into t1 values (1, x'11')
insert into t2 values (1, x'11')
commit
EOF
}

f2() {
    cdb2sql ${CDB2_OPTIONS} $a_dbn default - <<"EOF"
begin
insert into t2 values (2, x'22')
insert into t1 values (2, x'22')
commit
EOF
}

#run two transactions that will get in a deadlock
#will see DEADLOCK-CYCLE: in db log
f1 &
f2 &

wait

exit 1

echo "Testcase passed."

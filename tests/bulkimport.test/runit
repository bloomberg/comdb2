#!/usr/bin/env bash
bash -n "$0" | exit 1

source fixtures.sh
source constants.sh
source util.sh

MISMATCHED_CONFIG_TEST=0

function test_flip_flop_import() {
	(
		# Given
		local src_tbl=foo dst_tbl=foo
		query_src_db "create table $src_tbl(i longlong default nextsequence)" && \
		query_src_db "insert into $src_tbl default values" && \
		query_dst_db "create table $dst_tbl(i longlong default nextsequence)" > /dev/null
		trap "query_src_db 'drop table $src_tbl'; query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl" && \
		query_dst_db "insert into $dst_tbl default values" && \
		query_src_db "replace table $src_tbl with LOCAL_$DST_DBNAME.$dst_tbl" && \
		query_src_db "insert into $src_tbl default values" && \
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl" && \
		> /dev/null

		# Then
		(( rc == 0 )) && verify_eq $src_tbl $dst_tbl
	)
}

function test_import_many_tables_over_table() {
	(
		# Given
		local src_tbl_1=foo src_tbl_2=bar src_tbl_3=baz dst_tbl=foo
		query_src_db "create table $src_tbl_1(i int unique)" && \
		query_src_db "create table $src_tbl_2(i int unique)" && \
		query_src_db "create table $src_tbl_3(i int unique)" && \
		query_dst_db "create table $dst_tbl(i int unique)" && \
		query_src_db "insert into $src_tbl_1 values(1)" && \
		query_src_db "insert into $src_tbl_2 values(2)" && \
		query_src_db "insert into $src_tbl_3 values(3)" \
		> /dev/null
		trap "query_src_db 'drop table $src_tbl_1';\
			query_src_db 'drop table $src_tbl_2';\
			query_src_db 'drop table $src_tbl_3';\
			query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl_1" && \
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl_2" && \
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl_3" \
		> /dev/null

		# Then
		(( rc == 0 )) && verify_eq $src_tbl_3 $dst_tbl
	)
}

function test_multiple_imports_at_once() {
	(
		# Given
		local src_tbl=foo dst_tbl=foo rc=0
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl $dst_tbl > /dev/null
		trap "query_src_db 'drop table $src_tbl'; query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl" >/dev/null &
		local -r pid=$!
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl" >/dev/null
		rc_second_import=$?
		wait $pid
		rc_first_import=$?

		# Then
			# The import that starts first should fail and the other should succeed.
		(( (rc_first_import+rc_second_import) > 0 )) \
			&& (( (rc_first_import*rc_second_import == 0) )) \
			&& verify_eq $src_tbl $dst_tbl
	)
}

function test_mutual_simultaneous_import() {
	(
		# Given
		local src_tbl=foo dst_tbl=foo n_mutual_imports=8 rc=0
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl $dst_tbl > /dev/null
		trap "query_src_db 'drop table $src_tbl'; query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		for i in $(seq 1 2 $n_mutual_imports); do
			query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl" >/dev/null &
			local pid_dst=$!

			query_src_db "replace table $src_tbl with LOCAL_$DST_DBNAME.$dst_tbl" >/dev/null &
			local pid_src=$!

			wait $pid_dst || rc=1
			wait $pid_src || rc=1
		done

		# Then
			# We can't assert equality of the tables:
			# If the imports from src and dst are perfectly synchronized then the 
			# tables will not be the same.
			# Just make sure that the imports succeeded.
		(( rc == 0 )) 
	)
}

function test_heavy_traffic_import() {
	(
		# Given
		local src_tbl=foo dst_tbl=foo n_insert_threads=7 src_pids=() dst_pids=() rc=0
		query_src_db "create table $src_tbl(i longlong default nextsequence)" && \
		query_src_db "create table save_$src_tbl(i longlong default nextsequence)" && \
		query_src_db "insert into $src_tbl default values" && \
		query_dst_db "create table $dst_tbl(i longlong default nextsequence)" > /dev/null
		trap "query_src_db 'drop table $src_tbl'; query_src_db 'drop table save_$src_tbl'; query_dst_db 'drop table $dst_tbl'" EXIT

		for i in $(seq $n_insert_threads); do
			query_in_loop query_src_db "insert into $src_tbl default values" .1 > /dev/null &
			src_pids[${i}]=$!

			query_in_loop query_dst_db "insert into $dst_tbl default values" .1 > /dev/null &
			dst_pids[${i}]=$!
		done

		sleep 1

		query_src_db "insert into save_$src_tbl select * from $src_tbl"

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl" >/dev/null

		# Then
		rc=$?

		for pid in ${src_pids[@]} ${dst_pids[@]};
		do
			if ! ps -p $pid > /dev/null;
			then
				# PID failed
				rc=1
				break
			fi
			kill -9 $pid &> /dev/null
		done

		(( rc == 0 )) && verify_lt save_$src_tbl $dst_tbl
	)
}

function test_import_when_dst_table_has_rev_constraints() {
	(
		# Given
		local src_tbl=foo dst_tbl_1=bar dst_tbl_2=baz rc=0
		query_src_db "create table $src_tbl(i int unique)"
		query_dst_db "create table $dst_tbl_1(i int unique)"
		query_dst_db "create table $dst_tbl_2(i int, foreign key(i) references $dst_tbl_1(i))"
		trap "query_src_db 'drop table $src_tbl';
			query_dst_db 'drop table $dst_tbl_2';
			query_dst_db 'drop table $dst_tbl_1';" EXIT

		# When
		query_dst_db "replace table $dst_tbl_1 with LOCAL_$SRC_DBNAME.$src_tbl" >/dev/null

		# Then
		(( $? != 0 ))
	)
}

function test_import_table_with_fk_constraints() {
	(
		# Given
		local src_tbl_1=foo src_tbl_2=bar dst_tbl=baz rc=0
		query_src_db "create table $src_tbl_1(i int unique)"
		query_src_db "create table $src_tbl_2(i int, foreign key(i) references $src_tbl_1(i))"
		query_dst_db "create table $dst_tbl(i int unique)"
		trap "query_src_db 'drop table $src_tbl_2';
			query_src_db 'drop table $src_tbl_1';
			query_dst_db 'drop table $dst_tbl';" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl_2" >/dev/null

		# Then
		(( $? != 0 ))
	)
}

function test_multiple_imports_in_failed_transaction() {
	(
		# Given
		local src_tbl_1=foo src_tbl_2=bar src_tbl_3=baz dst_tbl_1=corge dst_tbl_2=qux rc=0
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl_1 $dst_tbl_1 > /dev/null
		query_src_db "create table $src_tbl_2(i int unique)"
		query_src_db "insert into $src_tbl_2 values(1)"
		query_src_db "create table $src_tbl_3(i int, foreign key(i) references $src_tbl_2(i))"
		query_dst_db "create table $dst_tbl_2(i int unique)"
		trap "query_src_db 'drop table $src_tbl_1';
			query_src_db 'drop table $src_tbl_3';
			query_src_db 'drop table $src_tbl_2';
			query_dst_db 'drop table $dst_tbl_1';
			query_dst_db 'drop table $dst_tbl_2'" EXIT

		# When
query_dst_db - >/dev/null <<EOF
begin
replace table $dst_tbl_1 with LOCAL_$SRC_DBNAME.$src_tbl_1
replace table $dst_tbl_2 with LOCAL_$SRC_DBNAME.$src_tbl_3
commit
EOF
		# Then
			# Txn should fail because second import runs against constrained table.
			# The first import should be rolled back
		(( $? != 0 )) && ! verify_eq $src_tbl_1 $dst_tbl_1 && ! verify_eq $src_tbl_2 $dst_tbl_3
	)
}

function test_multiple_imports_in_transaction() {
	(
		# Given
		local src_tbl_1=foo src_tbl_2=bar dst_tbl_1=baz dst_tbl_2=corge rc=0
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl_1 $dst_tbl_1 > /dev/null
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl_2 $dst_tbl_2 > /dev/null
		trap "query_src_db 'drop table $src_tbl_1';
			query_src_db 'drop table $src_tbl_2';
			query_dst_db 'drop table $dst_tbl_1';
			query_dst_db 'drop table $dst_tbl_2'" EXIT

		# When
query_dst_db - >/dev/null <<EOF
begin
replace table $dst_tbl_1 with LOCAL_$SRC_DBNAME.$src_tbl_1
replace table $dst_tbl_2 with LOCAL_$SRC_DBNAME.$src_tbl_2
commit
EOF
		# Then
		(( $? == 0 )) && verify_eq $src_tbl_1 $dst_tbl_1 && verify_eq $src_tbl_2 $dst_tbl_2
	)
}

function test_unsupported_version() {
	(
		# Given
		local src_tbl=foo dst_tbl=bar rc=0
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl $dst_tbl > /dev/null

		set_src_tunable "semver 8.0.0"

		trap "set_src_tunable 'semver 8.1.0';
			query_src_db 'drop table $src_tbl';
			query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl"

		# Then
		(( $? != 0 ))
	)
}

function test_protobuf_tunable() {
	(
		# Given
		local src_tbl=foo dst_tbl=bar rc=0
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl $dst_tbl > /dev/null
		set_dst_tunable "sc_protobuf 0"

		trap "set_dst_tunable 'sc_protobuf 1';
			query_src_db 'drop table $src_tbl';
			query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl"

		# Then
		(( $? != 0 ))
	)
}

function test_feature_tunable() {
	(
		# Given
		local src_tbl=foo dst_tbl=bar rc=0
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl $dst_tbl > /dev/null
		set_dst_tunable "disable_sql_table_replacement 1"

		trap "set_dst_tunable 'disable_sql_table_replacement 0';
			query_src_db 'drop table $src_tbl';
			query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl"

		# Then
		(( $? != 0 ))
	)
}

function test_import_against_table_with_dollar_char() {
	(
		# Given
		local dst_tbl=foo src_tbl='$table'
		query_dst_db "create table $dst_tbl(i int)"
		query_src_db "create table '"$src_tbl"'(i int)"
		trap "query_dst_db 'drop table $dst_tbl';
			  query_src_db 'drop table '\''$src_tbl'\'" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.'"$src_tbl"'"

		# Then
		(( $? == 0 ))
	)
}

function test_bad_inputs_without_werror() {
	(
		# Given
		local dst_tbl=foo src_tbl='bad-table'
		query_dst_db "create table $dst_tbl(i int)"

		trap "query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		err=$(query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.'"$src_tbl"'" 2>&1)

		# Then
			# Import will be attempted but fail because the source table doesn't exist
		(( $? != 0 ))
		echo $err | grep "Source table does not exist"
	)
}

function test_bad_inputs_with_werror() {
	(
		# Given
		local dst_tbl=foo src_tbl='bad-table'
		query_dst_db "create table $dst_tbl(i int)"
		set_dst_tunable "bulk_import_validation_werror on"

		trap "set_dst_tunable 'bulk_import_validation_werror off';
			query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		err=$(query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.'"$src_tbl"'" 2>&1)

		# Then
		(( $? != 0 ))
		echo $err | grep "bulk import inputs have invalid characters"
	)
}

function test_resume_is_blocked() {
	(
		# Given
		local src_tbl=foo dst_tbl=bar rc=0
		fixture_src_tbl_and_dst_tbl_have_same_schema $src_tbl $dst_tbl > /dev/null
		set_dst_tunable "debug_sleep_during_bulk_import 1"

		trap "set_dst_tunable 'debug_sleep_during_bulk_import 0';
			query_src_db 'drop table $src_tbl';
			query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		COMDB2_CONFIG_MIN_RETRIES=1 query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl" &
		waitpid=$!
		sleep 1
		restart_dst_db &> /dev/null
		if wait ${waitpid};
		then
			echo "FAIL: Import succeeded before cluster bounced. Test is buggy."
			return 1
		fi

		# Then
		! verify_eq $src_tbl $dst_tbl
	)
}

function run_basic_test() {
	(
		# Given
		local src_tbl=foo dst_tbl=foo
		$1 $src_tbl $dst_tbl > /dev/null
		trap "query_src_db 'drop table $src_tbl'; query_dst_db 'drop table $dst_tbl'" EXIT

		# When
		query_dst_db "replace table $dst_tbl with LOCAL_$SRC_DBNAME.$src_tbl" >/dev/null

		# Then
		rc=$?

		if (( MISMATCHED_CONFIG_TEST == 1 )); then
			rc=$(( ! $rc )) # Databases with mismatched configs should fail every import.
		else
			(( rc == 0 )) && verify_eq $src_tbl $dst_tbl
			rc=$?
		fi

		return $rc
	)
}

function test_basic() {
	for fixture in $FIXTURES;
	do
		run_basic_test $fixture
		rc=$?

		if (( rc != 0 ));
		then
			echo_err "Failed $FUNCNAME with $fixture"
			return $rc
		fi
	done
}

function main() {
	if [ -z "$CLUSTER" ] ; then # test if CLUSTER is blank (not set) and exit when so
		echo "Test requires a cluster"
		return 1
	fi

	local tests
	if [ "$TESTCASE" == "bulkimport_mismatched_blobstripe_generated" -o \
		 "$TESTCASE" == "bulkimport_mismatched_dtastripe_generated" ]; then
		MISMATCHED_CONFIG_TEST=1
		tests="test_basic"
	else
		tests=$(compgen -A function | grep -oh "test_\w*")
	fi

	set_src_tunable "semver 8.1.0"
	set_dst_tunable "semver 8.1.0"

	for testcase in $tests;
	do
		$testcase
		failexit $? "Failed $testcase"
		echo_err "Passed $testcase"
	done
}

main

#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

# Grab my database name.
dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of records I will add.
nrecs=200

# Do schema changes
function do_schema_changes
{
    typeset iter=0
    typeset scnt=0

    schema=t2.csc2

    echo "$dbnm alter t1 $schema"
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "alter table t1 { `cat $schema ` }"
    if [[ $? != 0 ]]; then

        echo "Error schema-changing on iteration $scnt"
        return 1

    fi

    let scnt=scnt+1

    return 0
}

function update_records
{
    j=0
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set d=d+1 where a = $j" >> update.out 2>&1
        if [ $? -ne 0 ] ; then
            echo "update failed"
            return 1
        fi
        let j=j+1
    done

    return 0
}

function insert_more_records
{
    j=0
    echo "Inserting more $nrecs records."
    echo "" > insert2.out

    while [[ $j -lt $nrecs ]]; do 
        let k=$j+$nrecs
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c,d) values ($k,'test1',x'1234',$j)"  >> insert2.out 2>&1
        if [ $? -ne 0 ] ; then
            echo "insert failed"
            return 1
        fi
        let j=j+1
    done

    return 0
}

function insert_records
{
    j=0
    echo "Inserting $nrecs records."
    echo "" > insert1.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c,d) values ($j,'test1',x'1234',$j)"  >> insert1.out 2>&1
        let j=j+1
    done
}

function failexit
{
    echo "Failed $1"
    exit -1
}

function assertcnt
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}

function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}

function assert_vers
{
    target=$1
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('t1')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}

getmaster() {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default '@send bdb cluster' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

echo "Test with insert, SC should fail"

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1.csc2 ` }"

tblver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('t1')")

insert_records

assertcnt $nrecs

master=`getmaster`
echo "Master is $master"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE COMMITSLEEP 10"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE CONVERTSLEEP 10"

echo "Do schema change to add an uniq index"
do_schema_changes &
sleep 2

echo "Add more dup records and schema change should fail"
insert_more_records
if [ $? -ne 0 ] ; then
    wait
    failexit "failed to insert more records"
fi

wait

assertcnt $(( nrecs * 2 ))
assert_vers $tblver

echo "NOTE: schemachange above CORRECTLY failed"
do_verify


echo ""
echo "Test with updates, SC should fail"

cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE COMMITSLEEP 0"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE CONVERTSLEEP 0"

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate t1"

tblver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('t1')")

insert_records
assertcnt $nrecs

cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE COMMITSLEEP 10"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE CONVERTSLEEP 10"

echo "Do schema change to add an uniq index"
do_schema_changes &
sleep 2

echo "update to get dups and schema change should fail"
update_records
if [ $? -ne 0 ] ; then
    wait
    failexit "failed to update records"
fi

wait

assertcnt $nrecs
assert_vers $tblver

echo "NOTE: schemachange above CORRECTLY failed"
do_verify

cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE COMMITSLEEP 0"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE CONVERTSLEEP 0"

do_schema_changes
assertcnt $nrecs
assert_vers $(( tblver + 1 ))
do_verify

echo "Success"

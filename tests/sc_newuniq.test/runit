#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

# Grab my database name.
dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of records I will add.
nrecs=2000

# Number of schema changes
nusc=1

# Do schema changes
function do_schema_changes
{
    typeset max=$1
    typeset iter=0
    typeset scnt=0

    schema=t2.csc2

    while [[ $scnt -lt $max ]]; do 

        echo "$dbnm alter t1 $schema"
        cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1 { `cat $schema ` }"
        if [[ $? != 0 ]]; then

            echo "Error schema-changing on iteration $scnt"
            return 1

        fi

        let scnt=scnt+1

    done

    return 0
}

function update_records
{
    j=0
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set d=d+1 where a = $j" >> update.out 
        let j=j+1
        sleep 1
    done
}

function insert_more_records
{
    j=0
    echo "Inserting more $nrecs records."
    echo "" > insert2.out

    while [[ $j -lt $nrecs ]]; do 
        let k=$j+$nrecs
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c,d) values ($k,'test1',x'1234',$j)"  >> insert2.out 2>&1
        let j=j+1

        sleep 1
    done
}




function insert_records
{
    j=0
    echo "Inserting $nrecs records."
    echo "" > insert1.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c,d) values ($j,'test1',x'1234',$j)"  >> insert1.out 2>&1
        let j=j+1
        if [ $1 -gt 0 ] ; then
            sleep $1
        fi
    done
}


function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


echo "Test with insert, SC should fail"

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1.csc2 ` }"

insert_records 0
# Print a count
cdb2sql ${CDB2_OPTIONS} $dbnm default "select count(*) from t1"

# following will fail because of unique constraint violation -- after sc
insert_more_records &
ipid=$!

echo "Do schema change after sleeping for a bit, let some inserts go in"
sleep 5
do_schema_changes $nusc

ret=$?
kill -9 $ipid
cdb2sql ${CDB2_OPTIONS} $dbnm default "select count(*) from t1"

if [[ "$ret" == 0 ]]; then
    echo "Test Failed: Schemachange should not have succeeded"
    return -1
fi

echo "NOTE: schemachange above CORRECTLY failed"
do_verify


echo ""
echo "Test with updates, SC should fail"

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate t1"

insert_records 0
# Print a count
cdb2sql ${CDB2_OPTIONS} $dbnm default "select count(*) from t1"



#Following will fail because of unique constraint violation -- after sc
update_records &
upid=$!

echo "Do schema change after sleeping for a bit, let some updates go through"
sleep 5 
do_schema_changes $nusc

ret=$?
kill -9 $upid
cdb2sql ${CDB2_OPTIONS} $dbnm default "select count(*) from t1"

if [[ "$ret" == 0 ]]; then
    echo "Test Failed: Schemachange should not have succeeded"
    return -1
fi

echo "NOTE: schemachange above CORRECTLY failed"
do_verify

echo "Success!  Performed $nusc schema-changes."
echo "Success"

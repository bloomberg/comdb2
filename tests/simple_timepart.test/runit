#!/usr/bin/env bash
bash -n "$0" | exit 1

# Time partition testcase for comdb2
################################################################################


# args
# <dbname>
dbname=$1

VIEW1="testview1"
OUT="run.log"

rm $OUT 2>/dev/null
touch $OUT


function timepart_stats
{
    # check the current partitions 
    echo cdb2sql ${CDB2_OPTIONS} $dbname default "exec procedure sys.cmd.send('partitions')" | 
        egrep -v "STARTTIME|LOW|HIGH|SOURCE_ID" >> $OUT
    cdb2sql -tabs ${CDB2_OPTIONS} $dbname default "exec procedure sys.cmd.send('partitions')" |
        egrep -v "STARTTIME|LOW|HIGH|SOURCE_ID" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, period, retention, nshards, version,shard0name from comdb2_timepartitions " >> $OUT
    cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, period, retention, nshards, version,shard0name from comdb2_timepartitions " >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, shardname from comdb2_timepartshards" >> $OUT
    cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, shardname from comdb2_timepartshards" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    #randomly we catch a drop event here; sleep to skip the deterministically
    sleep 6
    echo cdb2sql ${CDB2_OPTIONS} $dbname default  "select name, arg1, arg2, arg3 from comdb2_timepartevents" >> $OUT
    cdb2sql ${CDB2_OPTIONS} --host ${master} $dbname default  "select name, arg1, arg2, arg3 from comdb2_timepartevents" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi
}

master=`cdb2sql -tabs ${CDB2_OPTIONS} $dbname default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`

timepart_stats

# create the partition
#echo cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t as ${VIEW1} PERIOD 'test2min' RETENTION 2 START '`date +\"%Y-%m-%dT%H%M%S America/New_York\" --date \"now 1 minutes\"`'" 
#cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t as ${VIEW1} PERIOD 'test2min' RETENTION 2 START '`date +\"%Y-%m-%dT%H%M%S America/New_York\" --date \"now 1 minutes\"`'" >> $OUT
starttime=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()+60)'`
echo cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t as ${VIEW1} PERIOD 'test2min' RETENTION 2 START '${starttime}'" 
cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t as ${VIEW1} PERIOD 'test2min' RETENTION 2 START '${starttime}'" >> $OUT
if (( $? != 0 )) ; then
   echo "FAILURE"
   exit 1
fi

timepart_stats

partition_config[1]="t1;t"
partition_config[2]="t2;t1"
partition_config[3]="t0;t2"
partition_config[4]="t1;t0"
partition_config[5]="t2;t1"

blob_updates[1]="Moar rows"
blob_updates[2]="Moar's 2"
blob_updates[3]="Moar's 3"
blob_updates[4]="Moar's 4"
blob_updates[5]="Moar's 5"

# roll parition 3 times, check along
for run in 1 2 3 4 5; do
   echo "Run ${run}"
   echo "Run ${run}" >> $OUT

   let row=0
   while (( $row != 100 )) ; do

      let a=run*100000+row;
      echo cdb2sql ${CDB2_OPTIONS} $dbname default "insert into ${VIEW1} values ($a, 'A row', 0x'DEADBEAF')" >> $OUT
      cdb2sql ${CDB2_OPTIONS} $dbname default "insert into ${VIEW1} values ($a, 'A row', x'DEADBEAF')" >> $OUT
      if (( $? != 0 )) ; then
         echo "FAILURE"
         exit 1
      fi

      let row=row+1
   done

   echo "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" >> $OUT

   echo cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW1} order by a" >> $OUT
   cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW1} order by a" >> $OUT
   if (( $? != 0 )) ; then
      echo "FAILURE"
      exit 1
   fi

   echo "SELECT 1 HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" >> $OUT

   let row=0
   let mod=10
   while (( $row != 100 )) ; do
      let a=row%mod
      echo cdb2sql ${CDB2_OPTIONS} $dbname default "update ${VIEW1} set b=\"${blob_updates[${run}]}\" where a % ${mod} == ${a}" >> $OUT
      cdb2sql ${CDB2_OPTIONS} $dbname default "update ${VIEW1} set b=\"${blob_updates[${run}]}\" where a % ${mod} == ${a} limit 10000" >> $OUT
      #cdb2sql ${CDB2_OPTIONS} $dbname default "update ${VIEW1} set b='Moar rows' where a % ${mod} == ${a}" >> $OUT
      if (( $? != 0 )) ; then
         echo "FAILURE"
         exit 1
      fi

      let row=row+1
   done

   echo "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" >> $OUT

   echo cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW1} order by a" >> $OUT
   cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW1} order by a" >> $OUT
   if (( $? != 0 )) ; then
      echo "FAILURE"
      exit 1
   fi

   echo "SELECT 2 HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" >> $OUT

   let row=0
   let mod=100
   while (( $row != 2 )) ; do
      let a=row%mod
      echo cdb2sql ${CDB2_OPTIONS} $dbname default "delete from ${VIEW1} where a % ${mod} == ${a}" >> $OUT
      cdb2sql ${CDB2_OPTIONS} $dbname default "delete from ${VIEW1} where a % ${mod} == ${a} limit 10000" >> $OUT
      if (( $? != 0 )) ; then
         echo "FAILURE"
         exit 1
      fi

      let row=row+1
   done

   echo "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" >> $OUT

   echo cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW1} order by a" >> $OUT
   cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW1} order by a" >> $OUT
   if (( $? != 0 )) ; then
      echo "FAILURE"
      exit 1
   fi

   echo "SELECT 3 HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" >> $OUT

   timepart_stats

   # wait for the next roll
   echo "Waiting for ${partition_config[${run}]}"
   echo "Waiting for ${partition_config[${run}]}" >> $OUT

   crt_partition=`cdb2sql ${CDB2_OPTIONS} -tabs $dbname default "select partition_info(\"${VIEW1}\", 'tables')"`
   while [[ "${crt_partition}" != ${partition_config[${run}]} ]]; do
      sleep 10
      crt_partition=`cdb2sql ${CDB2_OPTIONS} -tabs $dbname default "select partition_info(\"${VIEW1}\", 'tables')"`
   done

   echo "Done waiting for ${partition_config[${run}]}"
   echo "Done waiting for ${partition_config[${run}]}" >> $OUT

   timepart_stats
done

# destroy partition
echo cdb2sql ${CDB2_OPTIONS} $dbname default "DROP TIME PARTITION ${VIEW1}" >> $OUT
cdb2sql ${CDB2_OPTIONS} $dbname default "DROP TIME PARTITION ${VIEW1}" >> $OUT
if (( $? != 0 )) ; then
   echo "FAILURE"
   exit 1
fi

#wait for the new trigger to complete
sleep 180

timepart_stats


# we need to scrub dbname from alpha
sed "s/dorintdb/$dbname/g; s#\${CDB2_OPTIONS}#${CDB2_OPTIONS}#g" $OUT.alpha > $OUT.alpha.actual


difs=`diff $OUT $OUT.alpha.actual`
if [[ ! -z "${difs}" ]] ; then
   echo "diff $OUT $OUT.alpha.actual"
   echo ${difs}
   echo "FAILURE"
   exit 1
fi

echo "SUCCESS"

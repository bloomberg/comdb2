# Linearizable is serializable + durable-lsn logic
enable_serial_isolation

# Enable durable lsn logic
setattr DURABLE_LSNS 1

# Maximum time we'll wait to retrieve a durable LSN from the master
setattr DURABLE_LSN_REQUEST_WAITMS 2000

# new_snapshot is seeing bugs here: disable for now, old snapshot works correctly
disable_new_snapshot

# new snapshot_asof isn't prod-ready (and will be rewritten soon)
# enable_new_snapshot_asof

# Commit should force log to be synced to disk
setattr SYNCTRANSACTIONS 1

# Allow the master to handle sql requests (uncommon)
setattr MASTER_REJECT_REQUESTS 0

# Very high osqltransfer
maxosqltransfer 1000000

# This was breaking things earlier.  Rivers has made changes (I need to retry)
disable_page_compact

# Check for deleteable logs every second
setattr LOGDELETE_RUN_INTERVAL 1

# Disable parallel rep (this was causing crashes)
setattr REP_PROCESSORS 0
setattr REP_WORKERS 0

# Block forever on startup trying to sync with cluster
setattr STARTUP_SYNC_ATTEMPTS -1

# Perfect checkpoints is also causing crashes.  Disable for now.
perfect_ckp 0

# Enable wait-for-seqnum trace
setattr WAIT_FOR_SEQNUM_TRACE 1

# Don't run the watchdog thread
nowatch

# Disable this trace
setattr UDP_DROP_WARN_PERCENT 100

# Enable debug trace
# on durable_set_trace
# on dump_fsql_response
# on extended_sql_debug_trace
# on verbose_toblock_backouts

# Fail randomly to test curtran generation changes
# on test_curtran_change

# Disable compression so I can read printlog output
init_with_compr none
init_with_compr_blobs none

# Dump blkseq additions
# on dump_blkseq

# Force work_appsock_failures
# on debug_sqlthd_failures

# Force random get_curtran failures
# on random_get_curtran_failures

# Abort on invalid query info key
# on abort_invalid_query_info_key

# Make sure that the blkseq code works correctly
#on test_blkseq_replay

# Log location
#location logs /db/logs
init_with_genid48

# Don't use direct IO (breaks in LXC)
setattr directio 0

# The cluster LOCKED UP for hours because of an election bug I don't understand
setattr RECEIVE_COHERENCY_LEASE_TRACE 1

# Enable trace on messages with bad generation numbers
rep_badgen_trace on

# Trace when zero coherency ts is set or returned
dump_zero_coherency_ts on

# Global switch allowing incoherent sql: each session still needs to enable
allow_incoherent_sql on

# Print rcode from rep_process_message
rep_process_msg_print_rc on

# Print master-req protocol
verbose_master_req on

receive_coherency_lease_trace on

# Torque down rep_timeout
setattr REP_TIMEOUT_MINMS 1000

# Torque down rep_timeout_maxms
setattr REP_TIMEOUT_MAXMS 2000

# Maybe alot of UDP traffic is being dropped?
setattr COHERENCY_LEASE_UDP 0

# Making slow replicants incoherent is ideal for normal workloads where a client
# would be redirected to a different node.  It is BAD for Jepsen testing where a 
# client is married to a single nodes.
make_slow_replicants_incoherent off

# Enable trace from the coherency lease thread
verbose_send_cohlease on

# Assume the network is perfect for Jepsen tests
downgrade_penalty 0

# Don't reset the master 
gbl_reset_on_unelectable_cluster off

# Don't use udp for acks
noudp on


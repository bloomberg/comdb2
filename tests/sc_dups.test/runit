#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

# Grab my database name.
dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of records I will add.
nrecs=2000

# Number of schema changes
nusc=10

# Background pid of the updater
upid=-1

tbl=t1

function do_rebuild
{
    typeset max=$1
    typeset scnt=0
    while [[ $scnt -lt $max ]]; do 

        echo "Running rebuild iteration $scnt"
        cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"

        if [[ $? != 0 ]]; then
            echo "Error schema-changing on iteration $scnt"
            echo "Testcase failed"
            return 1
        fi
        let scnt=scnt+1
        do_verify
        assertcnt $nrecs
    done

    return 0
}


function update_records
{
    j=0
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set d=d+1 where a = $j" >> update.out 2>&1
        let j=j+1
    done
    sleep 1
}


function insert_records
{
    j=0
    echo "Inserting $nrecs records."

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql -s ${CDB2_OPTIONS} $dbnm default "insert into $tbl(a,b,c,d) values ($j,'test1',x'1234',$j)" &> /dev/null
        let j=j+1
    done
    if [ $1 -gt 0 ] ; then
        sleep $1
    fi
}


function failexit
{
    echo "Failed $1"
    exit -1
}

function assertcnt 
{
    target=$1
    cnt=$(cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from $tbl")
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}

function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('$tbl')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


function run_test 
{
    insert_records 0
    # Print a count
    assertcnt $nrecs

    # following will fail because of unique constraint violation

    echo
    echo "insert same record in background -- all are dup and will fail -- schemachange should not fail"
    insert_records 1 &
    upid=$!

    # Do schema change
    do_rebuild $nusc

    ret=$?
    kill -9 $upid

    assertcnt $nrecs

    if [[ "$ret" == 0 ]]; then
        echo "Success!  Performed $nusc schema-changes."
        echo "Success"
    else
        exit -1
    fi


    echo
    echo "updating record in background -- all should cause dup error and fail -- schemachange should not fail"
    update_records &
    upid=$!

    # Do schema change
    do_rebuild $nusc

    ret=$?
    kill -9 $upid
    assertcnt $nrecs

    if [[ "$ret" == 0 ]]; then
        echo "Success!  Performed $nusc schema-changes."
        echo "Success"
    else
        exit -1
    fi

}


echo "running test in machine $(hostname):${PWD}"

cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate $tbl"
run_test


cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('setipu t1 off')"

cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate $tbl"
run_test

#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/runit_common.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh


function recreate_tables
{
    typeset tt=$1
    typeset p=${2:-t}

    echo "Recreating tables, int, $tt prefix $p"

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table ${p}1" >/dev/null 2>&1
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table ${p}2" >/dev/null 2>&1

    $CDB2SQL_EXE $SECONDARY_CDB2_OPTIONS $SECONDARY_DBNAME default "drop table ${p}1" >/dev/null 2>&1
    $CDB2SQL_EXE $SECONDARY_CDB2_OPTIONS $SECONDARY_DBNAME default "drop table ${p}2" >/dev/null 2>&1

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table ${p}1(a int, b $tt)" >/dev/null
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table ${p}2(a int, b $tt)" >/dev/null

    $CDB2SQL_EXE $SECONDARY_CDB2_OPTIONS $SECONDARY_DBNAME default "create table ${p}1(a int, b $tt)" >/dev/null
    $CDB2SQL_EXE $SECONDARY_CDB2_OPTIONS $SECONDARY_DBNAME default "create table ${p}2(a int, b $tt)" >/dev/null

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into ${p}1(a, b) select *,* from generate_series(1, 10)" >/dev/null
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from ${p}1")
    [[ "$x" -ne "10" ]] && failexit "Couldn't insert type $tt info ${p}1"

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into ${p}2(a, b) select *,* from generate_series(1, 10)" >/dev/null
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from ${p}2")
    [[ "$x" -ne "10" ]] && failexit "Couldn't insert type $tt info ${p}1"

    $CDB2SQL_EXE $SECONDARY_CDB2_OPTIONS $SECONDARY_DBNAME default "insert into ${p}1(a, b) select *,* from generate_series(1, 10)" >/dev/null

    x=$($CDB2SQL_EXE -tabs $SECONDARY_CDB2_OPTIONS $SECONDARY_DBNAME default "select count(*) from ${p}1")
    [[ "$x" -ne "10" ]] && failexit "Couldn't insert type $tt info ${p}1"

    $CDB2SQL_EXE $SECONDARY_CDB2_OPTIONS $SECONDARY_DBNAME default "insert into ${p}2(a, b) select *,* from generate_series(1, 10)" >/dev/null
    x=$($CDB2SQL_EXE -tabs $SECONDARY_CDB2_OPTIONS $SECONDARY_DBNAME default "select count(*) from ${p}2")
    [[ "$x" -ne "10" ]] && failexit "Couldn't insert type $tt info ${p}1"

    echo "-"
}

function verify_cnt
{
    typeset msg="$1"
    typeset tt="$2"
    typeset sql="$3"
    typeset cnt="$4"

    echo "Verify count $msg for type $tt"
    echo "Running $sql"

    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "$sql" 2>&1)
    r=$?
    if [[ "$r" != "0" ]] ; then
        echo "$x"
        failexit "$msg for type $tt"
    fi

    if [[ "$x" -ne "$cnt" ]] ; then
        echo "Incorrect count, required $cnt got $x"
        failexit "Incorrect count, $msg for type $tt"
    fi
}

function test_sql
{
    typeset msg="$1"
    typeset tt="$2"
    typeset sql="$3"

    echo "Testing $msg for type $tt"
    echo "Running $sql"

    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "$sql" 2>&1)
    r=$?
    if [[ "$r" != "0" ]] ; then
        echo "$x"
        failexit "$msg for type $tt"
    fi
    echo "-"
}

function test_remote_type
{
    typeset tt=$1
    typeset p=${2:-t}
    typeset nocreate=${3:-0}

    if [[ "$nocreate" == "0" ]]; then
        recreate_tables $tt $p
    fi

    msg="local-local integer-integer"
    test_sql "$msg" "$tt" "select l.a, r.a from ${p}1 as l, ${p}2 as r where l.a > r.a"
    verify_cnt "$msg" "$tt" "select count(*) from ${p}1 as l, ${p}2 as r where l.a > r.a" 45

    msg="local-local $tt-$tt"
    test_sql "$msg" "$tt" "select l.b, r.b from ${p}1 as l, ${p}2 as r where l.b > r.b"
    verify_cnt "$msg" "$tt" "select count(*) from ${p}1 as l, ${p}2 as r where l.b > r.b" 45

    msg="local-local integer-$tt"
    test_sql "$msg" "$tt" "select l.a, r.b from ${p}1 as l, ${p}2 as r where l.a > r.b"
    verify_cnt "$msg" "$tt" "select count(*) from ${p}1 as l, ${p}2 as r where l.a > r.b" 45

    msg="local-local $tt-integer"
    test_sql "$msg" "$tt" "select l.a, r.b from ${p}1 as l, ${p}2 as r where l.b > r.a"
    verify_cnt "$msg" "$tt" "select count(*) from ${p}1 as l, ${p}2 as r where l.b > r.a" 45

    msg="local-remote integer-integer"
    test_sql "$msg" "$tt" "select l.a, r.a from ${p}1 as l, LOCAL_$SECONDARY_DBNAME.${p}2 as r where l.a > r.a"
    verify_cnt "$msg" "$tt" "select count(*) from ${p}1 as l, LOCAL_$SECONDARY_DBNAME.${p}2 as r where l.a > r.a" 45

    msg="local-remote integer-$tt"
    test_sql "$msg" "$tt" "select l.a, r.b from ${p}1 as l, LOCAL_$SECONDARY_DBNAME.${p}2 as r where l.a > r.b"
    verify_cnt "$msg" "$tt" "select count(*) from ${p}1 as l, LOCAL_$SECONDARY_DBNAME.${p}2 as r where l.a > r.b" 45

    msg="local-remote $tt-integer"
    test_sql "$msg" "$tt" "select l.a, r.b from ${p}1 as l, LOCAL_$SECONDARY_DBNAME.${p}2 as r where l.b > r.a"
    verify_cnt "$msg" "$tt" "select count(*) from ${p}1 as l, LOCAL_$SECONDARY_DBNAME.${p}2 as r where l.b > r.a" 45

    # local-to-remote decimal64-decimal64 is still broken- being compared as string-string
    msg="local-remote $tt-$tt"
    test_sql "$msg" "$tt" "select l.b, r.b from ${p}1 as l, LOCAL_$SECONDARY_DBNAME.${p}2 as r where l.b > r.b"
    verify_cnt "$msg" "$tt" "select count(*) from ${p}1 as l, LOCAL_$SECONDARY_DBNAME.${p}2 as r where l.b > r.b" 45
}

function run_test_same_name
{
    echo "> run_test_same_name"

    test_remote_type decimal64 a
    test_remote_type smallint a
    test_remote_type largeint a
    test_remote_type bigint a
    test_remote_type float a
    test_remote_type smallfloat a
    test_remote_type intervalym a
    test_remote_type intervalds a
    test_remote_type intervaldsus a
    test_remote_type int a
}

function run_test_different_name
{
    echo "> run_test_different_name"

    test_remote_type decimal64 a
    test_remote_type smallint b
    test_remote_type largeint c
    test_remote_type bigint d
    test_remote_type float e
    test_remote_type smallfloat f
    test_remote_type intervalym g
    test_remote_type intervalds h
    test_remote_type intervaldsus i
    test_remote_type int j
}

function run_test_create_tables_up_front
{
    echo "> run_test_create_tables_up_front"

    # Create all tables up front
    recreate_tables decimal64 a 
    recreate_tables smallint b
    recreate_tables largeint c
    recreate_tables bigint d
    recreate_tables float e
    recreate_tables smallfloat f
    recreate_tables intervalym g
    recreate_tables intervalds h
    recreate_tables intervaldsus i
    recreate_tables int j

    # The '1' at end prevents it from recreating tables
    test_remote_type decimal64 a 1
    test_remote_type smallint b 1
    test_remote_type largeint c 1
    test_remote_type bigint d 1
    test_remote_type float e 1
    test_remote_type smallfloat f 1
    test_remote_type intervalym g 1
    test_remote_type intervalds h 1
    test_remote_type intervaldsus i 1
    test_remote_type int j 1
}

run_test_create_tables_up_front
run_test_different_name
run_test_same_name

echo "Success!"

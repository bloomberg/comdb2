#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
debug=0

# Grab my database name.
dbnm=$1
if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

rebuild=1
if [ "x$2" == "xnorebuild" ] ; then
    rebuild=0
fi

tbl=t2
foreigntbl=t1


# Number of records I will add.
nrecs=2000

# Max number of schema changes
max_nusc=1000

function failexit
{
    echo "Failure: $1"
    exit -1
}

function assertcnt 
{
    target=$1
    cnt=$(cdb2sql ${CDB2_OPTIONS} --tabs $dbnm default "select count(*) from $tbl" )
    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}


function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('$tbl')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


function do_alter
{
    locnewtbl=$1
    echo "do alter t2 -> ${locnewtbl}"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table $tbl { `cat ${locnewtbl}.csc2 ` }"

    if [[ $? -ne 0 ]]; then
        touch failedalter
    fi
}


function do_sc_track_pid
{
    typeset loc_dbnm=$1
    typeset loc_tbl=$2
    typeset track_pid=$3
    typeset scnt=0
    typeset failed=0
    while `kill -0 $track_pid 2>/dev/null` && [[ $scnt -lt $max_nusc ]]; do

        v=$((scnt%2 + 2)) #2 or 3
        csc=t${v}.csc2

        echo "Running alter iteration $scnt: $loc_tbl $csc"
        cdb2sql ${CDB2_OPTIONS} $loc_dbnm default "alter table $loc_tbl { `cat $csc ` }"

        if [[ $? != 0 ]]; then
            print "Error schema-changing on iteration $scnt"
            echo "NOTE: schemachange above CORRECTLY failed"
            failed=1
        fi

        do_verify 
        let scnt=scnt+1
        #sleep 1
    done

    echo "Performed $scnt schema-changes."

    if [ $failed -eq 0 ] ; then
        echo "Testcase failed: SC succeeded $scnt times"
        exit 1
    fi

    return 0
}


function do_rebuild_track_pid
{
    typeset loc_dbnm=$1
    typeset loc_tbl=$2
    typeset track_pid=$3
    typeset scnt=0
    while `kill -0 $track_pid 2>/dev/null` && [[ $scnt -lt $max_nusc ]]; do

        echo "Running rebuild iteration $scnt"
        cdb2sql ${CDB2_OPTIONS} $loc_dbnm default "rebuild $loc_tbl"

        if [[ $? != 0 ]]; then
            echo "Error schema-changing on iteration $scnt"
            echo "Testcase failed"
            kill -9 $track_pid
            exit 1
        fi

        do_verify 
        let scnt=scnt+1
        #sleep 1
    done

    echo "Performed $scnt schema-changes."

    return 0
}




function do_rebuild
{
    typeset max=$1
    typeset scnt=0
    while [[ $scnt -lt $max ]]; do 

        echo "Running rebuild iteration $scnt"
        cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $tbl"

        if [[ $? != 0 ]]; then
            echo "Error schema-changing on iteration $scnt"
            echo "Testcase failed"
            return 1
        fi
        let scnt=scnt+1
        do_verify
    done
    assertcnt $nrecs

    return 0
}



function delete_records
{
    j=1
    remaining=$nrecs
    echo
    echo "Deleting $nrecs records."
    echo "" > delete.out
    strt=$(date +%s)

    while [[ $j -le $nrecs ]]; do 
         cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from $tbl where a = $j" >> delete.out 2>&1 || $(echo "ERROR DELETING"; exit -1)
         cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from $foreigntbl where a = $j" >> delete_${foreigntbl}.out 2>&1 || $(echo "ERROR DELETING"; exit -1)
         let j=j+1
	     let remaining=remaining-1
         #assertcnt $remaining
         #sleep 0.1
    done
    end=$(date +%s)
    echo "delete_records took $((end - strt)) sec."
}

function insert_foreign
{
    j=1
    locnrecs=$1
    echo
    echo "Inserting $locnrecs records to tbl $foreigntbl."

    while [[ $j -le $locnrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into $foreigntbl(a) values ($j)"  >> insert_${foreigntbl}.out 2>&1
        let j=j+1
    done
}


function insert_records
{
    j=1
    locnrecs=$1
    slptm=$2

    echo
    echo "Inserting $locnrecs records."
    strt=$(date +%s)

    while [[ $j -le $locnrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into $tbl(a,b,c,d,e,f) values ($j,'test1',x'1234',$j, $((j*2)),$j)"  >> insert.out 2>&1
        #assertcnt $j
        let j=j+1
        if [ $slptm -gt 0 ] ; then
            sleep $slptm
        fi
    done
    end=$(date +%s)
    echo "insert_records took $((end - strt)) sec."
}

function update_f
{
    j=1
    locnrecs=$1
    slptm=$2

    echo
    echo "updating f"
    strt=$(date +%s)
    > update.out

    while [[ $j -lt $locnrecs ]]; do 
        ##cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set d=d, f=f+1, e=e+1, c=x'2345', extrablb=NULL where a=$j"  >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set d=d where a=$j"  >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set f=f+1 where a=$j"  >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set e=e+1 where a=$j"  >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set a=a where a=$j"    >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set extrablb=NULL where a=$j"    >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set extrablb=\"balkjd$slptm\" where a=$j"    >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set c=x'2345' where a=$j"    >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set c=NULL where a=$j"    >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set extrablb=NULL where a=$j"    >> update.out 2>&1
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update $tbl set c=x'3456' where a=$j"    >> update.out 2>&1
        #assertcnt $j
        let j=j+1
        if [ $slptm -gt 0 ] ; then
            sleep $slptm
        fi
    done
    end=$(date +%s)
    echo "update_f took $((end - strt)) sec."
}

function runsql_from_fl_with_time 
{
    sqlfl=$1
    exec 3>&1 4>&2
    sqltime=$(TIMEFORMAT="%R"; { time cdb2sql ${CDB2_OPTIONS} -f $sqlfl $dbnm default 1>&3 2>&4; } 2>&1)
    exec 3>&- 4>&-
}


function addrecords
{
    echo "addrecords $@"
    typeset loc_DB=$1
    typeset loc_tbl=$2
    typeset loc_i=$3
    typeset loc_max=$4
    typeset loc_transize=0
    typeset loc_tran=0

    if [ "x$5" != "x" ] ; then
        loc_transize=$5
    fi
    r=$RANDOM
    sqlfl=add.sql.${r}
    > $sqlfl
    timefl=add.time

    while [ $loc_i -le $loc_max ] ; do
        if [[ $loc_transize -gt 0 && $loc_tran -eq 0 ]] ; then
            echo "BEGIN" > $sqlfl
        fi
        echo "INSERT INTO $loc_tbl values($loc_i, 'test1', x'1234', $((loc_i*2)), $loc_i, $((loc_i*2))) " >> $sqlfl
        let loc_tran=loc_tran+1
        let loc_i=loc_i+1

        if [[ $loc_transize -gt 0 && $loc_tran -ge $loc_transize ]] ; then
            echo "COMMIT" >> $sqlfl
            loc_tran=0

            #will set $sqltime
            runsql_from_fl_with_time $sqlfl
            echo "sqltime $sqltime"
            echo $sqltime >> $timefl
            rm $sqlfl
        elif [[ $loc_transize -eq 0 ]] ; then
            #will set $sqltime
            runsql_from_fl_with_time $sqlfl
            echo $sqltime >> $timefl
            rm $sqlfl
        fi
    done  
    rm $sqlfl 2> /dev/null
}



#rebuild table and verify
function run_plain_rebuilds
{
    typeset ipid=''
    nrecs=$1
	echo 
	echo "run_test $nrecs"
    loc_tbl=t2

    EXTRA=$((nrecs*2)) 
	echo "adding $EXTRA records to one stripe"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure addrecs($EXTRA)"  #add large numbers at offset > 0.1M
    assertcnt $((EXTRA))

	echo "adding $nrecs foreign records"
    insert_foreign $nrecs

	echo "adding $nrecs records in the background"
    insert_records $nrecs 0


    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $loc_tbl"
    if [[ $? != 0 ]]; then
        failexit "Failed rebuilding $loc_tbl"
    fi

    assertcnt $((EXTRA+nrecs))
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild index $loc_tbl A"
    if [[ $? != 0 ]]; then
        failexit "Failed rebuilding index A on $loc_tbl"
    fi

    assertcnt $((EXTRA+nrecs))
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild index $loc_tbl D"
    if [[ $? != 0 ]]; then
        failexit "Failed rebuilding index D on $loc_tbl"
    fi

    assertcnt $((EXTRA+nrecs))
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild index $loc_tbl fd"
    if [[ $? != 0 ]]; then
        failexit "Failed rebuilding index fd on $loc_tbl"
    fi
    assertcnt $((EXTRA+nrecs))
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild data $loc_tbl"
    if [[ $? != 0 ]]; then
        failexit "Failed rebuilding data on $loc_tbl"
    fi
    assertcnt $((EXTRA+nrecs))
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild datablob $loc_tbl"
    if [[ $? != 0 ]]; then
        failexit "Failed rebuilding blobs on $loc_tbl"
    fi
    assertcnt $((EXTRA+nrecs))
    do_verify

}

function run_pageorder_rebuilds
{
    loc_tbl=t2
    cnt=$(cdb2sql ${CDB2_OPTIONS} --tabs $dbnm default "select count(*) from $tbl" )

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $loc_tbl options pageorder"
    if [[ $? == 0 ]]; then
        failexit "Page-order full rebuild in read-write mode should have failed"
    fi

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild $loc_tbl options pageorder,readonly"
    if [[ $? != 0 ]]; then
        failexit "Page-order full rebuild in readonly mode should have succeeded"
    fi
    assertcnt $cnt
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild data $loc_tbl options pageorder"
    if [[ $? == 0 ]]; then
        failexit "Page-order data rebuild in read-write mode should have failed"
    fi
    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild data $loc_tbl options pageorder,readonly"
    if [[ $? != 0 ]]; then
        failexit "Page-order data rebuild in readonly mode should have succeeded"
    fi
    assertcnt $cnt
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild datablob $loc_tbl options pageorder"
    if [[ $? == 0 ]]; then
        failexit "Page-order datablob rebuild in read-write mode should have failed"
    fi

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild datablob $loc_tbl options pageorder,readonly"
    if [[ $? != 0 ]]; then
        failexit "Page-order datablob rebuild in readonly mode should have succeeded"
    fi
    assertcnt $cnt
    do_verify

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild index $loc_tbl fd options pageorder"
    if [[ $? == 0 ]]; then
        failexit "Page-order index rebuild in read-write mode should have failed"
    fi

    cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild index $loc_tbl fd options pageorder,readonly"
    if [[ $? != 0 ]]; then
        failexit "Page-order index rebuild in readonly mode should have succeeded"
    fi
    assertcnt $cnt
    do_verify
}


function rebuild_new_field_and_idx
{
    typeset ipid=''
	echo "rebuild_new_field_and_idx"
    loc_tbl=t2
    new_tbl=t2_2

    cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table $loc_tbl { `cat ${new_tbl}.csc2 ` }"

    if [[ $? != 0 ]]; then
        failexit "Failed altering on $loc_tbl with $new_tbl"
    fi
    do_verify
}


echo "running test in machine $(hostname):${PWD}"

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop procedure addrecs 2"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop procedure addrecs 1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop procedure addrecs 0"
cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default - <<EOF
create procedure addrecs version 'sptest' {$(cat addrecs.lua)}\$\$
put default procedure addrecs 'sptest'
EOF

cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default "select src from comdb2_procedures" > addrecs.lua.out
if !diff addrecs.lua addrecs.lua.out &> /dev/null ; then
    failexit "procedure content comdb2_procedures differs from addrecs.lua"
fi


cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $foreigntbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $foreigntbl  { `cat $foreigntbl.csc2 ` }"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat $tbl.csc2 ` }"

run_plain_rebuilds 500
run_pageorder_rebuilds
rebuild_new_field_and_idx 

echo Success

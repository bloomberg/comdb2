#!/usr/bin/env bash
bash -n "$0" | exit 1

# Time partition testcase for comdb2
################################################################################

# args
# <dbname>
dbname=$1

VIEW1="testview1"
VIEW2="testview2"
OUT="run.log"

rm $OUT 2>/dev/null
touch $OUT


function timepart_stats
{
    dbn=$1
    # check the current partitions 
    echo cdb2sql ${CDB2_OPTIONS} $dbn default "exec procedure sys.cmd.send('partitions')" | 
        egrep -v "STARTTIME|LOW|HIGH|SOURCE_ID" >> $OUT
    cdb2sql -tabs ${CDB2_OPTIONS} $dbn default "exec procedure sys.cmd.send('partitions')" |
        egrep -v "STARTTIME|LOW|HIGH|SOURCE_ID" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo cdb2sql ${CDB2_OPTIONS} $dbn default  "select name, period, retention, nshards, version,shard0name from comdb2_timepartitions " >> $OUT
    cdb2sql ${CDB2_OPTIONS} $dbn default  "select name, period, retention, nshards, version,shard0name from comdb2_timepartitions " >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo cdb2sql ${CDB2_OPTIONS} $dbn default  "select name, shardname from comdb2_timepartshards" >> $OUT
    cdb2sql ${CDB2_OPTIONS} $dbn default  "select name, shardname from comdb2_timepartshards" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi
}

function timepart_stats2
{
    dbn=$1
    nd=$2
    # check the current partitions 
    echo $CDB2SQL_EXE -tabs --host $nd $dbn default "exec procedure sys.cmd.send('partitions')" | 
        egrep -v "STARTTIME|LOW|HIGH|SOURCE_ID"
    $CDB2SQL_EXE -tabs --host $nd $dbn default "exec procedure sys.cmd.send('partitions')" |
        egrep -v "STARTTIME|LOW|HIGH|SOURCE_ID" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo $CDB2SQL_EXE --host $nd $dbn default  "select name, period, retention, nshards, version,shard0name from comdb2_timepartitions "
    $CDB2SQL_EXE --host $nd $dbn default  "select name, period, retention, nshards, version,shard0name from comdb2_timepartitions " >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo $CDB2SQL_EXE --host $nd $dbn default  "select name, shardname from comdb2_timepartshards"
    $CDB2SQL_EXE --host $nd $dbn default  "select name, shardname from comdb2_timepartshards" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi
}


timepart_stats $dbname

# create the partition
starttime1=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()-60*60*(24*4+1))'`
echo cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t1 as ${VIEW1} PERIOD 'daily' RETENTION 3 START '${starttime1}'" 
cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t1 as ${VIEW1} PERIOD 'daily' RETENTION 3 START '${starttime1}'" >> $OUT
if (( $? != 0 )) ; then
   echo "FAILURE"
   exit 1
fi
sleep 10
starttime2=`perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()-60*60*(24*2+1))'`
echo cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t2 as ${VIEW2} PERIOD 'daily' RETENTION 3 START '${starttime2}'" 
cdb2sql ${CDB2_OPTIONS} $dbname default "CREATE TIME PARTITION ON t2 as ${VIEW2} PERIOD 'daily' RETENTION 3 START '${starttime2}'" >> $OUT
if (( $? != 0 )) ; then
   echo "FAILURE"
   exit 1
fi
sleep 10

timepart_stats $dbname

echo "Inserting rows table t1" >> $OUT

let row=0
while (( $row != 100 )) ; do
    echo cdb2sql ${CDB2_OPTIONS} $dbname default "insert into ${VIEW1} values ($row, 'A row', 0x'DEADBEAF')" >> $OUT
    cdb2sql ${CDB2_OPTIONS} $dbname default "insert into ${VIEW1} values ($row, 'A row', x'DEADBEAF')" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi
    let row=row+1
done

echo "Inserting rows table t2" >> $OUT

let row=0
while (( $row != 100 )) ; do
    echo cdb2sql ${CDB2_OPTIONS} $dbname default "insert into ${VIEW2} values ($row)" >> $OUT
    cdb2sql ${CDB2_OPTIONS} $dbname default "insert into ${VIEW2} values ($row)" >> $OUT
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi
    let row=row+1
done

echo "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" >> $OUT

echo cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW1} order by a" >> $OUT
cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW1} order by a" >> $OUT
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

echo cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW2} order by a" >> $OUT
cdb2sql ${CDB2_OPTIONS} $dbname default "select * from ${VIEW2} order by a" >> $OUT
if (( $? != 0 )) ; then
    echo "FAILURE"
    exit 1
fi

timepart_stats $dbname

cp clonedb.sh clonedb.sh.actual
sed -i "s~\$dbname~$dbname~g" clonedb.sh.actual
sed -i "s~\$TESTDIR~$TESTDIR~g" clonedb.sh.actual
sed -i "s~\$DBDIR~$DBDIR~g" clonedb.sh.actual
sed -i "s~\$TMPDIR~$TMPDIR~g" clonedb.sh.actual
sed -i "s~\$COMDB2_EXE~$COMDB2_EXE~g" clonedb.sh.actual
sed -i "s~\$COMDB2AR_EXE~$COMDB2AR_EXE~g" clonedb.sh.actual

newdb=srcdb$dbname
newdbdir=$TESTDIR/$newdb
newlrl=$newdbdir/$newdb.lrl

if [ -z "$CLUSTER" ]; then
    ./clonedb.sh.actual

    echo "Bringing the $newdb up"

    # bring the db up
    echo $COMDB2_EXE $newdb --lrl $newlrl --pidfile $TMPDIR/$newdb.pid
    $COMDB2_EXE $newdb --lrl $newlrl --pidfile $TMPDIR/$newdb.pid &
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo "Waiting for db"
    sleep 10

    echo "Confirming time partition transfer for $newdb"
    timepart_stats2 $newdb `hostname`

    echo "Killing db $newdb"
    ./killdb.sh $newdb ${TMPDIR}/$newdb.pid
else
    node=`echo $CLUSTER | awk '{ print $1}'`
    scp clonedb.sh.actual $node:$DBDIR/clonedb.sh.actual
    scp killdb.sh $node:$DBDIR/killdb.sh

    ssh $node $DBDIR/clonedb.sh.actual

    echo "Bringing the $newdb up"

    # bring the db up
    echo nohup $COMDB2_EXE $newdb --lrl $newlrl --pidfile $TMPDIR/$newdb.pid
    ssh $node nohup $COMDB2_EXE $newdb --lrl $newlrl --pidfile $TMPDIR/$newdb.pid &
    if (( $? != 0 )) ; then
        echo "FAILURE"
        exit 1
    fi

    echo "Waiting for db"
    sleep 10

    echo "Confirming time partition transfer for $newdb"
    timepart_stats2 $newdb $node

    echo "Killing db $newdb"
    ssh $node $DBDIR/killdb.sh $newdb  ${TMPDIR}/$newdb.pid
fi

# we need to scrub dbname from alpha
sed "s/dorintdb/$dbname/g; s#\${CDB2_OPTIONS}#${CDB2_OPTIONS}#g" $OUT.alpha > $OUT.alpha.actual

difs=`diff $OUT $OUT.alpha.actual`
if [[ ! -z "${difs}" ]] ; then
   echo "diff $OUT $OUT.alpha.actual"
   echo ${difs}
   echo "FAILURE"
   exit 1
fi

echo "SUCCESS"

#!/usr/bin/env bash
bash -n "$0" | exit 1

################################################################################

TMPDIR=${TMPDIR:-/tmp}

# debug=1

# args
a_dbn=$1

# find input files
files=$( find . -type f -name \*.req | sort )

export COMDB2_IOLBF=1
export PATH=.:$PATH

# counter 
nfiles=0

# last batch
last_batch=

# post-process
pproc=cat

# testcase output
testcase_output=

# expected output
expected_output=

# fastinit
function fastinit
{
    # print debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset db=$1
    typeset iter=$2
    typeset tbl

    # flagged?
    if [[ ! -f $iter.fastinit ]]; then
        return 0
    fi

    # fastinit for constraints requires an sql delete
    for tbl in $(cat $iter.fastinit) ; do
        
        cmd="cdb2sql ${CDB2_OPTIONS} $db default \"delete from $tbl where 1=1\""
        echo $cmd
        eval $cmd
    done

    return 0
}





# run tool
function runtool
{
    # print debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset tool=$1
    typeset db=$2
    typeset log=$3

    # run
    echo "$tool $db &> $log"
    eval $tool $db &> $log
}

# runstepper
function runstepper
{
    # print debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset db=$1
    typeset tcs=$2
    typeset log=$3

    # teststepper
    typeset stp=${TESTSBUILDDIR}/stepper

    # echo
    echo "> $stp $db $tcs $log"

    # execute
    $stp $db $tcs $log
}


# Iterate through input files
for testcase in $files ; do

    # increment counter
    let nfiles=nfiles+1

    # cleanup testcase
    testcase=${testcase##*/}
    
    # see if the prefix has changed
    new_batch=${testcase%%_*}

    # set output
    output=$testcase.res
    
    # fastinit if requested
    if [[ $new_batch != $last_batch ]] ; then

        fastinit $a_dbn $new_batch
        last_batch=$new_batch

    fi

    # Check for run-stepper
    if [[ -f $new_batch.runstepper ]] ; then

        runstepper $a_dbn $testcase $output

    elif [[ -f $new_batch.tool ]] ; then

        tool=$( cat $new_batch.tool )
        args=$( cat $new_batch.args )
        runtool $tool $a_dbn $output

    else

        # Be verbose
        cmd="cdb2sql ${CDB2_OPTIONS} $a_dbn default - < $testcase &> $output"
        echo "$cmd"

        # run command
        eval $cmd
        cat $output

    fi

    # post-process
    if [[ -f $new_batch.post ]]; then

        # zap file
        > $output.postprocess

        # collect post-processing tool
        pproc=$(cat $new_batch.post)

        # post-process output
        $pproc $output >> $output.postprocess

        # copy post-processed output to original
        mv $output.postprocess $output
    fi

    # get testcase output
    testcase_output=$(cat $output)

    # get expected output
    expected_output=$(cat $testcase.out)

    expected_output2=$(cat $testcase.out2)

    expected_output3=$(cat $testcase.out3)

    # verify 
    if [[ "$testcase_output" != "$expected_output" ]] && [[ "$testcase_output" != "$expected_output2" ]] && [[ "$testcase_output" != "$expected_output3" ]] ; then
        echo "  ^^^^^^^^^^^^"
        echo "The above testcase (${testcase}) has failed!!!"
        echo " "
        echo "Use 'diff <expected-output> <my-output>' to see why:"
        echo "> diff ${PWD}/{$testcase.out,$output}"
        echo " "
        diff $testcase.out $output
        echo " "
        exit 1

    fi

done

echo "Testcase passed."

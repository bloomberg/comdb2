#!/usr/bin/env bash
bash -n "$0" | exit 1
source ${TESTSROOTDIR}/tools/runit_common.sh

# Grab my database name.
dbnm=$1

TMPDIR=${TMPDIR:-/tmp}

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

comdb2dumpcsc () 
{
    cdb2sql --tabs ${CDB2_OPTIONS} $1 default "select name from sqlite_master where type='table' and name not like '%sqlite_stat%'"
}

for table in $(comdb2dumpcsc $dbnm); do 
    cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $table"
done
cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate sqlite_stat1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate sqlite_stat4"
cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t1 {
schema
{
    int      a
    cstring  b[32]
    blob     c
    int      d
}

keys
{
dup "A" =  a
dup "B" =  b
}
}
'

cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2 {
schema
{
    int      a
    cstring  b[32]
    blob     c
    int      d
}

keys
{
dup "A" =  a
dup "B" =  b
}
}
'



delete_records()
{
    nrecs=$1
    j=0
    echo "deleting $nrecs records."

    while [[ $j -lt $nrecs ]]; do 
        echo "delete from t1 where a == $j"
        let j=j+1
    done | cdb2sql -s ${CDB2_OPTIONS} $dbnm default &> deleted.out || failexit 'failure to delete'
}

update_records()
{
    nrecs=$1
    j=0
    echo "Updating $nrecs records."

    while [[ $j -lt $nrecs ]]; do 
        echo "update t1 set d=d+1 where a == $j"
        let j=j+1
    done | cdb2sql -s ${CDB2_OPTIONS} $dbnm default &> updated.out || failexit 'failure to update'
}


insert_records()
{
    j=0
    nrecs=$1
    echo "Inserting $nrecs records."

    while [[ $j -lt $nrecs ]]; do 
        echo "insert into t1(a,b,c,d) values ($j,'test1',x'1234',$j)"
        let j=j+1
    done | cdb2sql -s ${CDB2_OPTIONS} $dbnm default &> inserted.out || failexit 'failure to insuert'
}


insert_records_tran()
{
    j=0
    tbl=$1
    nrecs=$2
    echo "Inserting $nrecs records as one transaction."
    echo "begin" > inserts.in
    while [[ $j -lt $nrecs ]]; do 
        echo "insert into $tbl (a,b,c,d) values ($j,'test1',x'1234',$j)"
        let j=j+1
    done >> inserts.in
    echo "commit" >> inserts.in
    cdb2sql -s ${CDB2_OPTIONS} $dbnm default - < inserts.in >> inserted2.out 2>&1
    if [ $? -ne 0 ] ; then
        failexit "could not insert the records in a transaction"
    fi
}


# note: call this function with master node as parameter
get_autoanalyze_stat()
{
    node=$1

    fl=stat.out
    cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm  'exec procedure sys.cmd.send("stat autoanalyze")' | grep "Table t1" > $fl

    sCnt=`cat $fl | cut -d= -f2 | awk '{print $1}'`
    lRun=`cat $fl | cut -d= -f3 | sed 's/[^(]*(\([^)]*\))/\1/' | cut -d, -f1 `
    echo "count $sCnt, lastrun $lRun" >&2
    echo $sCnt $lRun > $TMPDIR/$$.out
    read savedCnt lastRun < $TMPDIR/$$.out
    rm -f $TMPDIR/$$.out
}


get_autoanalyze_stat_from_table()
{
    node=$1

    fl=stat.out
    sCnt=`cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm "select counter from comdb2_auto_analyze_tables where tablename='t1'"`
    lRun=`cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm "select cast(last_run_time as int) from comdb2_auto_analyze_tables where tablename='t1'"`
    echo $sCnt $lRun > $TMPDIR/$$.out
    read savedCntTable lastRunTable < $TMPDIR/$$.out
    rm -f $TMPDIR/$$.out
}


stats_should_be()
{
    Cnt=$1
    lRun=$2
    v1=$3
    v2=$4

    if [[ $Cnt -ne $v1 ]] ; then
        failexit "savedCnt is $Cnt but should be $v1"
    fi
    if [[ $lRun -ne $v2 ]] ; then
        failexit "lastRun $lRun -ne $v2"
    fi
}




# START OPERATIONS 

echo ""
echo "running test in machine $(hostname):${PWD}"
master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`

#cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb setattr aa_min_percent 0")'
T_TO_SLEEP=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("bdb attr")' | grep -i min_aa_time | awk '{print $3}')
T_TO_SLEEP=$((T_TO_SLEEP+1))
#T_TO_SLEEP=26

echo "Testing adding num records that exceeds the threshold"

echo "just initialized, stats should be blank at this point"
get_autoanalyze_stat $master 
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 0 0
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun

echo ""
insert_records_tran t1 900

echo ""
echo "stats should have data, but date still be blank"
get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 900 0
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun

sleep $T_TO_SLEEP 

echo ""
echo "stats should have same amount of data, date still be blank"
get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 900 0
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("bdb setattr autoanalyze 0")'

echo ""
echo "updates dont count towards counter -- must be small otherwise we loose delta -- new goes to prev"
update_records 101

get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 900 0
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master 'exec procedure sys.cmd.send("bdb setattr autoanalyze 1")'

echo ""
echo "make updates to count towards counter"
if [[ -n "$CLUSTER" ]]; then
    for node in $CLUSTER ; do 
        cdb2sql --tabs ${CDB2_OPTIONS} --host $node $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_count_upd 1")'
    done
else
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb setattr aa_count_upd 1")'
fi

get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 1001 0
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun


sleep $T_TO_SLEEP

prevDate=$lastRun
get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
echo "autoanalyze should have triggered stats should be blank now, but date should be set"

if [ $lastRun -eq $prevDate ] ; then
    echo "lastRun $lastRun is eq to $prevDate "
    echo "Failed"
    exit -1
fi

stats_should_be $savedCnt $lastRun 0 $lastRun
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun


echo ""
echo "deleting records"
prevDate=$lastRun
delete_records 10
get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 10 $prevDate
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun

sleep 6


echo ""
echo "stats should be updated, date stays the same"
get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 10 $prevDate
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun

sleep $T_TO_SLEEP

echo "Testing that manually running analyze zeros out counters"
date
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select now()'

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.analyze("t1")'

sleep 5 #allow time for master to receive msg and reset counter

echo ""
echo "stats should be blank, date should be updated"
prevDate=$lastRun
get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
if [ $lastRun -eq $prevDate ] ; then
    echo "lastRun $lastRun is eq to $prevDate but should not be due to analyze"
    echo "Failed"
    exit -1
fi

stats_should_be $savedCnt $lastRun 0 $lastRun
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun
sleep 2 


echo "Testing Fastinit"

prevDate=$lastRun
insert_records_tran t1 100

get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
echo "stats should be updated, date stays the same"
stats_should_be $savedCnt $lastRun 100 $prevDate
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun

sleep $T_TO_SLEEP

get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 100 $prevDate
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun




echo ""
echo "fast init t1 should cause analyze to run"

tbl=t1
cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate $tbl"
prevDate=$lastRun
sleep 2 

get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 

if [ $lastRun -eq $prevDate ] ; then
    echo "lastRun $lastRun is eq to $prevDate "
    echo "Failed"
    exit -1
fi

stats_should_be $savedCnt $lastRun 0 $lastRun
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun



sleep $T_TO_SLEEP 

echo ""

echo "Testing Percent based insert "

cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_min_percent 5")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_min_percent_jitter 100")'

cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr autoanalyze 0")'

sleep 1

insert_records_tran t1 200
prevDate=$lastRun

get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 
stats_should_be $savedCnt $lastRun 200 $prevDate
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun

echo "Turn on autoanalyze"
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr autoanalyze 1")'

sleep $T_TO_SLEEP
date

get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1" 

if [ $lastRun -eq $prevDate ] ; then
    failexit "lastRun $lastRun is eq to $prevDate -- insert should have triggered autoanalyze"
fi

stats_should_be $savedCnt $lastRun 0 $lastRun
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun


cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm "put tunable 'debug.autoanalyze' 1"
insert_records_tran t1 10000
echo 'Insert 1001 records to table t2, because we will be analyzing t1, t2 may remain without autoanalyze'
insert_records_tran t2 1001
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm  'exec procedure sys.cmd.send("stat autoanalyze")' | grep "Table t2"

sleep $((T_TO_SLEEP*3))

echo "stats for table t2"
read cnt <<< `cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm  'exec procedure sys.cmd.send("stat autoanalyze")' | grep "Table t2" | cut -d= -f2 | awk '{print $1}'`
echo "analyze count for t2 $cnt"
if [ "$cnt" != "0" ]; then
    failexit "analyze count should be zero for t2 since autoanalyze should have kicked in for that table"
fi


#can also test downgrade master until it is a different node
#stats should be the same as before

echo ""
echo "Testing Auto Analyze Subtraction Bug"
get_autoanalyze_stat $master
stats_should_be $savedCnt $lastRun 0 $lastRun # initial condition: start with savedCnt == 0
get_autoanalyze_stat_from_table $master
stats_should_be $savedCntTable $lastRunTable $savedCnt $lastRun
prevDate=$lastRun

cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm "put tunable 'debug.autoanalyze' 0"
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr autoanalyze 1")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_count_upd 1")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr min_aa_ops 100000")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr chk_aa_time 6")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr min_aa_time 7200")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_llmeta_save_freq 1")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_min_percent 20")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_min_percent_jitter 300")'

sleep 5

update_records 10 # anything less than aa_min_percent_jitter will work
# Bug is that we evaluate 10 - 300 but 10 used to be unsigned so 10 - 300 >> 0 and not -290. This was compared to aa_min_percent and falsely trigerred analyze
sleep $T_TO_SLEEP

get_autoanalyze_stat $master
echo ""; cat stat.out | grep "Table t1"
if [[ $lastRun != $prevDate || $savedCnt -eq 0 ]] ; then
    if [ $lastRun != $prevDate ] ; then
        echo "lastRun $lastRun is not eq to $prevDate but should be. This means that analyze ran but should not have"
    fi
    if [ $savedCnt -eq 0 ] ; then
        echo "savedCnt is eq to 0. This means that analyze ran but should not have"
    fi
    echo "Failed"
    exit -1
fi

echo ""
echo "Testing needs_analyze in aa_request_mode"

cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr autoanalyze 1")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_count_upd 1")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr min_aa_ops 50")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr chk_aa_time 6")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr min_aa_time 10")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_llmeta_save_freq 1")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_min_percent 20")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_min_percent_jitter 300")'
cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'exec procedure sys.cmd.send("bdb setattr aa_request_mode 1")'

sleep 5

update_records 100
sleep 60

tablename=`cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'select tablename from comdb2_auto_analyze_tables where needs_analyze_time is not NULL'`
if [[ ! $tablename || $tablename != "t1" ]] ; then
    echo "Expected table t1 needing analyze from comdb2_auto_analyze_tables, got $tablename instead"
    echo "Failed"
    exit -1
fi
needs_analyze_time=`cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'select needs_analyze_time from comdb2_auto_analyze_tables where needs_analyze_time is not NULL'`

# make sure needs_analyze_time stays the same
sleep 60

needs_analyze_time2=`cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'select needs_analyze_time from comdb2_auto_analyze_tables where needs_analyze_time is not NULL'`
if [[ $needs_analyze_time != $needs_analyze_time2 ]] ; then
    echo "Time changed for needs_analyze_time from $needs_analyze_time to $needs_analyze_time2"
    echo "Failed"
    exit -1
fi

# also check replicant
replicant=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select host from comdb2_cluster where is_master='N' limit 1"`
if [[ $replicant ]]; then
    echo "Testing replicant $replicant"
    tablename=`cdb2sql --tabs ${CDB2_OPTIONS} --host $replicant $dbnm 'select tablename from comdb2_auto_analyze_tables where needs_analyze_time is not NULL'`
    if [[ ! $tablename || $tablename != "t1" ]] ; then
        echo "Expected table t1 needing analyze from comdb2_auto_analyze_tables on replicant, got $tablename instead"
        echo "Failed"
        exit -1
    fi

    needs_analyze_time2=`cdb2sql --tabs ${CDB2_OPTIONS} --host $replicant $dbnm 'select needs_analyze_time from comdb2_auto_analyze_tables where needs_analyze_time is not NULL'`
    if [[ $needs_analyze_time != $needs_analyze_time2 ]] ; then
        echo "needs_analyze_time on replicant ($needs_analyze_time2) is different than needs_analyze_time on master ($needs_analyze_time)"
        echo "Failed"
        exit -1
    fi

    cdb2sql --tabs ${CDB2_OPTIONS} --host $replicant $dbnm 'needs_analyze t1'
    rc=$?
    if [[ $rc = 0 ]] ; then
        echo "needs_analyze should have failed on replicant"
        echo "Failed"
        exit -1
    fi
fi

cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'needs_analyze t1'
rc=$?
if [[ $rc != 0 ]] ; then
    echo "needs_analyze should not have failed on master"
    echo "Failed"
    exit -1
fi

tablename=`cdb2sql --tabs ${CDB2_OPTIONS} --host $master $dbnm 'select tablename from comdb2_auto_analyze_tables where needs_analyze_time is not NULL'`
if [[ $tablename ]] ; then
    echo "needs_analyze should have cleared comdb2_auto_analyze_tables, got $tablename instead"
    echo "Failed"
    exit -1
fi

if [[ $replicant ]] ; then
    tablename=`cdb2sql --tabs ${CDB2_OPTIONS} --host $replicant $dbnm 'select tablename from comdb2_auto_analyze_tables where needs_analyze_time is not NULL'`
    if [[ $tablename ]] ; then
        echo "needs_analyze should have cleared comdb2_auto_analyze_tables on replicant, got $tablename instead"
        echo "Failed"
        exit -1
    fi
fi

echo "Success"

#!/bin/bash

set -e
set -x

debug=0

[[ $COMDB2_UNITTEST == 1 ]] && exit 0

while [[ $# -gt 0 && $1 = -* ]]; do
    [[ $1 = '-debug' ]] && debug=1
    shift
done

vars="TESTID SRCHOME TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR TMPDIR CDB2_OPTIONS CDB2_CONFIG"
for required in $vars; do
    q=${!required}
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        exit 1
    fi
#    echo "$required=$q"
done

# Setup a debugger to run comdb2 server
DEBUG_PREFIX=

if [[ -n ${DEBUGGER} ]]; then
    case ${DEBUGGER} in
    gdb)
        DEBUG_PREFIX="gdb --args"
        if [[ -z ${INTERACTIVE_DEBUG} ]]; then
            INTERACTIVE_DEBUG=1
        fi
        ;;
    valgrind)
        DEBUG_PREFIX="valgrind"
        if [[ -z ${INTERACTIVE_DEBUG} ]]; then
            INTERACTIVE_DEBUG=0
        fi
        ;;
    callgrind)
        DEBUG_PREFIX="valgrind --tool=callgrind --instr-atstart=yes --dump-instr=yes --collect-jumps=yes --callgrind-out-file=$TESTDIR/$TESTCASE.callgrind"
        if [[ -z ${INTERACTIVE_DEBUG} ]]; then
            INTERACTIVE_DEBUG=0
        fi
        ;;
    perf)
        DEBUG_PREFIX="perf record -o $TESTDIR/$TESTCASE.perfdata -g "
        INTERACTIVE_DEBUG=0
        ;;    
    *)
        DEBUG_PREFIX=${DEBUGGER}
        if [[ -z ${INTERACTIVE_DEBUG} ]]; then
            INTERACTIVE_DEBUG=0
        fi
        ;;
    esac

    TEXTCOLOR='\033[0;32m' # Green
    NOCOLOR='\033[0m'
fi

if [[ $debug -eq 1 ]]; then
    set +x
    export PATH="${SRCHOME}/:${PATH}"
    echo "To run the ${TESTCASE} test, please run the following:"
    echo
    for env in $vars; do
        echo "export $env=\"${!env}\""
    done
    echo 'export PATH=${SRCHOME}/:${PATH}'
    [[ -n "$CLUSTER" ]] && echo 'export CLUSTER="'$CLUSTER'"'
    echo "cd ${TESTSROOTDIR}/${TESTCASE}.test/"
    echo "./runit ${DBNAME} >${TESTDIR}/logs/${TESTCASE}.testcase 2>&1"
    echo "${TESTSROOTDIR}/unsetup"
    echo
    echo
fi

# TESTDIR looks like this: tests/test_12758
# DBDIR looks like this: tests/test_12758/analyzenew12758
mkdir -p $DBDIR $TMPDIR

# setup files:
# DBNAME looks like this: analyze_new_12758
echo "!$TESTCASE: creating"
LRL="$DBDIR/$DBNAME.lrl"
> ${LRL}

if [[ -z $SKIPSSL ]] ; then
    cat >> $DBDIR/$DBNAME.lrl <<EOPTIONS
ssl_client_mode REQUIRE
ssl_cert_path $TESTDIR
EOPTIONS
fi

if [[ -f ${TESTSROOTDIR}/${TESTCASE}.test/lrl ]]; then
    cat ${TESTSROOTDIR}/${TESTCASE}.test/lrl >> ${LRL}
fi
if [[ -f "${TESTSROOTDIR}/${TESTCASE}.test/lrl.options" ]]; then
    cat ${TESTSROOTDIR}/${TESTCASE}.test/lrl.options >> ${LRL}
fi

cat >> $DBDIR/$DBNAME.lrl <<EOPTIONS
name    $DBNAME
dir     $DBDIR

setattr MASTER_REJECT_REQUESTS 0
EOPTIONS

df $DBDIR | awk '{print $1 }' | grep "tmpfs\|nfs" && echo "setattr directio 0" >> ${LRL}

# Do we have a cluster?
if [[ -n "$CLUSTER" ]]; then
    echo $DBNAME 0 $CLUSTER > $CDB2_CONFIG
    echo "comdb2_config:default_type=testsuite" >> $CDB2_CONFIG
    echo "cluster nodes $CLUSTER" >> $DBDIR/$DBNAME.lrl
else
    echo "comdb2_config:default_type=local" >> $CDB2_CONFIG
fi

# Configure client SSL
echo "comdb2_config:ssl_cert_path=$TESTDIR" >>$CDB2_CONFIG

myhostname=`hostname`
set +e

pmux_port=5105
pmux_cmd='pmux -l'
if [ -n "$PMUXPORT" ] ; then
    pmux_port=$PMUXPORT
    pmux_socket=/tmp/pmux.socket.$PMUXPORT
    pmux_port_range="-r 21000:22000"
    pmux_cmd="pmux -l -p $PMUXPORT -b $pmux_socket $pmux_port_range"
    echo "comdb2_config:portmuxport=$PMUXPORT" >> $CDB2_CONFIG
    echo "portmux_port $PMUXPORT" >> ${LRL}
    echo "portmux_bind_path $pmux_socket" >> ${LRL}
fi
stop_pmux="pgrep pmux > /dev/null && (exec 3<>/dev/tcp/localhost/${pmux_port} && echo exit >&3 )"


COPIEDTOCLUSTER=${TMPDIR}/copiedtocluster.log
export COMDB2AR_EXOPTS="-x $comdb2task"

copy_files_to_cluster() 
{
    # copy executables to each node except localhost
    pmux=${SRCHOME}/pmux
    for node in $CLUSTER; do
        if [ $node == $myhostname ] ; then
            continue
        fi

        ssh -o StrictHostKeyChecking=no $node "mkdir -p ${SRCHOME}"
        ssh -o StrictHostKeyChecking=no $node "mkdir -p $TESTDIR/logs/ $TESTDIR/var/log/cdb2 $TESTDIR/tmp/cdb2"
        scp -o StrictHostKeyChecking=no $comdb2ar $node:${SRCHOME} 
        scp -o StrictHostKeyChecking=no $comdb2task $node:${SRCHOME}
        # stop pmux on nodes first before copying and starting it
        if [ -n "$PMUXPORT" ] ; then
            ssh -o StrictHostKeyChecking=no $node "$stop_pmux"
        fi
        scp -o StrictHostKeyChecking=no $pmux $node:${pmux}
        echo start pmux on $node if not running 
        ssh -o StrictHostKeyChecking=no $node "COMDB2_PMUX_FILE='$TESTSROOTDIR/pmux.sqlite' ${SRCHOME}/$pmux_cmd"
    done
}


# restart pmux only once on localhost -- noclobber ensures atomicity
set -o noclobber 
{ > ${TMPDIR}/restarted_pmux.log ; } &> /dev/null
if [ $? -eq 0 ] ; then
    if [ -n "$PMUXPORT" ] ; then
        eval $stop_pmux
    fi
    echo start pmux on local host if not running
    COMDB2_PMUX_FILE="$TESTSROOTDIR/pmux.sqlite" ${SRCHOME}/$pmux_cmd
fi

# if CLUSTER is length is nonzero, and file does not exist, copy to cluster
if [ -n "$CLUSTER" ] ; then 
    { > $COPIEDTOCLUSTER ; } &> /dev/null 
    if [ $? -eq 0 ] ; then
        copy_files_to_cluster
    fi
fi
set +o noclobber 


set -e  # from here, a bad rc will mean failure and exit

for csc2 in $(ls *.csc2 2>/dev/null); do
    table=${csc2%%.csc2}
    cp $PWD/$csc2 $DBDIR/
done >> $DBDIR/${DBNAME}.lrl

mkdir -p $TESTDIR/var/log/cdb2 $TESTDIR/tmp/cdb2

$comdb2task --create --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/$DBNAME.pid $DBNAME  >$TESTDIR/logs/${DBNAME}.init 2>&1
rc=$?
rm -f ${DBNAME}.trap
if [[ $rc -ne 0 ]]; then
    echo "Error rc=$rc while initializing DB, see $TESTDIR/logs/${DBNAME}.init "
    exit 1
fi

# test largecsc2 throws error about col width, can't enable this by default
#if grep "ERROR" $TESTDIR/logs/${DBNAME}.init ; then
#    echo "Error while initializing DB, see $TESTDIR/logs/${DBNAME}.init "
#    exit 1
#fi


# start it
cd $DBDIR >/dev/null
if [[ -z "$CLUSTER" ]]; then
    echo "!$TESTCASE: starting single node"
    if [[ -n ${DEBUG_PREFIX} && ${INTERACTIVE_DEBUG} -eq 1 ]]; then
        echo -e "!$TESTCASE: Execute the following command in a separate terminal: ${TEXTCOLOR}cd $DBDIR && ${DEBUG_PREFIX} $comdb2task $DBNAME -pidfile ${TMPDIR}/$DBNAME.pid${NOCOLOR}"
    else
        ${DEBUG_PREFIX} $comdb2task $DBNAME -pidfile ${TMPDIR}/$DBNAME.pid 2>&1 | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >$TESTDIR/logs/${DBNAME}.db &
    fi

    set +e
    out=
    # wait until we can query it
    echo "!$TESTCASE: waiting until ready"
    while [[ "$out" != "1" ]]; do
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs $DBNAME default 'select 1' 2>/dev/null)
        sleep 1
    done
else
    echo "!$TESTCASE: copying to cluster"
    for node in $CLUSTER; do
        if [ $node == $myhostname ] ; then # skip copying to ourself
            continue
        fi
        ${SRCHOME}/db/copycomdb2 $DBDIR/${DBNAME}.lrl ${node}: &> $TESTDIR/logs/${DBNAME}.${node}.copy
        if [[ $? -ne 0 ]]; then
            echo "FAILED: copycomdb2 $DBDIR/${DBNAME}.lrl ${node}: "
            echo "see $TESTDIR/logs/${DBNAME}.${node}.copy "
            exit 1
        fi
    done

    echo "export COMDB2_ROOT=$COMDB2_ROOT" >> ${TESTDIR}/replicant_vars
    CMD="source ${TESTDIR}/replicant_vars ; $comdb2task ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl"
    echo "!$TESTCASE: starting"
    for node in $CLUSTER; do
        if [ $node == $myhostname ] ; then # dont ssh to ourself -- just start db locally
            if [[ -n ${DEBUG_PREFIX} && ${INTERACTIVE_DEBUG} -eq 1 ]]; then
                echo -e "!$TESTCASE: Execute the following command on ${node}: ${TEXTCOLOR}${DEBUG_PREFIX} $comdb2task ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl -pidfile ${TMPDIR}/${DBNAME}.${node}.pid${NOCOLOR}"
            else
                ${DEBUG_PREFIX} $comdb2task ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl -pidfile ${TMPDIR}/${DBNAME}.${node}.pid 2>&1 | gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' >$TESTDIR/logs/${DBNAME}.${node}.db 2>&1 &
            fi
            continue
        fi

        if [[ -n ${DEBUG_PREFIX} && ${INTERACTIVE_DEBUG} -eq 1 ]]; then
            echo -e "!$TESTCASE: Execute the following command on ${node}: ${TEXTCOLOR}${DEBUG_PREFIX} ${CMD}${NOCOLOR}"
        else
            scp -o StrictHostKeyChecking=no ${TESTDIR}/replicant_vars $node:${TESTDIR}/replicant_vars
            # redirect output from CMD to a subshell which runs awk to prepend time
            ssh -o StrictHostKeyChecking=no -tt $node ${DEBUG_PREFIX} ${CMD} 2>&1 </dev/null > >(gawk '{ print strftime("%H:%M:%S>"), $0; fflush(); }' > $TESTDIR/logs/${DBNAME}.${node}.db)  &
            # $! will be pid of ssh (if we had used pipe, $! would be pid of awk)
            echo $! > ${TMPDIR}/${DBNAME}.${node}.pid
        fi
    done

    set +e
    echo "!$TESTCASE: waiting until ready"
    sleep 1
    for node in $CLUSTER; do
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME 'select 1' 2>&1)
        while  [[ "$out" != "1" ]]; do
            sleep 2
            out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME 'select 1' 2>&1)
        done
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME 'comdb2_host()' 2>&1)
        if [ $out != $node ] ; then
            echo "comdb2_host() '$out' != expected '$node'"
            sleep 1
            exit 1
        fi
    done
    for node in $CLUSTER; do
        cdb2sql ${CDB2_OPTIONS} -tabs $DBNAME --host $node 'exec procedure sys.cmd.send("udp stat all")'
        cdb2sql ${CDB2_OPTIONS} -tabs $DBNAME --host $node 'exec procedure sys.cmd.send("udp ping all")'
    done
fi

exit 0

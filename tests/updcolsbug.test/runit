#!/usr/bin/env bash
bash -n "$0" | exit 1

# Dbname
dbnm=$1

# Test runtime
runtime=300

# Number of adders
adders=25

# Number of forward updaters
updfor=10

# Number of backward updaters
updbwk=10

# Total index
tidx=$(( adders + updfor + updbwk ))

# Error/quit function.
function errquit
{
    typeset msg=$1
    typeset cnt=0

    # Enable debugging.
    [[ "$debug" == "1" ]] && set -x

    # Print error messages.
    echo "ERROR: $msg"
    echo "Testcase failed."

    # Check for the background writer.
    while [[ $cnt -lt $tidx ]]; do

        # Kill each pid
        [[ ${bkpid[$cnt]} != "-1" ]] && kill -9 ${bkpid[$cnt]} >/dev/null 2>&1

        # Reset to -1
        bkpid[$cnt]=-1

        let cnt=cnt+1

    done

    # Check for the coprocess.
    if [[ "$stco" == "1" ]]; then
        
        # Ask it to quit.
        echo -p "quit"

    fi

    # Exit test.
    exit 1
}

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `

function flushall 
{
    for node in $cluster; do
        cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('flush')"
    done
}




# fastinit
cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate t1"

j=0
while [[ $j -lt $tidx ]] ; do 
    bkpid[$j]=-1
    let j=j+1 
done

trap "errquit \"Cancelling test\"" INT EXIT

# pid index
pidx=0

j=0
while [[ $j -lt $adders ]] ; do

    yes "insert into t1(a,b,c) values (1, '2', x'03')" 2>/dev/null | cdb2sql -s ${CDB2_OPTIONS} $dbnm default - >> insert.out 2>&1 &
    bkpid[$pidx]=$!
    let pidx=pidx+1
    let j=j+1

done

sleep 10
flushall

j=0
while [[ $j -lt $updfor ]] ; do

    yes "update t1 set a = 2 where a = 1 limit 1000" 2>/dev/null | cdb2sql -s ${CDB2_OPTIONS} $dbnm default - >> update1.out 2>&1 &
    bkpid[$pidx]=$!
    let pidx=pidx+1
    let j=j+1

done

sleep 10
flushall

j=0
while [[ $j -lt $updbwk ]] ; do

    yes "update t1 set a = 1 where a = 2 limit 1000" 2>/dev/null | cdb2sql -s ${CDB2_OPTIONS} $dbnm default - >> update2.out 2>&1 &
    bkpid[$pidx]=$!
    let pidx=pidx+1
    let j=j+1

done
flushall


function perform_check() 
{
    if [[ -n "$CLUSTER" ]] ; then 
      for node in $CLUSTER ; do
        cdb2sql ${CDB2_OPTIONS} --host $node $dbnm 'select 1'
        if [[ $? -ne 0 ]]; then
            errquit "Node $node is dead"
            break
        fi
      done
    else
        cdb2sql ${CDB2_OPTIONS} $dbnm default 'select 1'
        if [[ $? -ne 0 ]]; then
            errquit "Node default is dead"
        fi
    fi

}



j=0
# Keep checking each node to make sure it's alive
while [[ "$j" -lt $runtime ]] ; do 
  perform_check
  let j=j+1
  sleep 1
done

# Kill child processes
j=0
while [[ $j -lt $tidx ]]; do

    # Kill each pid
    [[ ${bkpid[$j]} != "-1" ]] && kill -9 ${bkpid[$j]} >/dev/null 2>&1

    # Reset to -1
    bkpid[$j]=-1

    let j=j+1

done

# Remove trap
trap - INT EXIT

echo "Success"

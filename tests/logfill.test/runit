#!/usr/bin/env bash
# Verify log-fills

if [[ -z "$CLUSTER" ]]; then
    echo "This test is only relevant for a CLUSTERED installation."
    exit 0
fi

db=$1
SSH="ssh -o StrictHostKeyChecking=no"
TMPDIR=${TMPDIR:-/tmp}
CDB2SQL_EXE=${CDB2SQL_EXE:-/opt/bb/bin/cdb2sql}
TEST_TIMEOUT=${TEST_TIMEOUT:-60m}
declare -a sigstopmachs
declare -a clnt_pids

function trace {
    #figlet "$@"
    echo "$@"
}

function get_master {
    local m=$($CDB2SQL_EXE -tabs ${CDB2_OPTIONS} $db default "select host from comdb2_cluster where is_master='Y'")
    while [[ -z $m ]]; do
        m=$($CDB2SQL_EXE -tabs ${CDB2_OPTIONS} $db default "select host from comdb2_cluster where is_master='Y'" 2>/dev/null)
        sleep 1
    done
    echo $m
}

function get_master_count {
    $CDB2SQL_EXE -tabs ${CDB2_OPTIONS} $db default "select count(host) from comdb2_cluster where is_master='Y'" 2>/dev/null
}

function incoherent_count {
    $CDB2SQL_EXE -tabs $db @$master "select count(host) from comdb2_cluster where is_master='N' and coherent_state!='coherent'"
}

function setup {
    trace setup
    write_machine=$($CDB2SQL_EXE -tabs ${CDB2_OPTIONS} $db default "select host from comdb2_cluster where is_master='N' order by random() limit 1")
    master=$(get_master)
    findstopmachs
}

function findstopmachs {
    stopix=0
    for x in $CLUSTER ; do
        if [ $x != $master -a $x != $write_machine ]; then
            sigstopmachs[$stopix]=$x
            let stopix=stopix+1
        fi
    done
}

function createtables {
    trace drop
    $CDB2SQL_EXE ${CDB2_OPTIONS} $db --host $write_machine "drop table if exists t1" >/dev/null
    trace create
    $CDB2SQL_EXE ${CDB2_OPTIONS} $db --host $write_machine "create table t1(id int index, val int)" > /dev/null
}

function waitforcoherency {
    trace coherency wait
    $CDB2SQL_EXE --tabular $db @$master 'select * from comdb2_cluster'
    $CDB2SQL_EXE --tabular $db @$master '@send bdb cluster'
    local c=$(incoherent_count)
    local mc=$(get_master_count)
    master=$(get_master)
    while [[ -z $c ]] || [[ $c -gt 0 ]] || [[ -z $mc ]] || [[ $mc -ne 1 ]] || [[ -z $master ]] ; do
        echo -e '\n\n\n'
        echo $(date)
        echo "waiting for $db cluster to become coherent (incoherent-count:$c master-count:$mc master:$master)"
        $CDB2SQL_EXE --tabular $db @$master 'select * from comdb2_cluster'
        $CDB2SQL_EXE --tabular $db @$master '@send bdb cluster'
        echo -e '\n\n\n'
        sleep 5
        master=$(get_master)
        mc=$(get_master_count)
        c=$(incoherent_count)
    done
    trace done waiting
    echo $(date)
    echo "done waiting for $db cluster to become coherent (incoherent-count:$c master-count:$mc master:$master)"
    $CDB2SQL_EXE --tabular $db @$master 'select * from comdb2_cluster'
    $CDB2SQL_EXE --tabular $db @$master '@send bdb cluster'
    $CDB2SQL_EXE --tabular $db @$master 'select count(*) from t1'
    sleep 5
}

function insertforever {
    trace insert
    rows=$1
    clients=$2
    for ((i=0;i<$clients;++i)); do
        sql="insert into t1 select 1, 1 from generate_series(1, $rows)"
        timeout --kill-after=5s $TEST_TIMEOUT yes "$sql" | $CDB2SQL_EXE --host $write_machine ${CDB2_OPTIONS} $db default - > /dev/null 2>&1 &
        clnt_pids+=( $! )
    done
}

function pauseandrestart {
    pcount=$1
    sleeptime=$2

    if [ $pcount -gt $stopix ]; then
        echo "Cluster is too small to run test"
        exit 1
    fi

    j=0
    while [[ $j -lt $pcount ]]; do
        node=${sigstopmachs[$j]}
        pid=$(ssh $node "cat ${TMPDIR}/${db}.pid")
        trace pause $node
        ssh $node "kill -SIGSTOP $pid"
        let j=j+1
    done

    trace sleep $sleeptime
    sleep $sleeptime

    j=0
    while [[ $j -lt $pcount ]]; do
        node=${sigstopmachs[$j]}
        pid=$(ssh $node "cat ${TMPDIR}/${db}.pid")
        trace cont $node
        ssh $node "kill -SIGCONT $pid"
        let j=j+1
    done
}

function kill_cdb2sqls {
    for pid in ${clnt_pids[@]}; do
        kill -9 $pid
    done
}

function runit {
    trace runit

    setup

    createtables

    insertforever 1000 2

    pauseandrestart 1 60

    waitforcoherency

    kill_cdb2sqls

    trace Success
}

runit

I found the issue with read committed [and beyond] stems from the way
that we position the cursor in the real and shadow btree, and the way that the 
planner is calling our sqlite3BtreeMovetoUnpacked() [calls find_dup() function 
which performs a series of PREVs], and subsequently does a NEXT. 
Our implementation of traversing shadow trees currently can not handle that 
sequence of operations NEXT-PREV-NEXT (it may return the wrong data).

I am entering a fix, where we pass a hint to find_dup() to not do PREVs if the 
intention is to get to a NEXT afterall. This is a workaround -- it will fix the 
issue with this query and this plan. 

Further work was done to handle the NEXT-PREV-NEXT sequence of operations 
on a cursor involving real and shadow trees. This testsuite is a noncomprehensive
test--there may still be issues, but not easy to trigger.



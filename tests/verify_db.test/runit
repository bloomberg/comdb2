#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

if [[ "x${DEBUGGER}" == "xvalgrind" ]] ; then
    CDB2SQL_EXE="$DEBUGGER $CDB2SQL_EXE" 
fi

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

assert_vers()
{
    local loc_tbl=$1
    local target=$2
    local newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$loc_tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}


nout=0
insert_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'aabbccddeeffaabb$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))' ,'mycstring$j' ,'mypstring$j' ,x'aabbccddeeffaabbccddeeffaabbccddeeffaabbccddeeffaabbccddeeffaabbccddeeffaabbccddeeffaabbccddeeff$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8whichiwillmakealongstringsothatitgetswrittentothebloboverflowdatafiles$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))00000000$j , $((1-2*(j%2)))000000000000000$j )"  &>> $insfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
    done
    echo "done inserting round $nout"
}


function getmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}



#make sure verify behaves as we expect
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('')" &> verify1.out
echo "Usage: verify(\"<table>\" [,\"serial\"|\"parallel\"|\"data\"|\"blobs\"|\"indices\",[\"verbose\"]])
[exec procedure sys.cmd.verify('')] failed with rc -3 [sys.comdb_verify(tbl, mode, ver...]:2: Verify failed." > verify.exp
if ! diff verify1.out verify.exp ; then
    failexit "Verify did not fail correctly, see verify1.out"
fi

echo "Table \"nonexistent\" does not exist.
[exec procedure sys.cmd.verify('nonexistent')] failed with rc -3 [sys.comdb_verify(tbl, mode, ver...]:2: Verify failed." > verify.exp
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('nonexistent')" &> verify2.out
if ! diff verify2.out verify.exp ; then
    failexit "Verify did not fail correctly, see verify2.out"
fi

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify3.out
if ! grep succeeded verify3.out > /dev/null ; then
    failexit "Verify did not succeed, see verify3.out"
fi



master=`getmaster`

echo "db verify after inserting tests"

assert_vers t1 0
assert_schema t1 alltypes.csc2

let NEWNUMREC=100
insert_records 1 $NEWNUMREC
assertcnt t1 $NEWNUMREC

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "put tunable 'debug.omit_dta_write' 1"

insert_records $((NEWNUMREC+1)) $((NEWNUMREC*2)) 
assertcnt t1 $((NEWNUMREC*2))
VERIFY_CMD="cdb2sql ${CDB2_OPTIONS} $dbnm default \"exec procedure sys.cmd.verify('t1')\""
if [[ $DBNAME == *"parallelgenerated"* ]] ; then
    VERIFY_CMD="cdb2sql ${CDB2_OPTIONS} $dbnm default \"exec procedure sys.cmd.verify('t1','parallel')\""
fi

eval $VERIFY_CMD > verify_nodta.tmp
grep 0000000 verify_nodta.tmp | sed 's/0000000[^ ]*//g' | sort &> verify_nodta.out

echo "checking for nodta verify"
if ! diff verify_nodta.out verify_nodta.expected ; then
    failexit "diff ${PWD}/{verify_nodta.out,verify_nodta.expected}"
fi

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "put tunable 'debug.omit_dta_write' 0"

cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate t1"
insert_records 1 $NEWNUMREC
assertcnt t1 $NEWNUMREC

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "put tunable 'debug.omit_idx_write' 1"

insert_records $((NEWNUMREC+1)) $((NEWNUMREC*2)) 
echo did not write to idx so count will appear as $NEWNUMREC instead of 2*$NEWNUMREC
assertcnt t1 $NEWNUMREC

eval $VERIFY_CMD > verify_noidx.tmp
grep 0000000 verify_noidx.tmp | sed 's/0000000[^ ]*//g' | sort &> verify_noidx.out

echo "checking for idx verify"
if ! diff verify_noidx.out verify_noidx.expected ; then
    failexit "diff ${PWD}/{verify_noidx.out,verify_noidx.expected}"
fi

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "put tunable 'debug.omit_idx_write' 0"
cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate t1"


insert_records 1 $NEWNUMREC
echo did not write to idx so count will appear as $NEWNUMREC instead of 2*$NEWNUMREC
assertcnt t1 $NEWNUMREC

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "put tunable 'debug.omit_blob_write' 1"

insert_records $((NEWNUMREC+1)) $((NEWNUMREC*2)) 
assertcnt t1 $((NEWNUMREC*2))

eval $VERIFY_CMD > verify_noblob.tmp
grep 0000000 verify_noblob.tmp | sed 's/0000000[^ ]*//g' | sort &> verify_noblob.out

echo "checking for blob verify"
if ! diff verify_noblob.out verify_noblob.expected ; then
    failexit "diff ${PWD}/{verify_noblob.out,verify_noblob.expected}"
fi

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "put tunable 'debug.omit_blob_write' 0"
cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate t1"
insert_records 1 $NEWNUMREC
assertcnt t1 $NEWNUMREC


# insert into child table, violating parent constraint, verify should catch that

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master 'create table parent_t 
{
schema
{
    int a
}
keys
{
    "A" = a
}
}'

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master 'create table child_t 
{
schema
{
    int a
    int b
    blob blb null=yes
}
keys
{
    "B" = b
    dup "K1" = a
    dup "K2" = (int)"a * 1"
    dup "K3" = (int)"length(blb)" {where length(blb) < 5}
}
constraints
{
    "t10fk1" = "K1" -> <"parent_t":"A">
    "t10fk2" = "K2" -> <"parent_t":"A">
    "t10fk3" = "K3" -> <"parent_t":"A">
}
}'

# will fail, constraint violation
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into child_t(a,b,blb) values (1, 1, x'aa')" &> err_fk.out
echo "[insert into child_t(a,b,blb) values (1, 1, x'aa')] failed with rc 3 verify key constraint cannot resolve constraint table 'child_t' key 'K1' -> table 'parent_t' index '0' key 'A'" > err_fk.expected
if ! diff err_fk.out err_fk.expected ; then
    failexit "diff ${PWD}/{err_fk.out,err_fk.expected}"
fi


cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "put tunable 'debug.skip_constraintscheck_on_insert' 1"

# will succeed
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into child_t(a,b,blb) values (1, 1, x'aa')"

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $master "put tunable 'debug.skip_constraintscheck_on_insert' 0"
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('child_t')" 2>&1 | awk '{for (i=2; i <=NF; i++) printf("%s", (i>2 ? OFS : "") $i); print "";}' > verify_child.out


cat << EOF > verify_child.expected
ix '1' key 'K1': foreign key table 'parent_t' key 'A' not found

ix '2' key 'K2': foreign key table 'parent_t' key 'A' not found

ix '3' key 'K3': foreign key table 'parent_t' key 'A' not found

procedure sys.cmd.verify('child_t')] failed with rc -3 [sys.comdb_verify(tbl, mode, ver...]:2: Verify failed.
EOF

if ! diff verify_child.out verify_child.expected ; then
    failexit "diff ${PWD}/{verify_child.out,verify_child.expected}"
fi

# insert good data to parent to make sure constraint actually works
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into parent_t values (2)"
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into child_t(a,b,blb) values (2, 2, x'bb')" &> err_fk2.out 

# constraint 3 still not satisfied
echo "[insert into child_t(a,b,blb) values (2, 2, x'bb')] failed with rc 3 verify key constraint cannot resolve constraint table 'child_t' key 'K3' -> table 'parent_t' index '0' key 'A'" > err_fk2.expected
if ! diff err_fk2.out err_fk2.expected ; then
    failexit "diff ${PWD}/{err_fk2.out,err_fk2.expected}"
fi

set -e
#now we should be good
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into parent_t values (1)"
cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into child_t(a,b,blb) values (2, 2, x'bb')"

tables=$(timeout 1m cdb2sql ${CDB2_OPTIONS} --tabs $dbnm --host $master 'select * from comdb2_tables')
for t in $tables ; do
    outfl=${t}_verify.out
    timeout 3m cdb2sql ${CDB2_OPTIONS} --verbose --tabs $dbnm --host $master "exec procedure sys.cmd.verify('$t', 'parallel')" &> $outfl
    if ! grep "^Verify succeeded.$" $outfl > /dev/null ; then
        failexit "Failed verify: Table $t"
    fi
done


echo "Success"

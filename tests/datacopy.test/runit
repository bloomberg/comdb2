#!/usr/bin/env bash
bash -n "$0" | exit 1

DB="$1"
#cdb2sql -s ${CDB2_OPTIONS} $DB default "exec procedure sys.cmd.send('ndebg 500')"
#cdb2sql -s ${CDB2_OPTIONS} $DB default "exec procedure sys.cmd.send('debg 500')"
cdb2sql -s ${CDB2_OPTIONS} $DB default "drop table t" &> /dev/null
cdb2sql ${CDB2_OPTIONS} $DB default 'create table t {
schema
{
	int i
	int j
}
keys
{
	dup "k0" = i
	dup datacopy "k1" = i
	"k2" = i + j
	dup "k3" = <DESCEND> i
	dup datacopy "k4" = <DESCEND> i
	"k5" = <DESCEND> i + <DESCEND> j
}
}'

cdb2sql ${CDB2_OPTIONS} $DB default "insert into t select 1, 24 - value from generate_series(1, 24)"
cdb2sql ${CDB2_OPTIONS} $DB default 'exec procedure sys.cmd.analyze("","100")'
cdb2sql -tabs ${CDB2_OPTIONS} $DB default 'exec procedure sys.cmd.send("stat4dump")' > sqlite_stat4.output
diff sqlite_stat4.output sqlite_stat4.expected
if [[ $? -ne 0 ]] ; then
    echo "Failed"
    exit 1
fi

# POPULATE STAT4 ROWS ORDERED RANDOMLY
# IN MEMORY REPRESENTATION SHOULD STILL BE SORTED
i=0
while [[ $i -lt 100 ]]; do
    set -e
	cdb2sql -s ${CDB2_OPTIONS} $DB default "delete from sqlite_stat4 where 1" > /dev/null
	cat sqlite_stat4.sql | shuf | cdb2sql -s ${CDB2_OPTIONS} $DB default - > /dev/null
    cdb2sql -tabs ${CDB2_OPTIONS} $DB default 'exec procedure sys.cmd.send("stat4dump")' > sqlite_stat4.output.$i
    diff sqlite_stat4.output.$i sqlite_stat4.expected
    if [[ $? -ne 0 ]] ; then
        echo "Failed - $i"
        exit 1
    fi
    i=$(( $i + 1 ))
done

set -e
cdb2sql -s ${CDB2_OPTIONS} $DB default "DROP TABLE IF EXISTS t1"
cdb2sql -s ${CDB2_OPTIONS} $DB default "CREATE TABLE t1 (i INT, j INT, k INT, l INT) OPTIONS ISC OFF"
cdb2sql -s ${CDB2_OPTIONS} $DB default "CREATE INDEX idx ON t1(i) INCLUDE ALL"
cdb2sql -s ${CDB2_OPTIONS} $DB default "INSERT INTO t1 VALUES(1, 1, 1, 1)"
cdb2sql -s ${CDB2_OPTIONS} $DB default "INSERT INTO t1 VALUES(2, 2, 2, 2)"
cdb2sql -s ${CDB2_OPTIONS} $DB default "INSERT INTO t1 VALUES(3, 3, 3, 3)"
cdb2sql -s ${CDB2_OPTIONS} $DB default "EXEC PROCEDURE sys.cmd.verify('t1')"
cdb2sql -s ${CDB2_OPTIONS} $DB default "REBUILD t1"
cdb2sql -s ${CDB2_OPTIONS} $DB default "EXEC PROCEDURE sys.cmd.verify('t1')"

# Test that we do not use datacopy field b to speed a look-up. Use such fields only for covering queries.
cdb2sql ${CDB2_OPTIONS} $DB default 'create table t2 {
schema
{
	int a
	cstring b[2] null=yes
}
keys
{
	datacopy "a" = a
}
}'
cdb2sql -s ${CDB2_OPTIONS} $DB default "insert into t2 values(1, NULL)"

plan=$(cdb2sql ${CDB2_OPTIONS} $DB default "explain query plan select * from t2 where a = 1 and b is NULL")
expected_plan="(id=3, parent=0, notused=0, detail='SEARCH TABLE t2 USING COVERING INDEX \$A_DDF9B51C (a=?) (~9 rows)')"
if [[ $plan != $expected_plan ]] ; then
    echo "Failed. Expected plan to be '$expected_plan', got '$plan'"
    exit 1
fi

# If we do not find a row then we probably were trying to use datacopy field b to speed up the look-up.
numrows=$(cdb2sql ${CDB2_OPTIONS} $DB default "select * from t2 where a = 1 and b is NULL" | wc -l)
if [[ $numrows != 1 ]] ; then
    echo "Failed. Expected 1 row, got $numrows"
    exit 1
fi

echo Success

#!/usr/bin/env bash

bash -n "$0" | exit 1
dbnm=$1

set -e

fixednode=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select comdb2_host()'`

cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'exec procedure sys.cmd.send("on osql_odh_blob")'

master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm --host $fixednode 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | awk '{print $1}' | cut -d':' -f1`

### Test 1: basic operations
cat << EOF | cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $master - >actual 2>&1
exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 0')
drop table if exists t
create table t {`cat t1.csc2`}\$\$
insert into t values("aaaabbbbccccddddeeeeffffgggg")
insert into t values("hhhhiiiijjjjkkkkllllmmmmnnnn")
select * from t order by txt
select '--------------'
alter table t {`cat t2.csc2`}\$\$
select * from t order by txt
EOF

echo '--------------' >>actual

cat << EOF | cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $master -
exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')
exec procedure sys.cmd.send('scdelay 2000')
EOF

### Test 2: Test extending inline blob length
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode "alter table t options rebuild, blobfield rle {`cat t2.csc2`}" &

sleep 1;
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'insert into t values("AAAABBBBCCCCDDDDEEEEFFFFGGGG")'
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'update t set txt = "HHHHIIIIJJJJKKKKLLLLMMMMNNNN" where txt = "hhhhiiiijjjjkkkkllllmmmmnnnn"'
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'select * from t order by txt' >>actual 2>&1
echo '--------------' >>actual
wait;

cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'select * from t order by txt' >>actual 2>&1
echo '--------------' >>actual

### Test 3: Test adding a new expressional index on the blob
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode "alter table t options rebuild, blobfield rle {`cat t3.csc2`}" &

sleep 1;
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'insert into t values("1111111122222222")'
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'update t set txt = "ABCDEFG" where txt = "AAAABBBBCCCCDDDDEEEEFFFFGGGG"'

cat << EOF |
select * from t where length(txt) = 28
select * from t where length(txt) = 16
select * from t where length(txt) = 7
EOF
cdb2sql ${CDB2_OPTIONS} -s --tabs --cost $dbnm --host $fixednode - 2>&1 | grep 'TABLE SCAN' >>actual 2>&1

wait

cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'select * from t order by txt' >>actual 2>&1

cat << EOF |
select * from t where length(txt) = 28
select * from t where length(txt) = 16
select * from t where length(txt) = 7
EOF
cdb2sql ${CDB2_OPTIONS} -s --tabs --cost $dbnm --host $fixednode - 2>&1 | grep 'finds' >>actual 2>&1

### Test 4: removing ODH

#### delay SC on master
cat << EOF | cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $master - 2>>actual
exec procedure sys.cmd.send('scdelay 2000')
PUT SCHEMACHANGE COMMITSLEEP 3
PUT SCHEMACHANGE CONVERTSLEEP 3
EOF

#### kick off a rebuild that removes the ODH.
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode "alter table t options rebuild, odh off, ipu off, isc off, rec none, blobfield none {`cat t3.csc2`}" &

#### Sleep a bit to make sure that SC has started before we issue new writes.
sleep 2

#### Do a new insert. This will be compressed by a replicant and uncompressed by the master even when ODH is being removed.
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'insert into t values("A") -- compression ratio > 100'
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'insert into t values("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA") -- this is likely to be compressed'

#### Wait for the SC to finish
wait

#### Check if all records are correct
cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm --host $fixednode 'select * from t order by txt' >>actual 2>&1


diff actual expected


### Test 5: trigger

cat << EOF |
CREATE TABLE self (b BLOB)\$\$
CREATE TABLE mirror (b BLOB)\$\$
CREATE PROCEDURE reflection {
local function main(e)
    local mirror = db:table("mirror")
    return mirror:insert({b=e.new.b})
end
}\$\$
CREATE LUA TRIGGER reflection ON (TABLE self FOR INSERT)
INSERT INTO self VALUES(x'')
INSERT INTO self VALUES(x'CDB2')
INSERT INTO self VALUES(x'DEADBEEF')
INSERT INTO self VALUES(randomblob(1024))
INSERT INTO self VALUES(x'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')
EOF
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default - 2>&1

cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'SELECT * FROM self ORDER BY b' >self
sleep 5 ### Allow trigger to fire.
cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'SELECT * FROM mirror ORDER BY b' >mirror
diff self mirror

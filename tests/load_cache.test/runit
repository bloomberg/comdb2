#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/bounce_database.sh
. ${TESTSROOTDIR}/tools/ddl.sh

export debug=1
export sleeptime=5
export failpct=10
export loadrecs=1000000

[[ $debug == "1" ]] && set -x

function cleanup
{
    [[ $debug == "1" ]] && set -x
    typeset func="cleanup"
    write_prompt $func "Running $func"

    if [[ -n "$CLUSTER" ]]; then
        for node in $CLUSTER; do
            kill -9 $(cat ${TMPDIR}/${DBNAME}.${node}.pid)
        done
    else
        kill -9 $(cat ${TMPDIR}/${DBNAME}.pid)
    fi
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    write_prompt $func "Running $func"
    typeset f=$1
    write_prompt $func "$f failed: $2"
    if [[ "$core_rep_on_failexit" == 1 ]]; then
        kill -6 $(cat $repdir/${repname}.pid)
    else
        kill -9 $(cat $repdir/${repname}.pid)
    fi
    cleanup
    exit -1
}

function bulk_insert_records
{
    [[ $debug == "1" ]] && set -x
    typeset func="bulk_insert_records"
    write_prompt $func "Running $func"
    typeset table=${1:-t1}
    typeset cnt=${2:-100000}
    typeset chunk=${3:-10000}
    j=0
    while [[ $cnt -gt 0 ]]; do
        if [[ $cnt -lt $chunk ]]; then
            amt=$cnt
        else
            amt=$chunk
        fi
        $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "insert into $table select * from generate_series(1, $amt)" >/dev/null
        let cnt=$(( cnt - amt ))
    done
}

function setup
{
    [[ $debug == "1" ]] && set -x
    typeset func="setup"
    write_prompt $func "Running $func"
    drop_table
    create_table
}

function load_cache
{
    [[ $debug == "1" ]] && set -x
    typeset func="load_cache"
    write_prompt $func "Running $func"
    typeset file=${1:-cache.txt}
    if [[ -z "$CLUSTER" ]]; then
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "exec procedure sys.cmd.send(\"load_cache $file\")"
    else
        for n in $CLUSTER ; do 
            $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $n "exec procedure sys.cmd.send(\"load_cache $file\")"
        done
    fi
}

function dump_cache
{
    [[ $debug == "1" ]] && set -x
    typeset func="dump_cache"
    write_prompt $func "Running $func"
    typeset file=${1:-cache.txt}
    if [[ -z "$CLUSTER" ]]; then
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "exec procedure sys.cmd.send(\"dump_cache $file\")"
    else
        for n in $CLUSTER ; do 
            $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $n "exec procedure sys.cmd.send(\"dump_cache $file\")"
            scp $SSH_OPT ${n}:${file} ${file}.${n}
        done
    fi
}

function sort_and_diff_files
{
    [[ $debug == "1" ]] && set -x
    typeset func="diff_files"
    typeset file1=$1
    typeset file2=$2
    typeset linecnt
    typeset faildiff
    typeset cnt
    write_prompt $func "Running $func"
    linecnt=$(wc -l ${file1} | awk '{print $1}')
    faildiff=$(echo "${linecnt} * 0.${failpct}" | bc)
    sort $file1 > ${file1}.sort
    sort $file2 > ${file2}.sort
    cnt=$(diff ${file1}.sort ${file2}.sort 2>&1| wc -l)
    [[ $cnt -gt $faildiff ]] && failexit "Sorted cache mis-match"
    echo "$file1 diffcount was $cnt, threshold was $faildiff"
}

function check_results
{
    [[ $debug == "1" ]] && set -x
    typeset func="check_results"
    typeset file1=$1
    typeset file2=$2
    write_prompt $func "Running $func"

    if [[ -z "$CLUSTER" ]]; then
        sort_and_diff_files $file1 $file2
    else 
        for n in $CLUSTER ; do
            sort_and_diff_files ${file1}.$n ${file2}.$n
        done
    fi
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    typeset orig="$DBDIR/cache.txt"
    typeset check="$DBDIR/check_cache.txt"
    write_prompt $func "Running $func"
    bulk_insert_records t1 $loadrecs
    sleep 1
    dump_cache $orig
    bounce_database $sleeptime
    sleep $(( sleeptime + 10 ))
    load_cache $orig
    sleep $sleeptime
    dump_cache $check
    check_results $orig $check
}

setup
run_test
cleanup
echo "Success"

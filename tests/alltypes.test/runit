#!/bin/bash

set -x

db=$1

cdb2sql ${CDB2_OPTIONS} $db default "create table intvds(id int, a intervalds)"
cdb2sql ${CDB2_OPTIONS} $db default "create table intvdsus(id int, a intervaldsus)"

export TMPDIR=${TMPDIR:-/tmp}

# find input files
files=$( find . -type f -name \*.req | sort )

# counter 
nfiles=0

# last batch
last_batch=

# post-process
pproc=cat

# testcase output
testcase_output=

# expected output
expected_output=

# fastinit
function fastinit
{
    # print debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset db=$1
    typeset iter=$2
    typeset tbl

    # flagged?
    if [[ ! -f $iter.fastinit ]]; then
        return 0
    fi

    # fastinit
    for tbl in $(cat $iter.fastinit) ; do
        cdb2sql ${CDB2_OPTIONS} $db default "truncate $tbl"
    done

    return 0
}

TZ="US/Eastern"

# Iterate through input files
for testcase in $files ; do

    # increment counter
    let nfiles=nfiles+1

    # cleanup testcase
    testcase=${testcase##*/}
    
    # see if the prefix has changed
    new_batch=${testcase%%_*}

    # set output
    output=$testcase.res
    
    # fastinit if requested
    if [[ $new_batch != $last_batch ]] ; then

        fastinit $db $new_batch
        last_batch=$new_batch

    fi


    # Be verbose
    cmd="cdb2sql ${CDB2_OPTIONS} $db default - < $testcase > $output 2>&1"
    echo $cmd

    # run command
    eval $cmd

    # post-process
    #if [[ -f $new_batch.post ]]; then

    #    # zap file
    #    > $output.postprocess

    #    # collect post-processing tool
    #    pproc=$(cat $new_batch.post)

    #    # post-process output
    #    $pproc $output >> $output.postprocess

    #    # copy post-processed output to original
    #    mv $output.postprocess $output
    #fi

    sed "s/rows inserted='1'/.n_writeops_done=1/g" < $output > $output.postprocess
    mv $output.postprocess $output

    # get testcase output
    testcase_output=$(cat $output)

    # get expected output
    expected_output=$(cat $testcase.expected)
    expected_output2=""
    [[ -f $testcase.expected.1 ]] && expected_output2=$(cat $testcase.expected.1)

    # verify 
    if [[ "$testcase_output" != "$expected_output" && "$testcase_output" != "$expected_output2" ]]; then

        echo "  ^^^^^^^^^^^^"
        echo "The above testcase (${testcase}) has failed!!!"
        echo " "
        echo "Use 'diff <expected-output> <my-output>' to see why:"
        echo "> diff ${PWD}/{$testcase.expected,$output}"
        echo " "
        diff $testcase.expected $output
        echo " "
        exit 1

    fi

done

echo "Testcase passed."

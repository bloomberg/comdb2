#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/ddl.sh

[[ $debug == "1" ]] && set -x
keepalive=0
stopfile=./stopfile.txt
inserterlog=./inserter.txt
failfile=./failed.txt
checkdatadone=./checkdatadone.txt
ssh="ssh -T -n -o StrictHostKeyChecking=no"
pidfile="${TMPDIR}/${DBNAME}.pid"

function failexit
{
    typeset func="failexit"
    typeset f=$1
    touch $failfile
    write_prompt $func "$f failed: $2"
    exit -1
}

function checkdata
{
    j=$1
    $CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "SELECT MAX(a) FROM t1 WHERE t = $j" >> $inserterlog.$1 2>&1
    count=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "SELECT MAX(a) FROM t1 WHERE t = $j")
    if [[ -z "$count" ]] ; then
        touch $checkdatadone.$j
        failexit checkdata "couldn't get count"
    fi
    for (( i = 0; i <= $count; i++ )) ; do
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "SELECT COUNT(*) FROM t1 WHERE t = $j AND a = $i" >> $inserterlog.$1 2>&1
        x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "SELECT COUNT(*) FROM t1 WHERE t = $j AND a = $i")
        # We will tolerate 2 (or more), but wont tolerate 0 ..
        if [[ "$x" == "0" ]] ; then
            touch $checkdatadone.$j
            $CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "SELECT COUNT(*) FROM t1 WHERE t = $j AND a = $i"
            failexit checkdata "Missing committed sequence t=$j a=$i"
        fi
    done
    touch $checkdatadone.$j
}

function inserter
{
    count=0
    while [[ ! -f $stopfile ]]; do
        r=1
        while [[ ! -f $stopfile && $r != 0 ]]; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1(t,a) VALUES($1,$count)" >> $inserterlog.$1 2>&1
            r=$?
        done
        if [[ ! -f $stopfile ]]; then
            let count=count+1
        fi
    done
    checkdata $1
}

function bouncemaster
{
    node=$(get_master)
    while [[ -z $node ]]; do
        echo "bouncemaster - no master - retry"
        sleep 1
        node=$(get_master)
    done
    echo "bouncemaster node:$node"
    REP_ENV_VARS="${DBDIR}/replicant_env_vars"
    PARAMS="$DBNAME --no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --pidfile ${pidfile}"
    CMD="source ${REP_ENV_VARS} ; ${COMDB2_EXE} ${PARAMS} "
    $ssh $node kill -9 '$(<'${pidfile}')'
    sleep 5
    echo -e "\nrestarting\n" >> $TESTDIR/logs/${DBNAME}.${node}.db
    $ssh $node ${DEBUG_PREFIX} ${CMD} >> $TESTDIR/logs/${DBNAME}.${node}.db 2>&1 &
}

function settunables
{
    sleep 5
    for node in $CLUSTER ; do
        $ssh $node "$CDB2SQL_EXE --admin $DBNAME --host $node 'PUT TUNABLE replicant_latency 1'" &
    done
}

function setup
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "DROP TABLE IF EXISTS t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "CREATE TABLE t1(t int,a int)"
    #sleep 7
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "CREATE INDEX ix1 ON t1(t,a)"
}

function kill_cluster
{
    for node in $CLUSTER ; do
        $ssh $node kill -9 '$(<'${pidfile}')' &
    done
}

function waitforinserters
{
    typeset threads=$1
    typeset donecount=0
    typeset failed=0
    while [[ $failed == 0 && $donecount -lt $threads ]]; do
        sleep 1
        donecount=0
        for (( i = 0; i < $threads; i++ )) ; do
            if [[ -f $checkdatadone.$i ]]; then
                let donecount=donecount+1
            fi
        done
    done
}

function run_test
{
    typeset bounces=50
    typeset threads=20

    rm $stopfile 2>/dev/null
    rm $failfile 2>/dev/null

    for (( i = 0; i < $threads; i++ )) ; do
        rm $checkdatadone.$i 2>/dev/null
    done

    for (( i = 0; i < $threads; i++ )) ; do
        inserter $i &
    done

    for (( i = 0; i < $bounces; i++ )) ; do
        settunables
        settunables
        settunables
        echo "BOUNCE COUNT $i"
        bouncemaster
    done
    touch $stopfile
    waitforinserters $threads
    if [[ "$keepalive" != "1" ]] ; then 
        kill_cluster
    fi
    if [[ -f $failfile ]]; then
        failexit run_test "Testcase failed"
    fi
}

setup
run_test
echo "Success"

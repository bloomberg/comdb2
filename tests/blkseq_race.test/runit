#!/usr/bin/env bash
bash -n "$0" | exit 1

export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt
export maxrecord=0
export failed=0

function failexit
{
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function stop_cluster
{
    [[ $debug == "1" ]] && set -x
    for node in $CLUSTER ; do
        $CDB2SQL_EXE -admin $CDB2_OPTIONS --tabs $DBNAME --host $node "exec procedure sys.cmd.send(\"exit\")"
    done
    sleep 5
    for node in $CLUSTER ; do
        if [ $node == $(hostname) ] ; then
            kill -9 $(cat ${TMPDIR}/${DBNAME}.${node}.pid)
        else
            kill -9 $(cat ${TMPDIR}/${DBNAME}.${node}.pid)
        fi
    done
}

function verify_up
{
    typeset func="verify_up"
    typeset node=$1
    typeset count=0
    typeset r=1
    while [[ ! -f $stopfile && "$r" -ne "0" && "$count" -lt 100 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1" >/dev/null 2>&1
        r=$?
        [[ $r != 0 ]] && sleep 1
        let count=count+1
    done

    if [[ ! -f $stopfile && $r != 0 ]] ; then
        failexit "node $node did not recover in time"
    fi
}

function bounce_cluster
{
    typeset func="bounce_cluster"
    for node in $CLUSTER ; do
        bounce_node $node 1
        verify_up $node
    done
}

function bounce_master_thread
{
    typeset func="bounce_master_thread"
    typeset node=""
    while [[ ! -f $stopfile ]]; do
        sleep $(( 10 + ( RANDOM % 5 ) ))
        node=$(get_master)
        bounce_node $node 1
        verify_up $node
    done
    write_prompt $func "Exiting"
}

function check_results
{
    typeset func="check_results"
    typeset j=0

    while [[ $j -le $maxrecord && ! -f $stopfile ]]; do

        x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "select count(*) from t1 where a=$j")
        r=$?

        while [[ "$r" -ne 0 && ! -f $stopfile ]]; do
            x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "select count(*) from t1 where a=$j")
            r=$?
        done

        if [[ "$x" == "0" ]]; then 
            echo "Reproduced blkseq missing record a=$j"
            touch $stopfile
        fi
        let j=j+1
    done
}

function insert_thread
{
    typeset func="insert_thread"
    typeset count=0

    while [[ ! -f $stopfile ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "insert into t1(a) values($count)" >/dev/null 2>&1
        r=$?
        if [[ "$r" == 0 && "$debug" == "1" ]]; then echo "Insert succeeded" ; fi
        while [[ "$r" -ne 0 && ! -f $stopfile ]]; do
            $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "insert into t1(a) values($count)" >/dev/null 2>&1
            r=$?
            if [[ "$r" == 0 && "$debug" == "1" ]]; then echo "Insert succeeded" ; fi
        done
        export maxrecord=count
        check_results
        let count=count+1
    done
    write_prompt $func "Exiting"
    #export maxrecord=count
}

function create_table
{
    typeset func="create_table"
    $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "create table t1(a int)" >/dev/null 2>&1
}

function lost_write
{
    typeset func="lost_write"
    typeset maxtime=300
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))

    create_table
    bounce_master_thread &
    insert_thread &

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        sleep 1
    done

    # Different thread failed the test
    if [[ -f "$stopfile" ]] ; then
        failed=1
        echo "Testcase failed"
    fi

    # teardown
    touch "$stopfile"

    write_prompt $func "Sleeping 10"
    sleep 10
}

# This test makes sure that we recover blkseqs after a bounce
function recover_blkseq
{
    typeset func="recover_blkseq"
    typeset bscnt=0
    typeset chk=0
    typeset master=""

    # Create table
    $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "create table tblkseq(a int)" >/dev/null 2>&1

    # Insert records
    $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "insert into tblkseq select * from generate_series(1, 100)" >/dev/null 2>&1

    bscnt=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "select count(*) from comdb2_blkseq")

    bounce_cluster
    master=$(get_master)
    echo "New master after bounce cluster is $master"

    for node in $CLUSTER ; do 
        chk=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $node "select count(*) from comdb2_blkseq")
        if [[ "$chk" != "$bscnt" ]] ; then
            echo "Host $node has bscount $chk rather than $bscnt, failing"
            failed=1
            return
        fi
    done
}

function run_test
{
    typeset func="run_test"

    rm $stopfile >/dev/null 2>&1

    recover_blkseq

    if [[ "$failed" == 0 ]]; then
        lost_write
    fi

    write_prompt $func "Stopping cluster"
    stop_cluster

    write_prompt $func "Waiting for spawned processes"
    wait
    write_prompt $func "Finished waiting for spawned processes"
    if [[ "$failed" == 1 ]]; then
        failexit $func "Testcase failed"
    fi
}

run_test
echo "Success"

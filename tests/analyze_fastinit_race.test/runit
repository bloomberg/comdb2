#!/usr/bin/env bash
bash -n "$0" | exit 1

export debug=1
[[ $debug == "1" ]] && set -x

export deadtablecount=100
export tablecount=10
export modval=1000

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

# send a stat4dump msgtrap in a loop to reproduce crash

export stopfile=./stopfile.txt

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function randtable
{
    typeset num=$(( RANDOM % tablecount ))
    echo "t$num"
}

function start_stat4dump_loop
{
    if [[ "$CLUSTER" == "" ]]; then
        master=$(hostname)
    else
        master=$(get_master)
    fi
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "put tunable debug_stat4dump_loop = '1'"
}

function stop_stat4dump_loop
{
    if [[ -n "$CLUSTER" ]]; then
        for node in $CLUSTER; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "put tunable debug_stat4dump_loop = '0'"
        done
    else
        node=$(hostname)
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "put tunable debug_stat4dump_loop = '0'"
    fi
}

function create_loop
{
    typeset table=""
    while [[ ! -f $stopfile ]]; do
        table=$(randtable)
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists $table(a int)" >/dev/null 2>&1
    done
}

function truncate_loop
{
    typeset table=""
    while [[ ! -f $stopfile ]]; do
        table=$(randtable)
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate $table" >/dev/null 2>&1
    done
}

function drop_loop
{
    typeset table=""
    while [[ ! -f $stopfile ]]; do
        table=$(randtable)
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table $table" >/dev/null 2>&1
    done
}

function verify_up
{
    [[ $debug == "1" ]] && set -x
    typeset func="verify_up"
    write_prompt $func "Running $func"
    typeset node=$1
    typeset count=0
    typeset r=1
    while [[ "$r" -ne "0" && "$count" -lt 2000 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1" >/dev/null 2>&1
        r=$?
        [[ $r != 0 ]] && sleep 1
        let count=count+1
    done
    [[ $r != 0 ]] && failexit "node $node did not recover in time"
}

function run_test_drop_table
{
    typeset maxtime=600
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))

    rm $stopfile
    j=0

    while [[ "$j" -lt 3 ]]; do 
        #stat4dump_loop &
        create_loop &
        truncate_loop &
        drop_loop &
        let j=j+1
    done

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        if [[ -z "$CLUSTER" ]]; then
            node=$(hostname)
            verify_up $node
        else
            for node in $CLUSTER; do
                verify_up $node
            done
        fi
        sleep 1
    done

    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait
}

function create_tables
{
    typeset j=0
    while [[ "$j" -lt "$tablecount" ]]; do
        table="t$j"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<EOF
create table $table {
schema
{
        int a null = yes 
        int b null = yes 
        int c null = yes 
        int d null = yes 
        int e null = yes 
        int f null = yes 
        int g null = yes 
        int h null = yes 
        int i null = yes 
        int j null = yes 
        int k null = yes 
        int l null = yes 
        int m null = yes 
        int n null = yes 
        int o null = yes 
        int p null = yes 
        int q null = yes 
        int r null = yes 
        int s null = yes 
        int t null = yes 
        int u null = yes 
        int v null = yes 
        int w null = yes 
        int x null = yes 
        int y null = yes 
        int z null = yes 
}
keys
{
        dup "IX1_$j" = a 
        dup "IX2_$j" = b 
        dup "IX3_$j" = c 
        dup "IX4_$j" = d 
        dup "IX5_$j" = e 
        dup "IX6_$j" = f 
        dup "IX7_$j" = g 
        dup "IX8_$j" = h 
        dup "IX9_$j" = i 
        dup "IX10_$j" = j 
        dup "IX11_$j" = k 
        dup "IX12_$j" = l 
        dup "IX13_$j" = m 
        dup "IX14_$j" = n 
        dup "IX15_$j" = o 
}}\$\$
EOF
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into $table(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) select *,random()%$modval,random()%$modval,random()&$modval,random()%$modval,random()%$modval,random()%$modval,random()%$modval,random()%$modval,random()%$modval,random()%$modval,random()%$modval,random()%$modval,random()%$modval,random()%$modval from generate_series(1,1000)"
        let j=j+1
    done

    j=0
    while [[ "$j" -lt "$tablecount" ]]; do
        table="t$j"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "analyze $table"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select count(*) from $table"
        let j=j+1
    done
}

function run_test_analyze_fastinit
{
    typeset maxtime=600
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))
    typeset j=0

    create_tables
    start_stat4dump_loop

    while [[ "$j" -lt "3" ]]; do
        truncate_loop &
        let j=j+1
    done

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        if [[ -z "$CLUSTER" ]]; then
            node=$(hostname)
            verify_up $node
        else
            for node in $CLUSTER; do
                verify_up $node
            done
        fi
        sleep 1
    done

    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait

    stop_stat4dump_loop
}

function run_test
{
    run_test_analyze_fastinit

    # The drop-table test causes additional crashes: i will work on after 
    # reproducing & fixing the initial issue
    #run_test_drop_table
}


run_test
echo "Success"

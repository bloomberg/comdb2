#!/usr/bin/env bash
bash -n "$0" | exit 1

dbnm=$1
set -e

function getrepnode {
    rep=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select host from comdb2_cluster where is_master='N' and coherent_state='coherent' limit 1")
    if [ "$rep" = "" ]; then
        echo "Failed to get replicant"
        exit 1
    fi
    echo $rep
}

function getmaster {
    master=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select host from comdb2_cluster where is_master='Y'")
    if [ "$master" = "" ]; then
        echo "Failed to get master"
        exit 1
    fi
    echo $master
}

function fillintables {
    master=$1
    for table in t v;
    do
        cdb2sql $dbnm --host $master "drop table if exists $table" >/dev/null
        cdb2sql $dbnm --host $master "create table $table(a int unique)" >/dev/null
        cdb2sql $dbnm --host $master "insert into $table select * from generate_series(1, 10000)" >/dev/null
        sleep 3
    done
}

# check if a pid is done executing given a timeout and starting point
function checkifdone {
    cpid=$1
    timeout=$2
    st=$3

    elapsed=0

    # verify pid
    ps -p $cpid >/dev/null 2>&1
    while [[ $? == 0 && $elapsed -lt $timeout ]] ; do
        sleep 1

        # check to see if it's time to break out of the loop
        et=$SECONDS
        elapsed=$(( et - st ))

        # verify pid
        ps -p $cpid >/dev/null 2>&1
    done
}

function runtest {
    rep=$1
    master=$2
    analyzestr=$3

    # pre checks
    analyzedelay=$(cdb2sql --tabs $dbnm --host $rep "select value from comdb2_tunables where name='test_delay_analyze_commit'")
    if [ "$analyzedelay" != "ON" ]; then
        echo "Unable to set test_delay_analyze_commit to ON"
        exit 1
    fi

    cdb2sql $dbnm --host $rep "exec procedure sys.cmd.send('analyze tblthd 1')" >/dev/null
    numthds=$(cdb2sql --tabs $dbnm --host $rep "select value from comdb2_tunables where name='analyze_tbl_threads'")
    if [ $numthds != 1 ]; then
        echo "Unable to set analyze_tbl_threads to 1, got $numthds instead"
        exit 1
    fi

    # run analyze on replicant
    cdb2sql $dbnm --host $rep "$analyzestr" 2>analyze.txt &
    analyzepid=$!
    sleep 3

    # run election on master
    cdb2sql $dbnm --host $master "exec procedure sys.cmd.send('downgrade')" 2>election.txt &
    electionpid=$!

    # error if either are still running after one minute
    timeout=60
    st=$SECONDS

    set +e # next block of code relies on checking error codes
    checkifdone $analyzepid $timeout $st
    checkifdone $electionpid $timeout $st

    failed=0

    ps -p $analyzepid >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Error: Analyze still running after 1 minute"
        kill -9 $analyzepid >/dev/null 2>&1 
        failed=1
    fi

    ps -p $electionpid >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo "Error: Election still running after 1 minute"
        kill -9 $electionpid >/dev/null 2>&1 
        failed=1
    fi
    set -e

    # check for other errors
    analyzeerrors=$(cat analyze.txt)
    electionerrors=$(cat election.txt)

    rm analyze.txt
    rm election.txt

    if [ "$analyzeerrors" != "" ]; then
        echo "Analyze Error: $analyzeerrors"
        failed=1
    fi

    if [ "$electionerrors" != "" ]; then
        echo "Election Error: $electionerrors"
        failed=1
    fi

    if [ $failed -eq 1 ]; then
        exit 1
    fi
}

rep=`getrepnode`
master=`getmaster`

fillintables $master

echo "Test recover_deadlock called in wait_for_table"
runtest $rep $master "analyze t"

echo "wait_for_table test passed"

sleep 3

echo "Test recover_deadlock called in dispatch_table_thread"
rep=`getrepnode`
master=`getmaster`
runtest $rep $master "analyze"

echo "dispatch_table_thread test passed"

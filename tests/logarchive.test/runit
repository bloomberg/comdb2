#!/usr/bin/env bash

dbnm=$1
runs=$2
DEFAULT=$3
ISBB=$4

if [[ "$dbnm" = "" ]]; then
    echo 'Missing database name' >&2
    exit 1
fi

if [[ "$runs" = "" ]]; then
    runs=20
fi

if [[ "$DEFAULT" = "" ]]; then
    DEFAULT="default"
fi

if [[ "$ISBB" = "" ]]; then
    TABS='--tabs'
    HOST='--host'
else
    TABS='-tabs'
    HOST=''
fi

########################################
#### Figure out who the master is ######
########################################
master=`cdb2sql $CDB2_OPTIONS $TABS $dbnm $DEFAULT 'exec procedure sys.info.cluster()' | grep $'\t1\t' | cut -d$'\t' -f1`
echo Master is $master

########################################
######        Prepare table       ######
########################################
echo Preparing table...
cdb2sql $CDB2_OPTIONS $dbnm $DEFAULT "DROP TABLE t" >/dev/null 2>&1
cdb2sql $CDB2_OPTIONS $dbnm $DEFAULT "CREATE TABLE t (c CHAR(512))" >/dev/null

echo Sleep 10 seconds
sleep 10

####### Dumb. But save memory ######
loremipsum="INSERT INTO t VALUES ('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris. Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Curabitur sodales ligula in libero. Sed dignissim lacinia nunc.')"
rm -f inserts.sql
echo BEGIN >inserts.sql
yes "$loremipsum" | head -10000 >>inserts.sql
echo COMMIT >>inserts.sql

########################################
############  Main loop   ##############
########################################
while [[ $runs -gt 0 ]]; do




###### Do enough writes to push forward log files ######
echo Writing...

#cat << EOF | cdb2sql $dbnm - >/dev/null
#BEGIN
#`yes $loremipsum | head -20000`
#COMMIT
#EOF
cdb2sql $CDB2_OPTIONS -f inserts.sql $dbnm $DEFAULT >/dev/null

echo Flushing...
sleep 20
cdb2sql $CDB2_OPTIONS $dbnm $HOST $master 'exec procedure sys.cmd.send("flush")'

###### Push forward LSN just a little bit ######
# In order to reproduce the bug with R7, it is necessary to push the LSN a bit forward,
# and get a new checkpoint afterwards. Reason is that R7 looks at last_ckp of the latest
# checkpoint to determine recovery start, whereas R6 looks at ckp_lsn instead.
cdb2sql $CDB2_OPTIONS $dbnm $DEFAULT "INSERT INTO t VALUES ('1')" >/dev/null
cdb2sql $CDB2_OPTIONS $dbnm $HOST $master 'exec procedure sys.cmd.send("flush")'

###### Get a list of log files that can be safely deleted. ######
echo Sleep 10 seconds to process replication messages.
sleep 10

###### More flushes to get a new log file,
###### so that the last sync LSN and the rep verify record are not in the same log file.
######
echo Doing checkpoints to push forward the log files even farther...
masterlsn=`cdb2sql $CDB2_OPTIONS $TABS $dbnm $HOST $master 'exec procedure sys.cmd.send("bdb txnstat")' | grep last_ckp | cut -d' ' -f2`
masterlsnfile=`echo "$masterlsn" | cut -d':' -f1`
masterlsnfiletarget=$masterlsnfile
while true; do
  ckptimes=0
  while [ $ckptimes -le 100 ]; do
    let ckptimes=$ckptimes+1
    cdb2sql $CDB2_OPTIONS $dbnm $HOST $master 'exec procedure sys.cmd.send("flush")' >/dev/null
  done
  masterlsnfile=`cdb2sql $CDB2_OPTIONS $TABS $dbnm $HOST $master 'exec procedure sys.cmd.send("bdb txnstat")' | grep last_ckp | cut -d' ' -f2 | cut -d':' -f1`
  echo $masterlsnfile $masterlsnfiletarget
  if [ $masterlsnfile -gt $masterlsnfiletarget ]; then
    break
  fi
done
echo Sleeping 10 seconds and do 1 more checkpoint
sleep 10
cdb2sql $CDB2_OPTIONS $dbnm $HOST $master 'exec procedure sys.cmd.send("flush")' >/dev/null

# Let replicants catch up.
for onenode in `cdb2sql $CDB2_OPTIONS $TABS $dbnm $DEFAULT 'exec procedure sys.info.cluster()' | cut -d$'\t' -f1`; do
    while true; do
        cdb2sql $TABS $dbnm $HOST $onenode 'SELECT 1' >/dev/null
        if [[ $? -eq 0 ]]; then
            break;
        fi
    done
done

reproduced=1
masterlsn=`cdb2sql $CDB2_OPTIONS $TABS $dbnm $HOST $master 'exec procedure sys.cmd.send("bdb txnstat")' | grep last_ckp | cut -d' ' -f2`
echo Master lsn is at $masterlsn
for onenode in `cdb2sql $CDB2_OPTIONS $TABS $dbnm $DEFAULT 'exec procedure sys.info.cluster()' | cut -d$'\t' -f1`; do
    replsn=`cdb2sql $TABS $dbnm $HOST $onenode 'exec procedure sys.cmd.send("bdb txnstat")' | grep last_ckp | cut -d' ' -f2`
    if [[ "$replsn" != "$masterlsn" ]]; then
        reproduced=0
        break;
    fi
done



if [[ $reproduced -ne 1 ]]; then
    let runs=$runs-1
    echo Number of retries remaining: $runs
    continue
fi

for onenode in `cdb2sql $CDB2_OPTIONS $TABS $dbnm $DEFAULT 'exec procedure sys.info.cluster()' | cut -d$'\t' -f1`; do
    if [[ "$onenode" != "$master" ]]; then
        echo Doing $onenode
        cdb2sql $CDB2_OPTIONS $TABS $dbnm $HOST $onenode 'exec procedure sys.cmd.send("bdb log_archive")'
        numlogs=`cdb2sql $CDB2_OPTIONS $dbnm $HOST $onenode 'exec procedure sys.cmd.send("bdb log_archive")' | grep 'log.00' | wc -l`

        if [[ $numlogs -ne 0 ]]; then
            echo The replicant $onenode will not recover correctly! >&2
            exit 1
        fi
    fi
done

cdb2sql $CDB2_OPTIONS $TABS $dbnm $HOST $master 'exec procedure sys.cmd.send("bdb log_archive")'
numlogs=`cdb2sql $CDB2_OPTIONS $dbnm $HOST $master 'exec procedure sys.cmd.send("bdb log_archive")' | grep 'log.00' | wc -l`

if [[ $numlogs -ne 0 ]]; then
    echo Master will not recover correctly after downgrade! >&2
    exit 1
fi

echo 'All good'
exit 0

done

echo Could not reproduce the bug! >&2
exit 1

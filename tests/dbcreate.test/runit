#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x

assertres ()
{
    if [ $# != 2 ] ; then 
        failexit "number of parameters passed is $# but expecting 2"
    fi
    res=$1
    target=$2
    if [ "$res" != "$target" ] ; then
        failexit "res is $res but should be $target"
    fi
}
failexit()
{
    echo $1
    exit 1
}

i=1
DB=$DBNAME
TSTDBDIR=$DBDIR

echo "Check 1"
${COMDB2_EXE} --no-global-lrl --create $DB --lrl $TSTDBDIR/${DB}.lrl &> out
grep "lrl : No such file or directory" out || failexit "expected 'No such file or directory'"

echo "Check 2"
mkdir -p $TSTDBDIR
echo "logmsg level debug" > $TSTDBDIR/${DB}.lrl
#should not crash
${COMDB2_EXE} --no-global-lrl --create $DB --lrl $TSTDBDIR/${DB}.lrl &> out
grep "\[FATAL\] failed to open bdb_env for \| \[FATAL\] DB directory" out || failexit "expected '[FATAL] failed to open bdb_env for ' or '\[FATAL\] DB directory'"

echo "Check 3"
${COMDB2_EXE} --no-global-lrl $DB --lrl $TSTDBDIR/${DB}.lrl &> out
grep "\[FATAL\] DB directory" out | grep "does not exist" || failexit "expected '[FATAL] DB directory does not exist'"

echo "Check 4"
echo "name    $DB" >> $TSTDBDIR/${DB}.lrl
${COMDB2_EXE} --no-global-lrl $DB --lrl $TSTDBDIR/${DB}.lrl &> out
grep "\[FATAL\] DB directory" out | grep "does not exist" || failexit "expected '[FATAL] DB directory does not exist'"

echo "Check 5"
echo "name    $DB
logmsg level debug
dir     ${TSTDBDIR}_nonexistent " > $TSTDBDIR/${DB}.lrl
${COMDB2_EXE} --no-global-lrl $DB --lrl $TSTDBDIR/${DB}.lrl &> out
grep "\[FATAL\] DB directory '${TSTDBDIR}_nonexistent' does not exist" out || failexit "expected '[FATAL] DB directory does not exist'"

echo "Check 6"
echo "name    $DB
dir     ${TSTDBDIR}" > $TSTDBDIR/${DB}.lrl
${COMDB2_EXE} --no-global-lrl $DB --lrl $TSTDBDIR/${DB}.lrl &> out
grep "No such file or directory" out | grep "logs:" || failexit "expected 'No such file or directory'"

echo "Check 7"
touch $TSTDBDIR/${DB}.lrl
df $TSTDBDIR | awk '{print $1 }' | grep "tmpfs\|nfs" && echo "setattr directio 0" > $TSTDBDIR/${DB}.lrl 
${COMDB2_EXE} --no-global-lrl ${DB} --create --dir $TSTDBDIR --lrl $TSTDBDIR/${DB}.lrl &> out
grep "Created database" out || failexit "expected 'Created database'"

echo "name    $DB" >> $TSTDBDIR/${DB}.lrl
echo "dir     $TSTDBDIR" >> $TSTDBDIR/${DB}.lrl
mkdir -p $TSTDBDIR/var/log/cdb2
mkdir -p $TMPDIR

echo "Check 8, bring up db and query it"
if [[ -n "$CLUSTER" ]]; then
    echo "Use comdb2makecluster --nocreate to copy to cluster"

    ${SRCHOME}/contrib/comdb2makecluster/comdb2makecluster --nocreate --dir $TSTDBDIR $DB $CLUSTER
    rc=$?
    if [[ $rc -ne 0 ]] ; then
        failexit "Makecluster returned error $rc"
    fi


    echo $DBNAME 0 $CLUSTER > $CDB2_CONFIG
    echo "comdb2_config:default_type=testsuite" >> $CDB2_CONFIG

    cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $DB default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
    for node in $cluster ; do
        res=`cdb2sql --tabs ${CDB2_OPTIONS} $DB --host $node "select comdb2_host()"`
        assertres $res $node
    done
else
    ${SRCHOME}/contrib/comdb2makecluster/comdb2makecluster --nocreate --dir $DB $TSTDBDIR
    assertres $? 255

    echo "comdb2_config:default_type=local" >> $CDB2_CONFIG
    ${COMDB2_EXE} $DBNAME --no-global-lrl --lrl $TSTDBDIR/${DB}.lrl --pidfile ${TMPDIR}/${DBNAME}.pid &> $TESTDIR/logs/${DBNAME}.db &
    sleep 1
    res=`cdb2sql --tabs ${CDB2_OPTIONS} $DB default "select comdb2_host()"`
    assertres $res $HOSTNAME
fi

COMDB2_UNITTEST=0 CLEANUPDBDIR=1 $TESTSROOTDIR/unsetup 1 > $TESTDIR/logs/${DBNAME}.unsetup


if [[ -n "$CLUSTER" ]]; then
    echo "Check 9, Use comdb2makecluster bring up a new db"

    ${SRCHOME}/contrib/comdb2makecluster/comdb2makecluster --dir $TSTDBDIR $DB $CLUSTER
    rc=$?
    if [[ $rc -ne 0 ]] ; then
        failexit "Makecluster returned error $rc"
    fi

    echo $DBNAME 0 $CLUSTER > $CDB2_CONFIG
    echo "comdb2_config:default_type=testsuite" >> $CDB2_CONFIG

    cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $DB default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
    for node in $cluster ; do
        res=`cdb2sql --tabs ${CDB2_OPTIONS} $DB --host $node "select comdb2_host()"`
        assertres $res $node
    done

    COMDB2_UNITTEST=0 CLEANUPDBDIR=1 $TESTSROOTDIR/unsetup 1 > $TESTDIR/logs/${DBNAME}.unsetup
fi


exit 0

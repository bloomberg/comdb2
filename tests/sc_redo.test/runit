#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt
export baseiters=400
export basevalue=100000000
export statusinterval=400
export updatethds=16

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function touchstop
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Touched stop-file"
}

function verify_up
{
    [[ $debug == "1" ]] && set -x
    typeset node=$1
    typeset func="verify_up-$node"
    write_prompt $func "Running $func"
    typeset count=0
    typeset r=1
    while [[ "$r" -ne "0" && "$count" -lt 2000 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1" >/dev/null 2>&1
        r=$?
        [[ $r != 0 ]] && sleep 1
        let count=count+1
    done
    [[ $r != 0 ]] && failexit "node $node did not recover in time"
}

function populate_thread
{
    [[ $debug == "1" ]] && set -x
    typeset seed=${1:-0}
    typeset func="populate_thread-$seed"
    write_prompt $func "Running $func"
    typeset i=0
    typeset cnt=0
    while [[ "$i" -lt $baseiters ]]; do
        x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1(a) values(${seed})" >/dev/null 2>&1)
        [[ $? -ne 0 ]] && failexit "Error populating table: $x"
        let seed=seed+$updatethds
        let cnt=cnt+1
        let i=i+1
        [[ $(( (cnt % statusinterval) )) == 0 ]] && write_prompt $func "$cnt iterations"
    done
    write_prompt $func "Completed $func"
}

function populate_table
{
    [[ $debug == "1" ]] && set -x
    typeset func="populate_table"
    write_prompt $func "Running $func"
    typeset j=0
    while [[ "$j" -lt $updatethds ]]; do
        populate_thread $j &
        let j=j+1
    done
    wait
}

function update_thread
{
    [[ $debug == "1" ]] && set -x
    typeset seed=${1}
    typeset func="update_thread-$seed"
    write_prompt $func "Running $func"
    typeset targetval=$(( basevalue + seed ))
    typeset cnt=0

    while [[ ! -f $stopfile ]]; do
        origval=$(( ( (RANDOM % baseiters) * updatethds) + seed ))
        
        if [[ $(( cnt % 2 )) == 1 ]]; then

            # Update to target and back
            x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "update t1 set a=${targetval} where a=${origval}" 2>&1)
            [[ $? -ne 0 ]] && failexit "Error updating table: $x"

            x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "update t1 set a=${origval} where a=${targetval}" 2>&1)
            [[ $? -ne 0 ]] && failexit "Error updating table: $x"
        else 

            # Insert and delete target
            x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "insert into t1 (a) values(${targetval})" 2>&1)
            [[ $? -ne 0 ]] && failexit "Error inserting into table: $x"

            x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "delete from t1 where a = ${targetval}" 2>&1)
            [[ $? -ne 0 ]] && failexit "Error deleting from table: $x"

        fi
        let cnt=cnt+1
        [[ $(( (cnt % statusinterval) )) == 0 ]] && write_prompt $func "$cnt iterations"
    done
}

function start_update_threads
{
    typeset func="start_update_threads"
    write_prompt $func "Running $func"
    typeset j=0
    while [[ "$j" -lt $updatethds ]]; do
        update_thread $j &
        let j=j+1
    done
}

function rebuild_thread
{
    typeset func="rebuild_thread"
    write_prompt $func "Running $func"
    typeset cnt=0
    typeset vers=2

    while [[ ! -f $stopfile ]]; do

        if [[ $(( cnt % 2 )) == 1  ]]; then
            write_prompt $func "Rebuilding and adding a column: new record size should be 10"
            x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "alter table t1 options rebuild { `cat t1_2.csc2 ` }" 2>&1)
            [[ $? -ne 0 ]] && failexit "Failed to rebuild: $x"
        else
            write_prompt $func "Rebuilding and removing a column: new record size should be 5"
            x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "alter table t1 options rebuild { `cat t1_1.csc2 ` }" 2>&1)
            [[ $? -ne 0 ]] && failexit "Failed to rebuild: $x"
        fi
        let vers=vers+1

        x=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "exec procedure sys.cmd.verify('t1', 'verbose')" 2>&1)
        good=$(echo "$x" | grep -i 'succeed')
        [[ "$good" == "" ]] && failexit "Error verifying table t1"

        let cnt=cnt+1
        write_prompt $func "Completed $cnt iterations"
    done
    write_prompt $func "Finished $func"
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    typeset maxtime=$(( 8 * 60 ))
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))
    typeset cnt=0

    rm $stopfile

    write_prompt $func "Running $func"
    create_table
    create_unique_index
    populate_table

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t1 order by a" >records.txt 2>&1
    $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "alter table t1 { `cat t1_2.csc2 ` }" 
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t1 order by a" >records2.txt 2>&1

    start_update_threads
    rebuild_thread &

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        if [[ -z "$CLUSTER" ]]; then
            verify_up $(hostname)
        else
            for node in $CLUSTER; do
                verify_up $node
            done
        fi
        let cnt=cnt+1
        sleep 5
    done

    # Different thread failed the test
    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait

    # Verify that the table has all the original records
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t1 order by a" >check.txt 2>&1
    diff records.txt check.txt >/dev/null 2>&1
    if [[ $? != 0 ]]; then
        diff records2.txt check.txt >/dev/null 2>&1
        [[ $? != 0 ]] && failexit "Result table is different"
    fi
}

run_test
echo "Success"

We determined that under new-sc, the asynchronous redo thread can apply changes
which cause constraint violations in the new table for records which never 
co-existed in the old table.  Simple schedule from the paper demonstrates this
issue.  Assume table t has a single integer column, 'a', and is populated with
two records of values 1 and 2:

CONV-TD-1 : CONVERT-RECORD-WITH-VALUE-1
CLTXN-1   : UPDATE t SET a = 100 WHERE a = 1 ; COMMIT
CLTXN-2   : UPDATE t SET a = 1 WHERE a = 100 ; COMMIT
CLTXN-3   : UPDATE t SET a = 100 WHERE a = 2 ; COMMIT
CONV-TD-2 : CONVERT-RECORD-WITH-VALUE-100 (FORMERLY VALUE 2)
REDO-TD   : UPDATE t SET a = 100 (CONFLICT)

The solution is abort this operation when we've proved the conflict existed in
the original table.  When the conflict occurs, Keep track of the genid and the 
current end-of-logfile in llmeta.  We can prove a conflict's co-existence if
the asynchronous redo thread can process to the end-of-logfile observed at the
time of the conflict without updating or removing this genid.

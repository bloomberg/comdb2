#!/usr/bin/env bash
bash -n "$0" | exit 1

# Remote cursor moves testcase for comdb2
################################################################################

iterations=10000
clnt_multiplier=10

# we rely on the following global variables to be set
echo "main db vars"
vars="TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR CDB2_OPTIONS CDB2_CONFIG SECONDARY_DBNAME SECONDARY_DBDIR SECONDARY_CDB2_CONFIG SECONDARY_CDB2_OPTIONS"
for required in $vars; do
    q=${!required}
    echo "$required=$q" 
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        exit 1
    fi
done

cmdSRC="cdb2sql -s --cdb2cfg ${CDB2_CONFIG} ${DBNAME} default"
cmdDST="cdb2sql -s --cdb2cfg ${SECONDARY_CDB2_CONFIG} ${SECONDARY_DBNAME} default"

echo "Create comdb2db tables in ${SECONDARY_DBNAME}"
$cmdDST "create table if not exists clusters {`cat clusters.csc2`}"
if (( $? != 0 )) ; then
    echo "Failure to create table clusters"
    exit 1
fi
$cmdDST "create table if not exists machines {`cat machines.csc2`}"
if (( $? != 0 )) ; then
    echo "Failure to create table machines"
    exit 1
fi
$cmdDST "create table if not exists databases {`cat databases.csc2`}"
if (( $? != 0 )) ; then
    echo "Failure to create table databases"
    exit 1
fi


comdb2db_hosts="${SECONDARY_DBNAME}:1234"

echo "Populate comdb2db tables in ${SECONDARY_DBNAME}"
$cmdDST "insert into databases(name, dbnum) values ('${SECONDARY_DBNAME}', 1234) on conflict do nothing"
if (( $? != 0 )) ; then
    echo "Failure to insert into databases"
    exit 1
fi
nnodes=1
if [[ -z "${CLUSTER}" ]] ; then
    echo "Local mode"
    $cmdDST "insert into machines(name, cluster, room) values ('localhost', 'KABOOM', 'NY') on conflict do nothing"
    if (( $? != 0 )) ; then
        echo "Failure to insert into machines local"
        exit 1
    fi
    $cmdDST "insert into clusters(name, cluster_name, cluster_machs) values ('${SECONDARY_DBNAME}', 'dev', 'KABOOM') on conflict do nothing"
    if (( $? != 0 )) ; then
        echo "Failure to insert into clusters local"
        exit 1
    fi
    comdb2db_hosts="${comdb2db_hosts}:localhost"
else
    $cmdDST "insert into clusters(name, cluster_name, cluster_machs) values ('${SECONDARY_DBNAME}', 'dev', 'KABOOM') on conflict do nothing"
    if (( $? != 0 )) ; then
        echo "Failure to insert into clusters"
        exit 1
    fi
    echo "Cluster ${CLUSTER}"
    let nnodes=0
    for mach in ${CLUSTER} ; do
        $cmdDST "insert into machines(name, cluster, room) values ('${mach}', 'KABOOM', 'NY') on  conflict do nothing"
        if (( $? != 0 )) ; then
            echo "Failure to insert into machines ${mach}"
            exit 1
        fi
        comdb2db_hosts="${comdb2db_hosts}:${mach}"
        let nnodes=nnodes+1
    done
fi 

echo "Populate test records in ${DBNAME}"
cdb2sql -f t1.insrecs --cdb2cfg ${CDB2_CONFIG} ${DBNAME} default -
if (( $? != 0 )) ; then
    echo "Failure to insert into t1"
    exit 1
fi
echo "Populate test records in ${SECONDARY_DBNAME}"
cdb2sql -f t2.insrecs --cdb2cfg ${SECONDARY_CDB2_CONFIG} ${SECONDARY_DBNAME} default -
if (( $? != 0 )) ; then
    echo "Failure to insert into t2"
    exit 1
fi

echo "Pointing the source ${DBNAME} to custom comdb2db ${SECONDARY_DBNAME}"
echo $cmdSRC "put tunable foreign_metadb '${SECONDARY_DBNAME}'"
$cmdSRC "put tunable foreign_metadb '${SECONDARY_DBNAME}'"
if (( $? != 0 )) ; then
    echo "Failure to put foreign_metadb ${SECONDARY_DBNAME}"
    exit 1
fi
echo $cmdSRC "put tunable foreign_metadb_class 'local'"
$cmdSRC "put tunable foreign_metadb_class 'local'"
if (( $? != 0 )) ; then
    echo "Failure to put foreign_metadb_class 'local'"
    exit 1
fi


echo ${TESTSBUILDDIR}/foreigndbconfig -d ${DBNAME} -c ${CDB2_CONFIG} -s "comdb2_config:comdb2dbname:${SECONDARY_DBNAME}
comdb2_config:default_type:dev
${comdb2db_hosts}"
${TESTSBUILDDIR}/foreigndbconfig -d ${DBNAME} -c ${CDB2_CONFIG} -s "comdb2_config:comdb2dbname:${SECONDARY_DBNAME}
comdb2_config:default_type:dev
${comdb2db_hosts}"
if (( $? != 0 )) ; then
    echo "Failure to put foreign_metadb_class 'local'"
    exit 1
fi

$cmdDST "select * from machines"
$cmdDST "select * from clusters"
$cmdDST "select * from databases"

#run tests
echo "Starting tests with ${nnodes} nodes"


let clients=${clnt_multiplier}*nnodes
./incoh_remsql.sh ${clients} ${iterations}
result=$?

if (( $result != 0 )) ; then
   echo "FAILURE"
   exit 1
fi


echo "SUCCESS"

#!/usr/bin/env bash
bash -n "$0" | exit 1

source ${TESTSROOTDIR}/tools/runit_common.sh

# Grab my database name.
dbnm=$1

tbl=t2

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of records I will add.
nrecs=100

# Max number of schema changes
max_nusc=100


function do_rebuild_track_pid
{
    typeset loc_dbnm=$1
    typeset loc_tbl=$2
    typeset track_pid=$3
    typeset scnt=0
    while `kill -0 $track_pid 2>/dev/null` && [[ $scnt -lt $max_nusc ]]; do

        echo "Running rebuild iteration $scnt"
        cdb2sql ${CDB2_OPTIONS} $loc_dbnm default "rebuild $loc_tbl"

        if [[ $? != 0 ]]; then
            kill -9 $track_pid
            failexit "Error schema-changing on iteration $scnt"
        fi
        echo "Done with rebuild iteration $scnt"

        echo "Running verify"
        do_verify $loc_tbl
        echo "Done with verify"
        let scnt=scnt+1
    done

    echo "Success!  Performed $scnt schema-changes."

    return 0
}


function insert_records
{
    j=0
    echo "Inserting $nrecs records."

    while [[ $j -lt $nrecs ]]; do 
        #insert next, if error continue to try again
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into $tbl(a,b,c,d,e,f) values ($j,'test1',x'1234',$((j*2)),$j,$j)"  >> insert.out 2>&1
        if [ $? -ne 0 ] ; then
            continue
        fi
        let j=j+1
        assertcnt $tbl $j
        if [ $1 -gt 0 ] ; then
            sleep 0.1
        fi
    done
    echo "Done inserting $nrecs records."
}




function run_test
{
    typeset ipid=''

    cdb2sql ${CDB2_OPTIONS} $dbnm default "truncate $tbl"

    insert_records 0 &
    typeset ipid=$!

    do_rebuild_track_pid $dbnm $tbl $ipid
    wait

    assertcnt $tbl $nrecs
    do_verify $tbl
}




echo "running test in machine $(hostname):${PWD}"

cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table $tbl"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table $tbl  { `cat $tbl.csc2 ` }"


master=`cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`

max_iter=40
t=0
while [ $t -lt ${max_iter} ] ; do
    run_test
    mv insert.out insert.out.$t

    sleep 2
    let t=t+1
done

sleep 15

echo "Success"

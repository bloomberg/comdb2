#!/usr/bin/env bash
bash -n "$0" | exit 1

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/hrtime.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/random.sh

[[ $debug == "1" ]] && set -x

#columns=${COLUMNS:-20}
nrecs=${NRECS:-100000}
maxval=${MAXVAL:-10000}
logfile=${TESTLOG:-testlog.txt}
rpid=-1

function status
{
    [[ $debug == "1" ]] && set -x
    typeset columns=$1
    typeset func="status"
    typeset time=$2
    typeset tname=$3

    write_prompt $func "$tname $columns columns took $time ms"
    echo "$tname $columns columns took $time ms" >> $logfile
}

function pause_sc_at_end_tunable
{
    [[ $debug == "1" ]] && set -x
    if [[ -n $CLUSTER ]]; then
        for n in $CLUSTER ; do 
            $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $n "put tunable sc_pause_at_end = '1'"
        done
    else
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "put tunable sc_pause_at_end = '1'"
    fi
}

function sc_is_at_end
{
    [[ $debug == "1" ]] && set -x
    if [[ -n $CLUSTER ]]; then
        master=$(get_master)
        out=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $master "select value from comdb2_tunables where name='sc_is_at_end'")
    else
        out=$($CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "select value from comdb2_tunables where name='sc_is_at_end'")
    fi
    echo "$out"
}

function unpause_sc_at_end_tunable
{
    [[ $debug == "1" ]] && set -x
    if [[ -n $CLUSTER ]]; then
        for n in $CLUSTER ; do 
            $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $n "put tunable sc_pause_at_end = '0'"
        done
    else
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "put tunable sc_pause_at_end = '0'"
    fi
}

function inline_tunable
{
    [[ $debug == "1" ]] && set -x
    if [[ -n $CLUSTER ]]; then
        for n in $CLUSTER ; do 
            $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $n "put tunable logical_live_sc = '0'"
        done
    else
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "put tunable logical_live_sc = '0'"
    fi
}

function logicalsc_tunable
{
    [[ $debug == "1" ]] && set -x
    if [[ -n $CLUSTER ]]; then
        for n in $CLUSTER ; do 
            $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $n "put tunable logical_live_sc = '1'"
        done
    else
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME default "put tunable logical_live_sc = '1'"
    fi
}


function create
{
    [[ $debug == "1" ]] && set -x
    typeset func="create"
    typeset c=0
    typeset columns=$1
    typeset createt1="create table t1("
    write_prompt $func "Creating table with $columns columns"
    if [[ $rpid != -1 ]]; then
        wait $rpid
        rpid=-1
    fi
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table if exists t1"
    r=$?
    while [[ $r != 0 ]]; do
        echo "Error dropping table"
        sleep 1
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table if exists t1"
        r=$?
    done
    while [[ $c -lt $columns ]]; do
        if [[ $c -gt 0 ]]; then
            createt1="$createt1 ,a$c int"
        else
            createt1="$createt1 a$c int"
        fi
        let c=c+1
    done
    createt1="$createt1)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "$createt1"

    c=0
    while [[ $c -lt $columns ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create index ix$c on t1(a$c)"
        let c=c+1
    done
}

function load
{
    [[ $debug == "1" ]] && set -x
    typeset func="load"
    typeset iters=$(( nrecs / maxval ))
    typeset columns=$1
    typeset i=0
    typeset insert="insert into t1 select "
    typeset c=0
    write_prompt $func "Loading table with $nrecs records"
    while [[ $c -lt $columns ]]; do
        if [[ $c -gt 0 ]]; then
            insert="$insert ,*"
        else
            insert="$insert *"
        fi
        let c=c+1
    done
    insert="$insert from generate_series(0, $(( maxval - 1 )) )"
    while [[ $i -lt $iters ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "$insert" >/dev/null
        let i=i+1
    done
}

function random_updates
{
    [[ $debug == "1" ]] && set -x
    typeset func="random_updates"
    typeset iters=${1:-2000}
    typeset count=0
    typeset numvals=${2:-1}
    write_prompt $func "Updating $iters times"

    while [[ $count -lt $iters ]]; do
        typeset orrecs=$numvals
        typeset orclause=""
        while [[ $orrecs -gt 1 ]]; do
            orclause="$orclause or a = $(random $maxval)"
            let orrecs=orrecs-1
        done
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update t1 set a0 = a0 where a0 = $(random $maxval) $orclause" >/dev/null
        let count=count+1
    done
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="heat_cache"
}

function start_sc
{
    [[ $debug == "1" ]] && set -x
    typeset func="start_sc"
    write_prompt $func "Rebuilding t1"
    pause_sc_at_end_tunable
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "rebuild t1" &
    rpid=$!

    count=0
    x=$(sc_is_at_end)
    while [[ "$x" != "ON" ]]; do
        let count=count+1
        write_prompt $func "Waiting for Commit-Pending $count"
        sleep 5
        x=$(sc_is_at_end)
    done
}

function commit_sc
{
    [[ $debug == "1" ]] && set -x
    typeset func="commit_sc"
    write_prompt $func "Commit schema change"
    unpause_sc_at_end_tunable
    st=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select status from comdb2_sc_status where name='t1'")
    while [[ "$st" != "COMMITTED" ]]; do
        let count=count+1
        sleep 5
        st=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select status from comdb2_sc_status where name='t1'")
    done
}

function warmup
{
    [[ $debug == "1" ]] && set -x
    typeset func="baseline"
    typeset columns=$1
    typeset start
    typeset end

    start=$(timems)
    random_updates
    end=$(timems)
}

function baseline
{
    [[ $debug == "1" ]] && set -x
    typeset func="baseline"
    typeset columns=$1
    typeset start
    typeset end

    start=$(timems)
    random_updates
    end=$(timems)
    status $columns $(( end - start )) $func
}

function inline
{
    [[ $debug == "1" ]] && set -x
    typeset func="inline"
    typeset columns=$1
    typeset start
    typeset end

    inline_tunable
    start_sc
    start=$(timems)
    random_updates
    end=$(timems)
    commit_sc
    status $columns $(( end - start )) $func
}

function async
{
    [[ $debug == "1" ]] && set -x
    typeset func="async"
    typeset columns=$1
    typeset start
    typeset end

    logicalsc_tunable
    start_sc
    start=$(timems)
    random_updates
    end=$(timems)
    commit_sc
    status $columns $(( end - start )) $func
}

function run
{
    [[ $debug == "1" ]] && set -x
    typeset cols=${1:-20}
    typeset func="run"

    export columns=$cols
    create $columns
    load $columns

    warmup $columns
    baseline $columns
    async $columns
    inline $columns

    tail -3 $logfile
}

> $logfile

run 5
run 10
run 15
run 20
run 25
run 30
run 35
run 40
run 45
run 50

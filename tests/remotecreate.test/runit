#!/usr/bin/env bash
bash -n "$0" | exit 1
set -x
# Remote cursor moves testcase for comdb2
################################################################################


# we rely on the following global variables to be set
echo "main db vars"
vars="TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR CDB2_OPTIONS CDB2_CONFIG SECONDARY_DBNAME SECONDARY_DBDIR SECONDARY_CDB2_CONFIG SECONDARY_CDB2_OPTIONS TERTIARY_DBNAME TERTIARY_DBDIR TERTIARY_CDB2_CONFIG TERTIARY_CDB2_OPTIONS QUATERNARY_DBNAME QUATERNARY_DBDIR QUATERNARY_CDB2_CONFIG QUATERNARY_CDB2_OPTIONS"
for required in $vars; do
    q=${!required}
    echo "$required=$q" 
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        exit 1
    fi
done

shards=""
SHARDS_LIST="$DBNAME $SECONDARY_DBNAME $TERTIARY_DBNAME $QUATERNARY_DBNAME"
numshards=4

S0_SQLT="cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} default"
S0_SQL="cdb2sql ${CDB2_OPTIONS} ${DBNAME} default"
S1_SQLT="cdb2sql --tabs ${SECONDARY_CDB2_OPTIONS} ${SECONDARY_DBNAME} default"
S1_SQL="cdb2sql ${SECONDARY_CDB2_OPTIONS} ${SECONDARY_DBNAME} default"
S2_SQLT="cdb2sql --tabs ${TERTIARY_CDB2_OPTIONS} ${TERTIARY_DBNAME} default"
S2_SQL="cdb2sql ${TERTIARY_CDB2_OPTIONS} ${TERTIARY_DBNAME} default"
S3_SQLT="cdb2sql --tabs ${QUATERNARY_CDB2_OPTIONS} ${QUATERNARY_DBNAME} default"
S3_SQL="cdb2sql ${QUATERNARY_CDB2_OPTIONS} ${QUATERNARY_DBNAME} default"

OUT=log.txt

export stopfile=./stopfile.txt

rm ${OUT}

function fail_exit()
{
    echo "Failed $@" | tee ${DBNAME}.fail_exit # runtestcase script looks for this file
    touch $stopfile
}

function setup_testcase {
	$S0_SQL "DROP TABLE IF EXISTS t"
}

function verify_table {
	tbl=$1
	$S0_SQLT "SELECT * from ${tbl}"
	if (( $? != 0 )); then
		fail_exit "verify_table failed. Could not select from ${tbl} on ${DBNAME}"
	fi
	$S1_SQLT "SELECT * from ${tbl}"
	if (( $? != 0 )); then
		fail_exit "verify_table failed. Could not select from ${tbl} on ${SECONDARY_DBNAME}"
	fi
	$S2_SQLT "SELECT * from ${tbl}"
	if (( $? != 0 )); then
		fail_exit "verify_table failed. Could not select from ${tbl} on ${TERNARY_DBNAME}"
	fi
	$S2_SQLT "SELECT * from ${tbl}"
	if (( $? != 0 )); then
		fail_exit "verify_table failed. Could not select from ${tbl} on ${QUATERNARY_DBNAME}"
	fi
}
function verify_llmeta {
	expected=$1
	result=$($S0_SQLT "EXEC PROCEDURE sys.cmd.send('llmeta list')" | grep "gen_shard")
	entry=`echo $result | cut -d ' ' -f 3 | cut -d '=' -f 2`
	if [ "$entry" != "$expected" ]; then
		fail_exit "verify_llmeta failed on $DBNAME. Expected $expected but got $entry"
	fi
	result=$($S1_SQLT "EXEC PROCEDURE sys.cmd.send('llmeta list')" | grep "gen_shard")
	entry=`echo $result | cut -d ' ' -f 3 | cut -d '=' -f 2`
	if [ "$entry" != "$expected" ]; then
		fail_exit "verify_llmeta failed on ${SECONDARY_DBNAME}. Expected $expected but got $entry"
	fi
	result=$($S2_SQLT "EXEC PROCEDURE sys.cmd.send('llmeta list')" | grep "gen_shard")
	entry=`echo $result | cut -d ' ' -f 3 | cut -d '=' -f 2`
	if [ "$entry" != "$expected" ]; then
		fail_exit "verify_llmeta failed on ${TERNARY_DBNAME}. Expected $expected but got $entry"
	fi
	result=$($S3_SQLT "EXEC PROCEDURE sys.cmd.send('llmeta list')" | grep "gen_shard")
	entry=`echo $result | cut -d ' ' -f 3 | cut -d '=' -f 2`
	if [ "$entry" != "$expected" ]; then
		fail_exit "verify_llmeta failed on ${QUATERNARY_DBNAME}. Expected $expected but got $entry"
	fi
}

function test_creation_nonkey {
	$S0_SQL "create table t(a int , b int) partitioned by columns(a) on (${shards})"
	if (( $? == 0 )); then
		fail_exit "test_creation succeeded. Should have failed creating a sharded table with a non-key sharding key"
	fi
}

function test_deletion {
	$S0_SQL "create table t(a int unique, b int) partitioned by columns(a) on (${shards})"
	if (( $? != 0 )); then
		fail_exit "test_creation failed. Could not create table"
	fi
	verify_table "t"
	$S0_SQL "drop table t"
	verify_llmeta ''
}

function test_creation {
	$S0_SQL "create table t(a int unique, b int) partitioned by columns(a) on (${shards})"
	if (( $? != 0 )); then
		fail_exit "test_creation failed. Could not create table"
	fi
	verify_table "t"
	expected="\"{\"t\":\"{\\\"TABLENAME\\\":\\\"t\\\",\\\"NUMDBS\\\":4,\\\"DBNAMES\\\":[\\\"${DBNAME}\\\",\\\"${SECONDARY_DBNAME}\\\",\\\"${TERTIARY_DBNAME}\\\",\\\"${QUATERNARY_DBNAME}\\\"],\\\"NUMCOLS\\\":1,\\\"COLUMNS\\\":[\\\"a\\\"],\\\"SHARDNAMES\\\":[\\\"\$1_t\\\",\\\"\$2_t\\\",\\\"\$3_t\\\",\\\"\$4_t\\\"]}\"}\""
	verify_llmeta $expected
}

function run_test {
	testcase="testing creation"
	setup_testcase  
	test_creation

	testcase="testing deletion"
	setup_testcase  
	test_deletion

	testcase="testing creation with non-key sharding key"
	setup_testcase
	test_creation_nonkey
}

rm $stopfile >/dev/null 2>&1 


for shard in $SHARDS_LIST; do
	shards+=" ${shard},"
done

# remove the last ','
shards=`echo $shards | sed 's/.$//'`
echo $shards

run_test

if [[ -f $stopfile ]]; then
    echo "Testcase failed"
    exit -1
fi

echo "Success"

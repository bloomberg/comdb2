#!/usr/bin/env bash
bash -n "$0" | exit 1

# Remote cursor moves testcase for comdb2
################################################################################


# args
# <dbname> <dbdir> <testdir> <autodbname> <autodbnum> <cluster>
echo "main db vars"
vars="TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR CDB2_OPTIONS CDB2_CONFIG"
for required in $vars; do
    q=${!required}
    echo "$required=$q" 
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        exit 1
    fi
done

dbname=$1
srcdbname=srcdb$DBNAME
dbdir=$DBDIR
testdir=$TESTDIR
cdb2options=$CDB2_OPTIONS

$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('disable_server_sockpool')" | grep ON
if [[ $? != 0 ]]; then
    echo "server sockpool is disabled for $DBNAME"
    echo "FAILURE"
    exit 1
fi


DBNAME=$srcdbname
DBDIR=$TESTDIR/$DBNAME
#effectively srcdb config -- needed to setup srcdb
CDB2_CONFIG=$DBDIR/comdb2db.cfg
CDB2_OPTIONS="--cdb2cfg $CDB2_CONFIG"

echo "remote db vars"
vars="TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR CDB2_OPTIONS CDB2_CONFIG"
for required in $vars; do
    q=${!required}
    echo "$required=$q" 
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        echo "FAILURE"
        exit 1
    fi
done

#setup remode db
$TESTSROOTDIR/setup &> $TESTDIR/logs/$DBNAME.setup

$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('disable_server_sockpool')" | grep ON
if [[ $? != 0 ]]; then
    echo "server sockpool is disabled for $DBNAME"
    echo "FAILURE"
    exit 1
fi

#generate testscripts in new files
files=`ls *.req.src`
for file in $files ; do
   newfile=${file%%.src}
   sed "s/ t / LOCAL_$dbname.t /g" $file > $newfile
   sed -i "/^select /!s/ t$/ LOCAL_$dbname.t$/g" $newfile
done

echo "Populating rows"
$CDB2SQL_EXE $cdb2options $dbname default - < inserts.req
if [[ $? != 0 ]] ; then
    echo "Inserting rows failed"
    echo "FAILURE"
    exit 1
fi

successful=1
#run tests
echo "Running sequence of selects"
i=0; while (( $i != 1000 )); do
    $CDB2SQL_EXE $cdb2options $dbname default - < load.req
    result=$?
    if [[ $result != 0 ]] ; then
        echo "Select failed"
        successful=0
        break
    fi
    let i=i+1;
done

$TESTSROOTDIR/unsetup $successful &> $TESTDIR/logs/$DBNAME.unsetup

if (( $successful != 1 )) ; then
    echo "FAILURE"
    exit 1
fi

echo "SUCCESS"

#!/bin/bash
bash -n "$0" | exit 1

#PS4='$(date +%Y%m%d-%H:%M:%S): '
set -x

REBUILD_DELAY=40

# Debug variable
debug=0

dbnm=$1


function failexit
{
    echo "Failed $1"
    exit -1
}

if [ "x$dbnm" == "x" ] ; then
    failexit "need a DB name"
fi

if [ -z $COMDB2_EXE ] ; then
   failexit '$COMDB2_EXE is not set'
fi

# Number of insert_records function calls
nins=0


function assertcnt 
{
    target=$1
    cnt=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}


function assert_vers 
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
    tblver=$newver
}


function assert_schema 
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}


function assert_sc_status
{
    target=$1
    cdb2sql --tabs --host $master ${CDB2_OPTIONS} $dbnm 'exec procedure sys.cmd.send("stat")' > stat1.out
    if [ $? -ne 0 ] ; then
        failexit "sending stat to new master $master"
    fi

    scrunning=`grep "schema change running" stat1.out | awk '{print $4}' `
    echo "scrunning is $scrunning"
    if [ "$scrunning" == "NO" ] ; then 
        if [ $target != 0 ] ; then
            failexit "scrunning is $scrunning, but target is $target"
        fi
    else 
        if [ $target != 1 ] ; then
            failexit "scrunning is $scrunning, but target is $target"
        fi
    fi
}


function get_sc_seed
{
    cdb2sql --tabs --host $master ${CDB2_OPTIONS} $dbnm 'exec procedure sys.cmd.send("stat")' > stat1.out
    if [ $? -ne 0 ] ; then
        failexit "sending stat to new master $master"
    fi

    scseed=`grep "Schema change in progress with seed" stat1.out | awk '{print $7}'`
    if [ "x$scseed" == "x" ] ; then
        failexit "scseed is empty"
    fi
    echo $scseed
}


function assert_sc_seed
{
    target=$1
    scseed=`get_sc_seed`
    echo "scseed is $scseed"
    if [ "$scseed" != "$target" ] ; then 
        failexit "scseed $scseed, but target is $target"
    fi
}


function do_verify
{
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then
        failexit "Verify"
    fi
}


# Update all records in the table
function update_all_records
{
    typeset prmsg=$1
    typeset iter=0

    [[ "$debug" == 1 ]] && set -x

    while :; do 

        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=x'1234' where b='test1'" >/dev/null 2>&1
        let iter=iter+1

        if [[ -n "$prmsg" && $(( iter % prmsg )) == 0 ]]; then

            echo "Updated all of table t1 $iter times."

        fi

    done
}


function update_records
{
    j=0
    nrecs=$1
    echo "Updating $nrecs records."
    echo "" > update.out

    while [[ $j -lt $nrecs ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set c=c+100000 where a = $j" >> update.out 
        let j=j+1
    done
}


function insert_records
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} $dbnm default "insert into t1(a,b,c) values ($j,'test1$j',$j)"  &>> $insfl
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
    done
    echo "done inserting round $nins"
}


function insert_records_oneshot
{
    j=$1
    nstop=$2
    let nins=nins+1
    insfl=insert${nins}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        echo "insert into t1(a,b,c) values ($j,'test1$j',$j)" 
        let j=j+1
    done | cdb2sql ${CDB2_OPTIONS} $dbnm default -  &>> $insfl
    echo "done inserting round $nins"
}


function kill_by_pidfile() {
    pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        ps -p $pid -o args | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then
            echo "kill -9 $pid"
            kill -9 $pid
        fi
        rm -f $pidfile
    else
        failexit "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}


function kill_restart_node 
{
    node=$1
    pushd $DBDIR
    cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'exec procedure sys.cmd.send("flush")'

    if [ -n "$CLUSTER" ] ; then
        kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
        mv --backup=numbered $TESTDIR/logs/${DBNAME}.${node}.db $TESTDIR/logs/${DBNAME}.${node}.db.1
        sleep 1
        if [ $node != `hostname` ] ; then
            ssh -o StrictHostKeyChecking=no -tt $node COMDB2_ROOT=$COMDB2_ROOT $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl >$TESTDIR/logs/${DBNAME}.${node}.db 2>&1 </dev/null &
            echo $! > ${TMPDIR}/${DBNAME}.${node}.pid
        else
            $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl &> $TESTDIR/logs/${DBNAME}.${node}.db -pidfile ${TMPDIR}/${DBNAME}.${node}.pid &
        fi
    else
        kill_by_pidfile ${TMPDIR}/${DBNAME}.pid
        mv --backup=numbered $TESTDIR/logs/${DBNAME}.db $TESTDIR/logs/${DBNAME}.db.1
        sleep 1
        echo "$DBNAME: starting single node"
        echo "$COMDB2_EXE $DBNAME $TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid"
        $COMDB2_EXE $DBNAME >$TESTDIR/logs/${DBNAME}.db -pidfile ${TMPDIR}/$DBNAME.pid 2>&1 &
    fi

    popd

    out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
    # wait until we can query it
    echo "$DBNAME: waiting until ready"
    while [[ "$out" != "1" ]]; do
        sleep 2
        out=$(cdb2sql ${CDB2_OPTIONS} --tabs --host $node $DBNAME  'select 1' 2>/dev/null)
    done
}


function get_schemachange_status
{
    master=$1
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('stat')" | grep "Schema change in progress" > schemachange_status.out
    if [ $? -eq 0 ] ; then
        return 1 
    fi
    return 0
}


function getmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

function force_delay_master
{
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('scdelay 500')"
}

echo "Test with insert, SC should not fail"

cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('debg 0')"
cdb2sql ${CDB2_OPTIONS} $dbnm default "drop table t1"
cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t1  { `cat t1_1.csc2 ` }"

assert_vers t1 0
assert_schema t1 t1_1.csc2
insert_records 1 200
assertcnt 200

#check via select * from t1 | make sure that a == b == c == 'test'$


echo "TESTING DOWNGRADE"
echo "Alter table to t1_2 version while doing inserts"
sleep 1

master=`getmaster`
echo "starting alter on master node $master"

force_delay_master

insert_records 201 400 &

(cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_2.csc2 ` }" &> alter1.out || touch alter1.failed) &

echo "sleep 15 to let alter1 process some rows"
sleep 15

seed1=`get_sc_seed`
#if it is a cluster we can downgrade, if it is single node we can restart
#we can add feature to send('restart') where it will cleanup then exec self
echo "sending downgrade"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('downgrade')"

if [ ! -n "$CLUSTER" ] ; then
    assert_sc_seed $seed1
fi

echo "wait for sc and insert commands above to return"
wait

if [ -n "$CLUSTER" ] ; then
    echo expect the sc command to fail
    if [ -f alter1.failed ] ; then
        echo "Alter t1_2 while inserting"
        cat alter1.out
    fi


    echo wait for the master to restart schema change
    count=0
    while : ; do
        sleep 1
        let count=count+1

        master=`getmaster`
        echo "Querying for new master=$master, count=$count"

        if [ "x$master" != "x" ] ; then
            break
        fi
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select 1'
        if [ $? -ne 0 ] ; then
            echo "db is temporarily unavailable"
        fi

    done

    assert_sc_seed $seed1
    # Only valid for clustered: make sure that the current schema is the t1_1.csc2
    assert_schema t1 t1_1.csc2
else 
    assert_sc_status 0
fi

echo "sleep $REBUILD_DELAY to give time to time to new master to resume/finsh the SC"
sleep $REBUILD_DELAY  

cdb2sql --tabs --host $master ${CDB2_OPTIONS} $dbnm 'exec procedure sys.cmd.send("stat")' > stat2.out

echo "example row"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm 'select * from t1 limit 1'

assert_sc_status 0
assert_vers t1 1
assert_schema t1 t1_2.csc2
do_verify

echo restart master to make sure when it comes up we are still at version 1
kill_restart_node $master 
master=`getmaster`
assert_sc_status 0
assert_vers t1 1
assert_schema t1 t1_2.csc2
do_verify


echo "TESTING KILLING MASTER WHILE PERFORMING REBUILD"
echo start a rebuild that will be resumed after killing current master

#cdb2sql ${CDB2_OPTIONS} $dbnm --host $master "exec procedure sys.cmd.send('debg 600')"
force_delay_master

(cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "rebuild t1 " &> rebuild.out || touch rebuild.failed) &


echo "sleep 15 to let rebuild process some rows"
sleep 15

seed2=`get_sc_seed`

echo "kill master node $master in the middle of rebuild"
kill_restart_node $master 
assert_vers t1 1

if [ -f rebuild.failed ] ; then
    echo "Rebuild failed as expected"
    cat rebuild.out
    rm rebuild.failed
fi

#run inserts, updates, deletes and make sure they are in new btrees

master=`getmaster`
echo "master node now $master"
assert_sc_seed $seed2

echo "about to delete, t=$SECONDS"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "delete from t1 where a % 2 = 1"
echo "about to update, t=$SECONDS"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "update t1 set a = a + 100000 where 1"
echo "about to insert, t=$SECONDS"

insert_records_oneshot 401 600
echo "after insert, t=$SECONDS"

assert_vers t1 1
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "select * from t1 order by c" > allrows_pre.out


echo "give time to master to finish rebuild"
sleep $REBUILD_DELAY

cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t1 order by c" > allrows_post.out

if ! diff allrows_pre.out allrows_post.out ; then
    failexit "pre values are different from post"
fi

assert_vers t1 2
do_verify



echo "TESTING KILLING MASTER WHILE PERFORMING ALTER"
echo 'alter to t1_3 while interrupting by killing master node'

force_delay_master

(cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_3.csc2 ` }" &> alter2.out || touch alter2.failed) &


echo "sleep 15 to let alter2 process some rows"
sleep 15
seed3=`get_sc_seed`

echo "kill master node $master in the middle of alter"
kill_restart_node $master 

if [ -f alter2.failed ] ; then
    echo "Alter t1_3 failed as expected"
    cat alter2.out
fi


#run inserts, updates, deletes and make sure they are in new btrees

master=`getmaster`
echo "master node now $master"
assert_sc_seed $seed3

echo "about to delete, t=$SECONDS"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "delete from t1 where a % 2 = 1"
echo "about to update, t=$SECONDS"
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "update t1 set a = a + 200000 where 1 limit 100"
echo "about to insert, t=$SECONDS"
insert_records_oneshot 601 800
echo "after insert, t=$SECONDS"


assert_vers t1 2
cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "select * from t1 order by c" > allrows_pre.out


cdb2sql --tabs --host $master ${CDB2_OPTIONS} $dbnm 'exec procedure sys.cmd.send("stat")' > stat3.out
if [ $? -ne 0 ] ; then
    failexit "sending stat to new master $master"
fi

scrunning=`grep "schema change running" stat3.out | awk '{print $4}' `
echo "scrunning is $scrunning"


echo "give time for master to finish alter"
sleep $REBUILD_DELAY

cdb2sql ${CDB2_OPTIONS} $dbnm default "select * from t1 order by c" | sed 's/e=3, //' > allrows_post.out

if ! diff allrows_pre.out allrows_post.out ; then
    failexit "pre values are different from post"
fi

echo "version should now be 3"
assert_vers t1 3
do_verify





echo "TESTING KILLING MASTER WHILE PERFORMING ALTER AGAIN"
echo 'alter to t1_2, then to t1_3 again'
cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_2.csc2 ` }"

echo "version should now be 4"
assert_vers t1 4
do_verify

echo 'alter to t1_3 while interrupting by killing master node'

force_delay_master

(cdb2sql ${CDB2_OPTIONS} $dbnm default "alter table t1  { `cat t1_3.csc2 ` }" &> alter3.out || touch alter3.failed) &


echo "sleep 15 to let alter3 process some rows"
sleep 15

seed4=`get_sc_seed`
echo "kill master node $master in the middle of alter"
kill_restart_node $master 

if [ -f alter3.failed ] ; then
    echo "Alter t1_3 failed as expected"
    cat alter3.out
fi


#run inserts, updates, deletes and make sure they are in new btrees

master=`getmaster`
echo "master node now $master"
assert_sc_seed $seed4


echo "version should still be 4 because new master takes a while to startup"
assert_vers t1 4

coproc stdbuf -oL cdb2sql -s ${CDB2_OPTIONS} $dbnm default - 
cppid=$!
echo me: $$ COPROC $cppid fd in ${COPROC[0]} out ${COPROC[1]}

#for the next $REBUILD_DELAY seconds insert more stuff

let TSTOP=$SECONDS+$REBUILD_DELAY
j=800
get_schemachange_status $master
in_schema_change=$?   # SC may not have restarted yet 
while [ $SECONDS -lt $TSTOP ] ; do 
    let j=j+1
    echo "insert into t1(a,b,c) values ($j,'test1$j',$j)" >&${COPROC[1]}
    read -t 0.2 -ru ${COPROC[0]} out
    if [ "$out" != "(rows inserted=1)" ] ; then
        echo "out is $out at t=$SECONDS"
    fi
    get_schemachange_status $master
    rc=$?
    if [ $in_schema_change -eq 1 ] && [ $rc -ne 1 ] ; then
        echo "break out since sc was running and now is stopped"
        break; 
    fi
    in_schema_change=$rc
done 


cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "select * from t1 order by c" > allrows_post2.out
cnt=`wc -l allrows_post2.out | awk '{print $1}'`
target=$((j-300)) #300 rows deleted from the two deletes above
diff=$((target-cnt))
if [ $diff -gt 1 ] ; then
    failexit "count does not match is $cnt but should be $target"
fi

assert_vers t1 5
do_verify



echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x
set -e

# Grab the dbname
dbname=$1
PATH=.:${PATH}


# Retrieve pid on remote machine
function getrmtpid
{
    # print debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset db="$1"
    typeset node="$2"
    if [ -f ${TMPDIR}/${DBNAME}.${node}.pid ] ; then
        cat ${TMPDIR}/${DBNAME}.${node}.pid
    else
        cat ${TMPDIR}/${DBNAME}.pid
    fi
    return 0
}

# Retrieve the size of the remote database
function getrmtsize
{
    # print debug trace
    [[ "$debug" == "1" ]] && set -x

    # args
    typeset node="$1"
    typeset pid="$2"

    # retrieve via ssh if not localhost
    if [ $node != `hostname` ] ; then
        ssh -o StrictHostKeyChecking=no $node "pgrep -a comdb2 | grep ${DBNAME} | cut -f1 -d' ' | xargs ps -o vsz= -p "
    else
        ps -p $pid -o vsz=
    fi
    return 0
}


# Get the node number of the master node
master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbname default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'`

# Get the remote pid
rmtpid=$(getrmtpid $dbname $master)

# Get the remote size of the master
size=$(getrmtsize $master $rmtpid)

# Max size we'll tolerate
maxsz=$(($size * 2))

# Sqlcache test
task=${TESTSBUILDDIR}/leakcheck

# Run the task for a while
$task -d $dbname -i 100000

# Get another size
size2=$(getrmtsize $master $rmtpid)

# Compare size2 against the max
if (( size2 > maxsz )) ; then

    echo "Original size   = $size"
    echo "Post-test size  = $size2"
    echo "Maximum allowed = $maxsz"
    echo "Master has a leak!"
    exit 1

fi

echo "Original size  = $size"
echo "Post-test size  = $size2"
echo "Maximum allowed = $maxsz"
echo "Success!"

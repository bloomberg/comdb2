#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt
export tablecount=50

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function randomtable
{
    [[ $debug == "1" ]] && set -x
    typeset table=$(( RANDOM % tablecount ))
    echo "t$table"
}

function stop_cluster
{
    [[ $debug == "1" ]] && set -x
    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $node "exec procedure sys.cmd.send(\"exit\")"
    done
    sleep 5
}

function create_tables
{
    [[ $debug == "1" ]] && set -x
    typeset func="create_tables"
    write_prompt $func "Running $func"

    i=0
    while [[ $i -lt $tablecount ]]; do
        drop_table t$i
        let i=i+1
    done

    i=0
    while [[ $i -lt $tablecount ]]; do
        tablestr="create table t$i (a int, b blob, c blob, d blob"
        j=0
        while [[ $j -lt $i ]]; do
            tablestr="${tablestr},t$j int"
            let j=j+1
        done
        tablestr="${tablestr})"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "$tablestr"
        let i=i+1
    done
}

# Table was corrupt on a replicant after this scenario:
#
# 1) master is downgraded because machine is being turned
# 2) table is fastinit'd
# 3) the former master bounces 
# 4) profit
#
# Recovery on the bounced master contained the pagelsn of the corrupt page
function select_from_node
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_from_node"
    write_prompt $func "Running $func"
    typeset node=$1

    i=0
    while [[ $i -lt $tablecount ]]; do
        x=$($CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select * from t${i}" 2>&1)
            [[ $x == *"unknown error"* ]] && failexit "$x"
        let i=i+1
    done
}

function verify_up
{
    [[ $debug == "1" ]] && set -x
    typeset func="verify_up"
    write_prompt $func "Running $func"
    typeset node=$1
    typeset count=0
    typeset r=1
    while [[ "$r" -ne "0" && "$count" -lt 2000 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1" >/dev/null 2>&1
        r=$?
        [[ $r != 0 ]] && sleep 1
        let count=count+1
    done
    [[ $r != 0 ]] && failexit "node $node did not recover in time"
}

function downgrade
{
    [[ $debug == "1" ]] && set -x
    typeset func="downgrade"
    typeset node=$(get_master)
    typeset count=0
    typeset foundmaster=0
    typeset maxcount=600
    typeset initialmaster=0
    write_prompt $func "Running $func $node"

    x=$(get_master)
    while [[ "$CLUSTER" != *"$x"* && "$count" -lt "$maxcount" ]]; do
        sleep 1
        x=$(get_master)
        let count=count+1
    done

    [[ "$count" -ge "$maxcount" ]] && failexit "Could not find master"
    initialmaster=$x

    while [[ "$x" == "$initialmaster" && "$count" -lt $maxcount ]]; do
        x=$(get_master)
        while [[ "$CLUSTER" != *"$x"* && "$count" -lt "$maxcount" ]]; do
            sleep 1
            x=$(get_master)
            let count=count+1
        done
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS --host $x $DBNAME "EXEC PROCEDURE sys.cmd.send('downgrade')"
        sleep 1
        x=$(get_master)
        while [[ "$CLUSTER" != *"$x"* && "$count" -lt "$maxcount" ]]; do
            sleep 1
            x=$(get_master)
        done

        [[ "$x" != "$node" ]] && foundmaster=1
        let count=count+1
    done

    [[ "$count" -ge "$maxcount" ]] && failexit "Could not downgrade master"
}


function truncate_table
{
    [[ $debug == "1" ]] && set -x
    typeset func="truncate_table"
    typeset table=$1
    typeset count=0
    typeset r=1
    write_prompt $func "Running $func $table"
    while [[ "$r" != 0 && "$count" -lt 600 ]]; do
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "truncate $table"
        r=$?
        [[ $r != 0 ]] && sleep 1
        let count=count+1
    done
    [[ "$r" != "0" ]] && failexit "Error truncating table"
}

function truncate_random_tables
{
    typeset count=$1
    typeset func="truncate_random_tables"
    write_prompt $func "Running $func $count"
    i=0
    while [[ $i -lt $count ]]; do
        table=$(randomtable)
        truncate_table $table
        let i=i+1
    done
}

function truncate_all_tables
{
    i=0
    while [[ $i -lt $tablecount ]]; do
        truncate_table t$i
        let i=i+1
    done
}

function add_to_all_tables
{
    [[ $debug == "1" ]] && set -x
    typeset func="add_to_all_tables"
    write_prompt $func "Running $func"
    i=0
    while [[ $i -lt $tablecount ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t$i (a) values(1)" >/dev/null 2>&1
        let i=i+1
    done
}

function truncate_loop
{
    [[ $debug == "1" ]] && set -x
    while [[ ! -f $stopfile ]]; do
        truncate_random_tables 10
    done
}

function insert_loop
{
    [[ $debug == "1" ]] && set -x
    while [[ ! -f $stopfile ]]; do
        add_to_all_tables
        sleep 1
    done
}

function truncate_and_insert_loop
{
    [[ $debug == "1" ]] && set -x
    while [[ ! -f $stopfile ]]; do
        truncate_random_tables $table 10
        add_to_all_tables
        sleep 5
    done
}

function pushnext
{
    [[ $debug == "1" ]] && set -x
    i=0
    node=$(get_master)

    while [[ $i -lt 4 ]]; do
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS --host $node $DBNAME "EXEC PROCEDURE sys.cmd.send('pushnext')"
        let i=i+1
        sleep 4
    done
}

function downgrade_loop
{
    [[ $debug == "1" ]] && set -x
    while [[ ! -f $stopfile ]]; do
        node=$(get_master)
        while [[ "$CLUSTER" != *"$node"* ]]; do
            sleep 1
            node=$(get_master)
        done
        #pushnext
        downgrade
        bounce_node $node
        verify_up $node
        select_from_node $node
    done
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    typeset maxtime=1200
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))

    write_prompt $func "Running $func"
    create_tables

    rm $stopfile
    truncate_loop &
    insert_loop &
    #truncate_and_insert_loop &
    downgrade_loop &

    while [[ ! -f $stopfile && "$(date +%s)" -lt $endtime ]]; do
        for node in $CLUSTER; do
            verify_up $node
        done
        sleep 1
    done

    # Different thread failed the test
    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait
}

[[ -z "$CLUSTER" ]] && failexit "This test requires a cluster"

run_test
stop_cluster
wait
echo "Success"

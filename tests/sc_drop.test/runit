#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

#kill any background jobs remaining upon exiting
trap 'kill $(jobs -pr)' SIGINT SIGTERM EXIT

# Number of records I will add.
nrecs=100
max_iter=10

# Max number of schema changes
max_nusc=100


insert_into_t1() {
    while [ $? -eq 0 ] ; do
        cdb2sql ${CDB2_OPTIONS} $DBNAME default "insert into t1 values($RANDOM)"
    done &> ins.out
}

insert_into_t2() {
    local cnt=0
    while [ $cnt -lt $nrecs ] ; do
        echo "insert into t2 values($RANDOM)"
        let cnt=cnt+1
    done | cdb2sql ${CDB2_OPTIONS} $DBNAME default - &> ins2.out
    assertcnt t2 $nrecs
}

function getmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

send_to_all_nodes() {
    for node in $cluster ; do 
        cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node "exec procedure sys.cmd.send('$@')"
    done
}


test_update_delay_writes() {
    echo test_update_delay_writes make sure that drop table is stuck on writes waiting for table lock
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "create table t3 (i int primary key)" &> create1.out

    cdb2sql ${CDB2_OPTIONS} $DBNAME default "insert into t3 select * from generate_series(1,100)"
    assertcnt t3 100

    master=`getmaster`
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $master "exec procedure sys.cmd.send('bdb setattr DELAY_WRITES_IN_RECORD_C 40')"

    echo 'update will take 100 * 40ms = 4s'
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "update t3 set i=i+1 where 1" &> upd1.out &
    upd1=$!
    echo update will get tablelock and so will lock out 'drop tbl' until update is completed
    sleep 1
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "drop table t3"
    if [ $? -ne 0 ] ; then
        failexit 'drop failed'
    fi

    wait
    echo '(rows updated=100)' > upd1.exp
    if ! diff upd1.out upd1.exp ; then
        failexit "upd1.out upd1.exp differ"
    fi
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $master "exec procedure sys.cmd.send('bdb setattr DELAY_WRITES_IN_RECORD_C 0')"
}

test_update_delay_done() {
    echo test_update_delay_done make sure that process_this_session after dropping returns error correctly
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "create table t3 (i int primary key)"
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "insert into t3 select * from generate_series(1,100)"
    assertcnt t3 100

    master=`getmaster`
    send_to_all_nodes "bdb setattr DELAY_AFTER_SAVEOP_DONE 9000"
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "update t3 set i=i+1 where 1" &> upd2.out &
    upd2=$!
    sleep 1
    echo reset to 0 so drop tbl can go through without sleeping
    send_to_all_nodes "bdb setattr DELAY_AFTER_SAVEOP_DONE 0"
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "drop table t3"
    if [ $? -ne 0 ] ; then
        failexit 'drop failed'
    fi

    echo saveop OSQL_DONE will be sleeping few for the update meanwhile we will drop tbl
    wait

    echo '[update t3 set i=i+1 where 1] failed with rc 304 no such table "t3"' > upd2.exp
    if ! diff upd2.out upd2.exp ; then
        failexit "upd2.out upd2.exp differ"
    fi
}

test_update_delay_usedb() {
    echo test_update_delay_usedb make sure that all the inserts subsequent to usedb are processed correctly and that process this session returns error correctly

    cdb2sql ${CDB2_OPTIONS} $DBNAME default "create table t3 (i int primary key)"
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "insert into t3 select * from generate_series(1,100)"
    assertcnt t3 100

    master=`getmaster`
    echo delay after usedb on master
    send_to_all_nodes "bdb setattr DELAY_AFTER_SAVEOP_USEDB 3000"

    cdb2sql ${CDB2_OPTIONS} $DBNAME default "update t3 set i=i+1 where 1" &> upd3.out &
    upd3=$!
    sleep 1
    echo reset to 0 so drop tbl can go through without sleeping
    send_to_all_nodes "bdb setattr DELAY_AFTER_SAVEOP_USEDB 0"
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "drop table t3"
    if [ $? -ne 0 ] ; then
        failexit 'drop failed'
    fi

    echo saveop OSQL_USEDB will be sleeping 3s for the update meanwhile we will drop tbl
    wait

    echo '[update t3 set i=i+1 where 1] failed with rc -3 no such table: t3' > upd3.exp
    if ! diff upd3.out upd3.exp ; then if ! diff upd3.out upd2.exp ; then
        failexit "upd3.out and [upd3.exp , upd2.exp] differ"
    fi; fi

}

do_reads() {
    i=$1
    out=sel_$i.out 
    > $out
    while [ ! -f can_stop_now.txt ] ; do 
        cdb2sql ${CDB2_OPTIONS} $DBNAME default "select * from t" ; 
    done &>> $out
}

do_updates() {
    i=$1
    out=upd_$i.out 
    > $out
    while [ ! -f can_stop_now.txt ] ; do 
        cdb2sql ${CDB2_OPTIONS} $DBNAME default "update t set a=a+1 where a > 3000 limit 100" ; 
    done &>> $out
}

do_deletes() {
    i=$1
    out=del_$i.out 
    > $out
    while [ ! -f can_stop_now.txt ] ; do 
        cdb2sql ${CDB2_OPTIONS} $DBNAME default "delete from t where a < 3000 limit 10" ; 
    done &>> $out
}

# test selects updates deletes against a tbl which is being dropped
# db should not crash for access to bad/old table pointers
test_sel_upd_del() {
    cdb2sql ${CDB2_OPTIONS} $DBNAME default << EOF
drop table t;
create table t(a int);\$\$
insert into t select value from generate_series(1, 5000);
insert into t select value from generate_series(1, 5000);
insert into t select value from generate_series(1, 5000);
insert into t select value from generate_series(1, 5000);
insert into t select value from generate_series(1, 5000);
EOF
    assertcnt t 25000

    for i in $(seq 1 5); do
        do_reads $i &
        do_updates $i &
        do_deletes $i &
    done
    sleep 5
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "drop table t"

    touch can_stop_now.txt
    wait
    rm can_stop_now.txt

    set -e
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "select 1"
    set +e
}


# here is where we begin the test
cluster=`$CDB2SQL_EXE --tabs ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
if [ "x$cluster" == "x" ] ; then
    failexit "cluster variable is empty"
fi


t=0
while [ $t -lt ${max_iter} ] ; do
    test_sel_upd_del
    set -e
    send_to_all_nodes "stat"
    set +e
    let t=t+1
done

cdb2sql ${CDB2_OPTIONS} $DBNAME default "create table t1 (i int)"

insert_into_t1 &
ins1=$!

t=0
while [ $t -lt ${max_iter} ] ; do
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "create table t2 (i int)"
    insert_into_t2
    cdb2sql ${CDB2_OPTIONS} $DBNAME default "drop table t2"
    let t=t+1
done

if `kill -0 $ins1` ; then
    echo insert still running -- all is well
    kill $ins1
else
    failexit "insert into t1 has failed"
fi

cdb2sql ${CDB2_OPTIONS} $DBNAME default "update t3 set i=i+1 where 1" &> upd0.out
echo '[update t3 set i=i+1 where 1] failed with rc -3 no such table: t3' > upd0.exp
if ! diff upd0.out upd0.exp ; then
    failexit "upd0.out upd0.exp differ"
fi

send_to_all_nodes "debg 600"
send_to_all_nodes "ndebg 600"

t=0
while [ $t -lt ${max_iter} ] ; do
    test_update_delay_writes
    let t=t+1
done

t=0
while [ $t -lt ${max_iter} ] ; do
    test_update_delay_done
    let t=t+1
done

t=0
while [ $t -lt ${max_iter} ] ; do
    test_update_delay_usedb
    let t=t+1
done



#remove trap
trap - INT TERM EXIT

echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

# Verify that we do not get sizes from stale table files

dbnm=$1
set -e


##### Test 1: truncate: all versions change
cdb2sql ${CDB2_OPTIONS} $dbnm default 'CREATE TABLE tbl1 options rec none, blobfield none { tag ondisk { longlong a1 blob b1 } keys {dup "KEY_a1" = a1} }'
cdb2sql ${CDB2_OPTIONS} $dbnm default "INSERT INTO tbl1 SELECT value, randomblob(128) FROM generate_series(1, 49999)"

# get table size after flushing changes to disk
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('flush')"
oldsize=$(cdb2sql -m -tabs ${CDB2_OPTIONS} $dbnm default "SELECT value FROM comdb2_metrics WHERE name = 'diskspace'")
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('stat size')" | grep tbl1 >>actual

# truncate this table and get the size again. This time size should be smaller.
cdb2sql ${CDB2_OPTIONS} $dbnm default "TRUNCATE TABLE tbl1";
newsize=$(cdb2sql -m -tabs ${CDB2_OPTIONS} $dbnm default "SELECT value FROM comdb2_metrics WHERE name = 'diskspace'")

is_smaller=$(cdb2sql -tabs ${CDB2_OPTIONS} $dbnm default "SELECT ($oldsize > $newsize) AS is_smaller")

echo "diskspace before truncate $oldsize, after truncate $newsize"

if [ "$is_smaller" -ne "1" ]; then
    echo "diskspace does not come down?" >&2
    exit 1
fi

# Reinsert data
cdb2sql ${CDB2_OPTIONS} $dbnm default "INSERT INTO tbl1 SELECT value, randomblob(128) FROM generate_series(1, 49999)"
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('flush')"
sleep 5
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('stat size')" | grep tbl1 >>actual

##### Test 2: instant sc: same schema, nothing changes. stat size should not change at all
cdb2sql ${CDB2_OPTIONS} $dbnm default 'ALTER TABLE tbl1 { tag ondisk { longlong a1 blob b1 } keys {dup "KEY_a1" = a1} }'
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('stat size')" | grep tbl1 >>actual

#### Test 3: instant sc: new column. stat size should not change at all
cdb2sql ${CDB2_OPTIONS} $dbnm default 'ALTER TABLE tbl1 { tag ondisk { longlong a1 int a2 null=yes blob b1 } keys {dup "KEY_a1" = a1} }'
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('stat size')" | grep tbl1 >>actual

#### Test 4: instant sc: new blob column. stat size should not change except the new blob column
cdb2sql ${CDB2_OPTIONS} $dbnm default 'ALTER TABLE tbl1 { tag ondisk { longlong a1 int a2 null=yes blob b1 blob b2 null=yes} keys {dup "KEY_a1" = a1} }'
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('stat size')" | grep tbl1 >>actual

#### Test 5: instant sc: new blob column, and change the order of blob columns. stat size should display correctly especially for b1
cdb2sql ${CDB2_OPTIONS} $dbnm default 'ALTER TABLE tbl1 { tag ondisk { longlong a1 int a2 null=yes blob b3 null=yes blob b2 null=yes blob b1} keys {dup "KEY_a1" = a1} }'
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('stat size')" | grep tbl1 >>actual

#### Test 6: new index. stat size should not change except the new index
cdb2sql ${CDB2_OPTIONS} $dbnm default 'ALTER TABLE tbl1 { tag ondisk { longlong a1 int a2 null=yes blob b3 null=yes blob b2 null=yes blob b1} keys {dup "KEY_a2" = a2 dup "KEY_a1" = a1} }'
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('flush')"
sleep 5
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('stat size')" | grep tbl1 >>actual

#### Test 7: rebuild
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "REBUILD tbl1"
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('flush')"
sleep 5
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "EXEC PROCEDURE sys.cmd.send('stat size')" | grep tbl1 >>actual

#### Test 8: Make it a time partition
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "ALTER TABLE tbl1 PARTITIONED BY TIME PERIOD 'daily' RETENTION 3 start '2024-01-01'"
cdb2sql -m ${CDB2_OPTIONS} $dbnm default "SELECT name, shardname, size/1000000 as sizemb FROM comdb2_timepartshards" | grep tbl1 >>actual

diff actual expected

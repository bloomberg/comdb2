#!/usr/bin/env bash
bash -n "$0" | exit 1

CERTDIR=${TESTDIR}/certs

# Generate Java key store and trust store
rm -f ${CERTDIR}/client-keystore.pkcs12 ${CERTDIR}/keystore ${CERTDIR}/truststore

openssl pkcs12 -export \
        -in ${CERTDIR}/client.crt \
        -inkey ${CERTDIR}/client.key \
        -name cdb2clikey \
        -passout pass:cdb2jdbctest \
        -out ${CERTDIR}/client-keystore.pkcs12
keytool -noprompt -importkeystore \
        -srckeystore ${CERTDIR}/client-keystore.pkcs12 \
        -srcstoretype pkcs12 \
        -srcstorepass cdb2jdbctest \
        -destkeystore ${CERTDIR}/keystore \
        -deststoretype JKS \
        -deststorepass cdb2jdbctest
keytool -noprompt -importcert \
        -alias cdb2ca \
        -file ${CERTDIR}/root.crt \
        -keystore ${CERTDIR}/truststore \
        -storepass cdb2jdbctest

chmod 644 ${CERTDIR}/keystore ${CERTDIR}/truststore

export envSkipTests='false'
export envSSLTestDatabase=${DBNAME}
export envTestDatabase=${SECONDARY_DBNAME}
export envSSLCertPath=${CERTDIR}
export envSSLCertPass='cdb2jdbctest'

if [ -n "${CLUSTER}" ]; then
    export envTestCluster=`echo ${CLUSTER} | sed 's/ /,/g'`
else
    export envTestCluster=localhost
fi

set -x
mvn -f ${SRCHOME}/cdb2jdbc/pom.xml \
        -Dmaven.javadoc.skip=true \
        -Denv.skipTests=${envSkipTests} \
        -DargLine="-Dcdb2jdbc.test.database=${envTestDatabase} \
        -Dcdb2jdbc.test.cluster=${envTestCluster} \
        -Dcdb2jdbc.test.ssldatabase=${envSSLTestDatabase} \
        -Dcdb2jdbc.test.sslcertpath=${envSSLCertPath} \
        -Dcdb2jdbc.test.sslcertpass=${envSSLCertPass}" \
clean install

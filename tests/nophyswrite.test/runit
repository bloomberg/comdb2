#!/usr/bin/env bash
bash -n "$0" | exit 1

[[ $debug == "1" ]] && set -x

# Grab my database name.
export repsleep=5
export repname=rep${DBNAME}
export repdir=${DBDIR}/$repname
export replog=$repdir/log.txt
export COPYCOMDB2_EXE=${BUILDDIR}/db/copycomdb2

function write_prompt
{
    typeset func=$1
    echo "[$func] $2"
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    typeset f=$1
    write_prompt $func "$f failed: $2"
    kill -9 $(cat $repdir/${repname}.pid)
    exit -1
}

function make_phys_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="make_phys_rep"
    myhost=$(hostname)

    mkdir -p $repdir

    if [[ -z "$CLUSTER" ]]; then
        cl="-y @localhost"
    else
        cl="-y @$(echo $CLUSTER | tr ' ' ',')"
    fi

    if [[ -n "$CLUSTER" ]]; then
        if [[ "$CLUSTER" =~ .*$myhost.* ]]; then
            rmt=""
        else
            clarray=($CLUSTER)
            rmt="${clarray[0]}:"
        fi
    fi

    write_prompt $func "Creating physical rep $repname"
    ${COPYCOMDB2_EXE} -x ${COMDB2_EXE} -H $repname $cl $rmt${DBDIR}/${DBNAME}.lrl $repdir $repdir
    if [ ! $? -eq 0 ]; then
        write_prompt $func "Copycomdb2 failed"
        exit 1
    fi

    write_prompt $func "Starting replicant database, replog is $replog"
    ( timeout --kill-after=5s $TEST_TIMEOUT $COMDB2_EXE $repname -lrl $repdir/${repname}.lrl -pidfile $repdir/${repname}.pid >$replog 2>&1) &
}

function setup
{
    [[ $debug == "1" ]] && set -x
    typeset func="setup"

    make_phys_rep
    sleep $repsleep
}

function tear_down
{
    kill -9 $(cat $repdir/${repname}.pid)
}

function run_tests
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "CREATE TABLE t1 (a INT)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1(a) values(1)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1(a) values(1)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "INSERT INTO t1(a) values(1)"

    cnt=0
    # Wait for 3 values to propogate to physical replicant
    while [[ "$cnt" != "3" ]]; do
        cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1")
        sleep 1
    done

    # Try to insert against physical replicant 
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "insert into t1(a) values(4)"
    [[ $? == 0 ]] && failexit "Database allowed inserts against physical replicant"

    # Make sure there are still only 3 values
    cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1 where a = 1")
    [[ "$cnt" != "3" ]] && failexit "Database insert against physical replicant changed count"

    # Try to delete against physical replicant 
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "delete from t1 where 1"
    [[ $? == 0 ]] && failexit "Database allowed deletes against physical replicant"

    # Make sure there are still only 3 values
    cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1 where a = 1")
    [[ "$cnt" != "3" ]] && failexit "Database deletes against physical replicant changed count"

    # Try to update a physical replicant
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "update t1 set a = 4 where 1"
    [[ $? == 0 ]] && failexit "Database allowed updates against physical replicant"

    # Make sure there are still only 3 values
    cnt=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $repname --host localhost "select count(*) from t1 where a = 1")
    [[ "$cnt" != "3" ]] && failexit "Database updates against physical replicant changed count"
}

setup
run_tests
tear_down

echo "Success!"

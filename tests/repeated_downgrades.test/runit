#!/usr/bin/env bash
bash -n "$0" | exit 1

set -e
set -x
source ${TESTSROOTDIR}/tools/runit_common.sh


inscript() {
   # keeping this here for reference: this detected the issue before i moved on to have a 
   # c++ task to run the queries and expos more issues

   # need hasql and -maxretries otherwise we can get:
   # 'failed with rc -1 cdb2_run_statement_typed_int: Cannot connect to db'
    c2s="cdb2sql ${CDB2_OPTIONS} --delim=# --maxretries=100000 ${DBNAME} default"

    ha_assertcnt()
    {
        if [[ $# != 2 ]] && [[ $# != 3 ]] ; then 
            failexit "Expecting 2 (opt 3) parameters but instead was passed $#"
        fi
        local tbl=$1
        local target=$2
        local comment=${3:+"($3)"}
        local cnt=$(echo "set hasql on # select count(*) from $tbl" | $c2s --script --tabs -v 2> cnt.out)
        if [ $? -ne 0 ] ; then
            echo "haassertcnt: select error"
        fi

        #echo "count is now $cnt"
        if [[ $cnt != $target ]] ; then
            failexit "tbl $tbl count is now $cnt but should be $target $comment"
        fi
    }

    inserter()
    {
        tbl=$1
        N=10
        for i in {1..100} ; do
            echo "round $i"
            echo "set hasql on # insert into $tbl select * from generate_series limit $N" | $c2s -v 2> ins_$tbl.out
            ha_assertcnt $tbl $N
            echo "set hasql on # delete from $tbl" | $c2s -v 2> del_$tbl.txt
            ha_assertcnt $tbl 0
        done
    }


    declare -a pids
    for i in {1..10} ; do
        inserter tt$i &
        pids[$i]=$!
    done

    for i in {1..10} ; do
        wait ${pids[$i]}
    done
}


downgrade()
{
    set +e
    dbname=$1

    while true; do
        master=`getmaster`
        cdb2sql ${CDB2_OPTIONS} --host $master ${DBNAME} "exec procedure sys.cmd.send('downgrade')" 2>&1
#       for node in $CLUSTER ; do
#            sleep 0.9
#            echo "set hasql on # exec procedure sys.cmd.send('downgrade')" | cdb2sql ${CDB2_OPTIONS} --maxretries 10000 --delim=# --host $node $dbname
#       done
        sleep 2
    done
}

for i in {0..9} ; do
    cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "create table tt${i} (i int primary key)"
done

echo "Downgrade continuously"
downgrade $DBNAME &> downgrade.out &
dgpid=$!
trap "kill $dgpid" INT EXIT

${TESTSBUILDDIR}/inscntdel --dbname $DBNAME --numthreads 10 --iterations 1000

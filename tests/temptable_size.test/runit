#!/usr/bin/env bash
bash -n "$0" | exit 1

#set -e
debug=1
[[ "$debug" != 0 ]] && set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

# Testcase variables
unset CLUSTER
DBNAME=ttsz$TESTID
DBDIR=$TESTDIR/$DBNAME
CDB2_CONFIG=$DBDIR/comdb2db.cfg
CDB2_OPTIONS="--cdb2cfg $CDB2_CONFIG"
export dbpid=""

function call_unsetup()
{
    local successful=$1
    COMDB2_UNITTEST=0 $TESTSROOTDIR/unsetup $successful &> $TESTDIR/logs/$DBNAME.unsetup
}

function setup_db()
{
    COMDB2_UNITTEST=0 $TESTSROOTDIR/setup &> $TESTDIR/logs/$DBNAME.setup
}

function create_table()
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME "create table if not exists t1(a int, b blob)"
    [[ $? != 0 ]] && failexit "Failed to create table t1"
}

function low_size()
{
    echo "Creating an osql/bplog schedule which will allow the temptable to be recycled"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME "insert into t1 (a, b) values(1, randomblob(1024*256)), (1, randomblob(1024*256))"
    [[ $? != 0 ]] && failexit "Failed to insert into table t1"

    lsofout=$(lsof -p $dbpid | egrep deleted | awk '{print $7}')
    for sz in $lsofout ; do
        [[ "$sz" -eq "65536" ]] && failexit "recreated small temptable"
        [[ "$sz" -gt "1048576" ]] && failexit "large temptable persisted"
    done
    echo "Temptable system correctly retained small temptables"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME "exec procedure sys.cmd.send('temptable_clear')"
}

function high_size()
{
    echo "Creating an osql/bplog schedule which will recreate the temptable"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME "insert into t1 (a, b) values(1, randomblob(1024*1024)), (1, randomblob(1024*1024))"
    [[ $? != 0 ]] && failexit "Failed to insert into table t1"

    lsofout=$(lsof -p $dbpid | egrep deleted | awk '{print $7}')
    for sz in $lsofout ; do
        [[ "$sz" -gt "1048576" ]] && failexit "large temptable persisted"
        [[ "$sz" -ne "65536" ]] && failexit "Failed to recreate temptable"
    done
    echo "Temptable system correctly recreated large temptables"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME "exec procedure sys.cmd.send('temptable_clear')"
}

function run_test()
{
    low_size
    high_size
}

# Trap to call_unsetup if the test exits
trap "call_unsetup \"0\"" INT EXIT

setup_db
dbpid=$(cat ${TMPDIR}/${DBNAME}.pid)
create_table
run_test
call_unsetup 1

echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

function verify_no_stacks
{
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from comdb2_stringrefs where stack != '(no-stack)'")
    [[ "$x" -gt "0" ]] && failexit "stringrefs table contains stacks while disabled"
    echo "verify-no-stacks correctly found no stacks in stringrefs table"

    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from comdb2_stringrefs where stack = '(no-stack)'")
    [[ "$x" -eq "0" ]] && failexit "stringrefs table contains no strings without stacks"
    echo "verify-no-stacks correctly found $x stringrefs in stringrefs table with no stacks"

    echo "comdb2_stringrefs:"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from comdb2_stringrefs"
}

function verify_some_stacks
{
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from comdb2_stringrefs where stack != '(no-stack)'")
    [[ "$x" -eq "0" ]] && failexit "stringrefs table contains no stacks while enabled"
    echo "verify-some-stacks found $x stringregs in stringrefs table with stacks"

    echo "comdb2_stringrefs:"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from comdb2_stringrefs"
}

function toggle_stacks
{
    if [[ -n "$CLUSTER" ]]; then
        for node in $CLUSTER ; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "put tunable 'stack_string_refs' 1"
        done
    else
        node=$(hostname)
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "put tunable 'stack_string_refs' 1"
    fi
}

function stat_strref
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('stat strref')"
}

function run_test
{
    typeset func="run_test"
    write_prompt $func "Running $func"
    verify_no_stacks
    toggle_stacks
    verify_some_stacks
    stat_strref
}

run_test 

echo "Success"

//tbl_name='hilodb_historical'

schema
{
  // The object id generating this high or low, e.g. 'AAPL E
  // \0'. Stored as ints rather than chars in case there's a
  // null in the exchange byte.
  int objid1 // bytes 1-4 of objid
  int objid2 // bytes 5-8 of objid
  int objid3 // bytes 9-12 of objid

  // Security's name. The name and parseKey are stored for each record
  // - duplicates this data but hopefully will lead to faster reads
  cstring name[29]

  // Security's parse key
  cstring parseKey[20]

  // Common operation is to look up by exchange, so store
  // exchange separately in addition to objid. e.g. 'US'
  u_short exchange

  // Is this a high or a low entry
  u_short isHigh

  // The date and time at which the hilo happened, in NY time
  datetime dt

  // The high or low for this security on this date
  double price

  // Bit 1: is the time valid, i.e. can it be displayed. We will not
  // always have a valid time, e.g. on backfilled data.
  u_short flags
}


tag "STANDARD"
{
  int objid1
  int objid2
  int objid3
  cstring name[29]
  cstring parseKey[20]
  u_short exchange
  u_short isHigh
  datetime dt
  double price
  u_short flags
}

keys
{
  // Date is always part of the key, as we always want to be
  // getting a max of 52 week's worth of data, and the table may
  // contain a little more than this (as backend process will
  // periodically remove older data)
  "KEY_OBJID_HIGH_DATE" = objid1+objid2+objid3 + <DESCEND>dt + isHigh
  dup "KEY_EXCHANGE_DATE_HIGH" = exchange + <DESCEND>dt + isHigh + objid1+objid2+objid3
  dup "KEY_DATE_EXCHANGE_HIGH" = <DESCEND>dt + exchange + isHigh
  dup "KEY_EXCHANGE_NAME" = exchange + name + <DESCEND>dt
  dup "KEY_EXCHANGE_PARSEKEY" = exchange + parseKey + <DESCEND>dt
}



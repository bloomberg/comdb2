#!/usr/bin/env bash

# args
# <dbname> <dbdir> <testdir> <autodbname> <autodbnum> <cluster> <task>
echo "main db vars"
vars="TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR CDB2_OPTIONS CDB2_CONFIG"
for required in $vars; do
    q=${!required}
    echo "$required=$q"
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        exit 1
    fi
done

dbname=$1
srcdbname=srcdb$DBNAME
dbdir=$DBDIR
testdir=$TESTDIR
cdb2config=$CDB2_CONFIG

DBNAME=$srcdbname
DBDIR=$TESTDIR/$DBNAME
#effectively srcdb config -- needed to setup srcdb
CDB2_CONFIG=$DBDIR/comdb2db.cfg
CDB2_OPTIONS="--cdb2cfg $CDB2_CONFIG"

echo "remote db vars"
vars="TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR CDB2_OPTIONS CDB2_CONFIG"
for required in $vars; do
    q=${!required}
    echo "$required=$q"
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        exit 1
    fi
done

#setup remode db
$TESTSROOTDIR/setup &> $TESTDIR/logs/$DBNAME.setup

cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "INSERT INTO t VALUES(1, 99)" >> output.actual 2>&1
cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "INSERT INTO t VALUES(2, 98)" >> output.actual 2>&1
cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "INSERT INTO \"select\" VALUES(3, 97)" >> output.actual 2>&1
cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "INSERT INTO \"select\" VALUES(4, 96)" >> output.actual 2>&1

cdb2sql --cdb2cfg ${cdb2config} $dbname default "INSERT INTO t VALUES(5, 95)" >> output.actual 2>&1
cdb2sql --cdb2cfg ${cdb2config} $dbname default "INSERT INTO t VALUES(6, 94)" >> output.actual 2>&1
cdb2sql --cdb2cfg ${cdb2config} $dbname default "INSERT INTO \"select\" VALUES(7, 93)" >> output.actual 2>&1
cdb2sql --cdb2cfg ${cdb2config} $dbname default "INSERT INTO \"select\" VALUES(8, 92)" >> output.actual 2>&1

cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "SELECT t1.id, t1.\"order\" FROM t t1 WHERE t1.\"order\" = 99" >> output.actual 2>&1
cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "SELECT t1.id, t1.\"order\" FROM LOCAL_${dbname}.t t1 WHERE t1.\"order\" = 95" >> output.actual 2>&1

cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "SELECT t1.id FROM LOCAL_${dbname}.t t1 INNER JOIN \"select\" ON t1.\"order\" = \"select\".id WHERE t1.\"order\" = 95" >> output.actual 2>&1

cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "SELECT s1.id, s1.\"order\" FROM \"select\" s1 WHERE s1.\"order\" = 97" >> output.actual 2>&1
cdb2sql --cdb2cfg ${CDB2_CONFIG} $srcdbname default "SELECT s1.id, s1.\"order\" FROM LOCAL_${dbname}.\"select\" s1 WHERE s1.\"order\" = 93" >> output.actual 2>&1

# validate results
testcase_output=$(cat output.actual)
expected_output=$(cat output.expected)
if [[ "$testcase_output" != "$expected_output" ]]; then

   # print message
   echo "  ^^^^^^^^^^^^"
   echo "The above testcase (${testcase}) has failed!!!"
   echo " "
   echo "Use 'diff <expected-output> <my-output>' to see why:"
   echo "> diff ${PWD}/{output.actual,output.expected}"
   echo " "
   diff output.actual output.expected
   echo " "

   successful=0
else
   successful=1
fi

$TESTSROOTDIR/unsetup $successful &> $TESTDIR/logs/$DBNAME.unsetup

if (( $successful != 1 )) ; then
   echo "FAILURE"
   exit 1
fi

echo "SUCCESS"

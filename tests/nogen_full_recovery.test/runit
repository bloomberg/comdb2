#!/usr/bin/env bash
bash -n "$0" | exit 1

export debug=1

[[ "$debug" == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/runit_common.sh

# Create-time will be generation 2
# txn_regop_gen (with generation) records               : rectype 2016
# a checkpoint (create-time)                            : rectype 2011
#
# Copy-time will be generation 2 / different rectypes
# some number of txn_regop (no generation) records      : rectype 2010
# a recovery-checkpoint                                 : rectype 2020
#
# Run-time will be generation 3
# some number of txn_regop_gen records                  : rectype 2016
# a ckp-record                                          : rectype 2011
#
function verify_create_recovery_records
{
    export done_create=0
    export done_copy=0

    typeset create_commit=0
    typeset create_chkpnt=0
    typeset create_generation=-1

    typeset copy_commit=0
    typeset copy_chkpnt=0
    typeset copy_generation=-1

    typeset run_commit=0
    typeset run_chkpnt=0
    typeset run_generation=-1

    $CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select lsn, rectype, generation from comdb2_transaction_logs where rectype = 2016 or rectype = 2011 or rectype = 2010 or rectype = 2020" | while read lsn rectype generation ; do

        # Create phase - expect 2016 and 2011
        if [[ "$done_create" == 0 ]]; then

            if [[ "$rectype" != "2016" && "$rectype" != "2011" ]]; then

                if [[ "$create_commit" == 0 || "$create_chkpnt" == 0 ]]; then

                    echo "Found invalid create-phase rectype $rectype at lsn $lsn"
                    failexit "Invalid rectype in create"

                else

                    echo "Finished create-phase generation $create_generation"
                    echo "Counted $create_commit commits and $create_chkpnt checkpoints"
                    export done_create=1

                    if [[ "$rectype" == "2010" ]]; then
                        let copy_commit=copy_commit+1
                    fi

                    if [[ "$rectype" == "2020" ]]; then
                        let copy_chkpnt=copy_chkpnt+1
                    fi
                fi

            else

                if [[ "$rectype" == "2016" ]]; then
                    let create_commit=create_commit+1
                fi

                if [[ "$rectype" == "2011" ]]; then
                    let create_chkpnt=create_chkpnt+1
                fi

                if [[ "$generation" != "NULL" ]]; then

                    if [[ "$create_generation" == -1 ]]; then
                        create_generation=$generation
                    fi

                    if [[ "$create_generation" != "$generation" ]]; then
                        echo "Generation mismatch $create_generation != $generation"
                        failexit "Generation mismatch"
                    fi
                fi
            fi

        # Copy phase - expect 2010 and 2020
        elif [[ "$done_copy" == 0 ]]; then

            if [[ "$rectype" != "2010" && "$rectype" != "2020" ]]; then
                if [[ "$copy_commit" == 0 || "$copy_chkpnt" == 0 ]]; then
                    echo "Found invalid copy-phase rectype $rectype at lsn $lsn"
                    failexit "Invalid rectype in copy"
                else
                    echo "Finished copy generation $copy_generation"
                    echo "Counted $copy_commit commits and $copy_chkpnt checkpoints"

                    export done_copy=1
                    if [[ "$rectype" == "2016" ]]; then
                        let run_commit=run_commit+1
                    fi

                    if [[ "$rectype" == "2011" ]]; then
                        let run_chkpnt=run_chkpnt+1
                    fi
                fi

            else

                if [[ "$rectype" == "2010" ]]; then
                    let copy_commit=copy_commit+1
                fi
                if [[ "$rectype" == "2020" ]]; then
                    let copy_chkpnt=copy_chkpnt+1
                fi

                if [[ "$generation" != "NULL" ]]; then

                    if [[ "$copy_generation" == -1 ]]; then
                        copy_generation=$generation
                    fi

                    if [[ "$copy_generation" != "$generation" ]]; then
                        echo "Generation mismatch $copy_generation != $generation"
                        failexit "Generation mismatch"
                    fi

                    if [[ "$copy_generation" != "$create_generation" ]]; then
                        echo "Generation mismatch $copy_generation != $create_generation"
                        failexit "Generation mismatch"
                    fi
                fi
            fi
        else
        # Run phase - expect 2016 and 2011 again
            if [[ "$rectype" == "2010" || "$rectype" == "2020" ]]; then
                echo "Invalid rectype $rectype for run phase"
                failexit "Invalid rectype in run phase"
            fi
            if [[ "$rectype" == "2016" ]]; then
                let run_commit=run_commit+1
            fi
            if [[ "$rectype" == "2011" ]]; then
                let run_chkpnt=run_chkpnt+1
            fi
            if [[ "$generation" != "NULL" ]]; then
                if [[ "$run_generation" == -1 ]]; then
                    run_generation=$generation
                fi

                if [[ "$run_generation" -gt "$generation" ]]; then
                    echo "Generation grew backwards run-gen=$run_generation new-gen=$generation"
                    failexit "Backwards generation"
                fi
                run_generation=$generation
            fi
        fi
    done

    echo "Record-types and generations are correct"
}

function create_lots_of_btrees
{
    j=0
    while [[ "$j" -lt "100" ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists x${j}(a int, b blob, c blob, d blob, e blob)"
        let j=j+1
    done
}

function full_recover_node
{
    typeset fullrecovery=$1
    typeset node=$fullrecovery

    kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
    sleep 2 
    pushd $DBDIR

    export LOGDIR=$TESTDIR/logs
    export REP_ENV_VARS="${DBDIR}/replicant_env_vars"
    export CLUSTER_GENERATION=""
    export RECOVERY_GENERATION=""

    # Run full-recovery
    if [ $node == `hostname` ] ; then
    	PARAMS="--no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --fullrecovery"
        $COMDB2_EXE ${DBNAME} ${PARAMS}
        RECOVERY_GENERATION=$($COMDB2_EXE --tool cdb2_printlog -h $DBDIR/logs -l 10-100| egrep "generation|rep_gen" | tail -1 | awk '{print $2}')
    else
        PARAMS="--no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --fullrecovery"
        CMD="cd ${DBDIR}; source ${REP_ENV_VARS} ; $COMDB2_EXE ${DBNAME} ${PARAMS}"
        ssh -n -o StrictHostKeyChecking=no -tt $node "${CMD}" < /dev/null
        ssh -n -o StrictHostKeyChecking=no -tt $node "$COMDB2_EXE --tool cdb2_printlog -h $DBDIR/logs -l 10-100" < /dev/null 2>/dev/null > printlog.txt
        export RECOVERY_GENERATION=`egrep "generation|rep_gen" printlog.txt | tail -1 | awk '{print $2}' | tr -d '\r'`
    fi

    # Retrieve cluster-generation
    CLUSTER_GENERATION=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select max(generation) from comdb2_transaction_logs")

    # For all 'failure' cases, the recovered node generation will be higher than the clusters
    if [[ "$DBNAME" == *"disable"* || "$DBNAME" == *"ckpbug"* ]]; then
        if [[ "$RECOVERY_GENERATION" -le "$CLUSTER_GENERATION" ]]; then
            failexit "Recovered generation is $RECOVERY_GENERATION, not higher than $CLUSTER_GENERATION"
        fi
    else
        if [[ "$RECOVERY_GENERATION" -gt "$CLUSTER_GENERATION" ]]; then
            failexit "Recovered generation is $RECOVERY_GENERATION, not less than or equal to $CLUSTER_GENERATION"
        fi
    fi

    # While it is down, insert another record .. 
    # Before fixing the highest-committed-gen fullrecovery bug, you could insert 1000 additional
    # records here and they would disappear .. inserting 1 record allows the same test to continue 
    # to fail when elect-highest-committed-gen is disabled
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 (a) values(1)"
    CLUSTER_GENERATION=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select max(generation) from comdb2_transaction_logs")

    # Verify that the count has replicated (it should but make really, really sure)
    for n in $CLUSTER ; do
        if [[ "$n" -ne "$fullrecovery" ]]; then
            count=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME --host $n "select count(*) from t1")
            if [[ "$count" -ne $target_records ]] ; then
                failexit "Count is $count, not $target_records"
            fi
        fi
    done

    # Quickly bring it back up
	mv --backup=numbered $LOGDIR/${DBNAME}.${node}.db $LOGDIR/${DBNAME}.${node}.db.1
    if [ $node == `hostname` ] ; then
        echo "debug_downgrade_cluster_at_open 1" >> $DBDIR/${DBNAME}.lrl
    	PARAMS="--no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/${DBNAME}.${node}.pid"
        $COMDB2_EXE ${DBNAME} ${PARAMS} &> $LOGDIR/${DBNAME}.${node}.db &
        tail -f $LOGDIR/${DBNAME}.${node}.db | egrep -m 1 "downgrade_cluster_at_open"
        sleep 1
    else
        PARAMS="--no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/${DBNAME}.${node}.pid"
        CMD="cd ${DBDIR}; source ${REP_ENV_VARS} ; echo \"debug_downgrade_cluster_at_open 1\" >> $DBDIR/${DBNAME}.lrl ; $COMDB2_EXE ${DBNAME} ${PARAMS} 2>&1 | tee $TESTDIR/${DBNAME}.db"
        ssh -n -o StrictHostKeyChecking=no -tt $node ${CMD} &> $LOGDIR/${DBNAME}.${node}.db </dev/null & 
        echo $! > ${TMPDIR}/${DBNAME}.${node}.pid
        tail -f $LOGDIR/${DBNAME}.${node}.db | egrep -m 1 "downgrade_cluster_at_open"
        sleep 0.8
    fi

    # The original bug in elect-highest-committed-gen doesn't require a downgrade here
    # The old version of election requires a downgrade .. 
    # Downgrade on 'disable' or 'enableddowngrade' (which has elect-highest-committed-gen enabled)
    if [[ "$DBNAME" == *"enableddowngrade"* || "$DBNAME" == *"disable"* || "$DBNAME" == *"ckpbug"* ]]; then
        echo "Downgrading $master"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('downgrade')" >/dev/null 2>&1 &
    fi

    # Wait for entire cluster to be available
    bad=1
    while [[ "$bad" == "1" ]]; do
        bad=0
        for n in $CLUSTER ; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $n "select 1"
            if [[ $? -ne 0 ]] ; then
                bad=1
            fi
        done
        if [[ "$bad" == "1" ]]; then
            sleep 1
        fi
    done
}

function run_test
{
    typeset target_records=1001
    typeset fullrecovery=""

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 select * from generate_series(1, 1000)"

    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "exec procedure sys.cmd.send('flush')"
    done

    fullrecovery=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='N' limit 1")
    #fullrecovery=$node
    master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y' limit 1")
    node=$fullrecovery

    full_recover_node $fullrecovery
    # Get master again .. if this was the 'disabled' test, the master should be the full-recovered node
    master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y' limit 1")

    # Just repeat until the fully recovered node becomes the master
    if [[ "$DBNAME" == *"disable"* || "$DBNAME" == *"ckpbug"* ]]; then
        while [[ "$master" != "$fullrecovery" ]]; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t1"
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 select * from generate_series(1, 1000)"
            for node in $CLUSTER ; do
                $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "exec procedure sys.cmd.send('flush')"
            done

            fullrecovery=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='N' limit 1")
            full_recover_node $fullrecovery
            master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y' limit 1")
        done
    fi

    # Sleep a bit
    sleep 5

    # Select the count
    count=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select count(*) from t1")

    if [[ "$count" -ne $target_records ]] ; then
        
        # 'FAILURE' is 'SUCCESS' for the disable testcase .. it is attempting to show the failure that
        # occurs if elect-highest-committed-gen is disabled
        echo "We got a count of $count, not $target_records"
        if [[ "$DBNAME" != *"disable"* && "$DBNAME" != *"ckpbug"* ]]; then
            kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
            failexit "Count is not $target_records"
        else
            echo "Successfully reproduced bug"
        fi
    elif [[ "$DBNAME" == *"disable"* || "$DBNAME" == *"ckpbug"* ]]; then
        echo "FAILURE: disable test failed to reproduce bug"
        kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
        failexit "Count is correct even though committed-gen is disabled"
    else
        echo "Success!"
    fi

    kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
    echo "Success!"
}


[[ -z "$CLUSTER" || $(echo "$CLUSTER" | wc -w) -lt 3 ]] && failexit "This test requires a 3-node cluster"

# This tests both with committed-gen enabled and disabled 
# When committed_gen is disabled, run-test should fail.
if [[ "$DBNAME" != *"rollout"* ]]; then
    verify_create_recovery_records
fi

create_lots_of_btrees
run_test


#!/usr/bin/env bash
bash -n "$0" | exit 1

export debug=1

[[ "$debug" == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/runit_common.sh

function create_lots_of_btrees
{
    j=0
    while [[ "$j" -lt "100" ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists x${j}(a int, b blob, c blob, d blob, e blob)"
        let j=j+1
    done
}

function full_recover_node
{
    typeset fullrecovery=$1
    typeset node=$fullrecovery

    kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
    sleep 2 
    pushd $DBDIR

    export LOGDIR=$TESTDIR/logs
    export REP_ENV_VARS="${DBDIR}/replicant_env_vars"

    # Run full-recovery
    if [ $node == `hostname` ] ; then
    	PARAMS="--no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --fullrecovery"
        $COMDB2_EXE ${DBNAME} ${PARAMS}
    else
        PARAMS="--no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --fullrecovery"
        CMD="cd ${DBDIR}; source ${REP_ENV_VARS} ; $COMDB2_EXE ${DBNAME} ${PARAMS}"
        ssh -n -o StrictHostKeyChecking=no -tt $node "${CMD}" < /dev/null
    fi

    # While it is down, insert another record .. 
    # Before fixing the highest-committed-gen fullrecovery bug, you could insert 1000 additional
    # records here and they would disappear .. inserting 1 record allows the same test to continue 
    # to fail when elect-highest-committed-gen is disabled
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 (a) values(1)"

    # Verify that the count has replicated (it should but make really, really sure)
    for n in $CLUSTER ; do
        if [[ "$n" -ne "$fullrecovery" ]]; then
            count=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME --host $n "select count(*) from t1")
            if [[ "$count" -ne $target_records ]] ; then
                failexit "Count is $count, not $target_records"
            fi
        fi
    done

    # Quickly bring it back up
	mv --backup=numbered $LOGDIR/${DBNAME}.${node}.db $LOGDIR/${DBNAME}.${node}.db.1
    if [ $node == `hostname` ] ; then
        echo "debug_downgrade_cluster_at_open 1" >> $DBDIR/${DBNAME}.lrl
    	PARAMS="--no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/${DBNAME}.${node}.pid"
        $COMDB2_EXE ${DBNAME} ${PARAMS} &> $LOGDIR/${DBNAME}.${node}.db &
        tail -f $LOGDIR/${DBNAME}.${node}.db | egrep -m 1 "downgrade_cluster_at_open"
        sleep 1
    else
        PARAMS="--no-global-lrl --lrl $DBDIR/${DBNAME}.lrl --pidfile ${TMPDIR}/${DBNAME}.${node}.pid"
        CMD="cd ${DBDIR}; source ${REP_ENV_VARS} ; echo \"debug_downgrade_cluster_at_open 1\" >> $DBDIR/${DBNAME}.lrl ; $COMDB2_EXE ${DBNAME} ${PARAMS} 2>&1 | tee $TESTDIR/${DBNAME}.db"
        ssh -n -o StrictHostKeyChecking=no -tt $node ${CMD} &> $LOGDIR/${DBNAME}.${node}.db </dev/null & 
        echo $! > ${TMPDIR}/${DBNAME}.${node}.pid
        tail -f $LOGDIR/${DBNAME}.${node}.db | egrep -m 1 "downgrade_cluster_at_open"
        sleep 1
    fi

    # The original bug in elect-highest-committed-gen doesn't require a downgrade here
    # The old version of election requires a downgrade .. 
    # Downgrade on 'disable' or 'enableddowngrade' (which has elect-highest-committed-gen enabled)
    if [[ "$DBNAME" == *"enableddowngrade"* || "$DBNAME" == *"disable"* ]]; then
        echo "Downgrading $master"
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('downgrade')" >/dev/null 2>&1 &
    fi

    # Wait for entire cluster to be available
    bad=1
    while [[ "$bad" == "1" ]]; do
        bad=0
        for n in $CLUSTER ; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $n "select 1"
            if [[ $? -ne 0 ]] ; then
                bad=1
            fi
        done
        if [[ "$bad" == "1" ]]; then
            sleep 1
        fi
    done



}

function run_test
{
    typeset target_records=1001
    typeset fullrecovery=""

    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 select * from generate_series(1, 1000)"

    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "exec procedure sys.cmd.send('flush')"
    done

    fullrecovery=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='N' limit 1")
    #fullrecovery=$node
    master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y' limit 1")
    node=$fullrecovery

    # Get master again .. if this was the 'disabled' test, the master should be the full-recovered node
    full_recover_node $fullrecovery
    master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y' limit 1")

    # Just repeat until the fully recovered node becomes the master
    if [[ "$DBNAME" == *"disable"* ]]; then
        while [[ "$master" != "$fullrecovery" ]]; do
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t1"
            $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 select * from generate_series(1, 1000)"
            for node in $CLUSTER ; do
                $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "exec procedure sys.cmd.send('flush')"
            done

            fullrecovery=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='N' limit 1")
            full_recover_node $fullrecovery
            master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y' limit 1")
        done
    fi

    # Sleep a bit
    sleep 5

    # Select the count
    count=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "select count(*) from t1")

    if [[ "$count" -ne $target_records ]] ; then
        
        # 'FAILURE' is 'SUCCESS' for the disable testcase .. it is attempting to show the failure that
        # occurs if elect-highest-committed-gen is disabled
        echo "We got a count of $count, not $target_records"
        if [[ "$DBNAME" != *"disable"* ]]; then
            kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
            failexit "Count is not $target_records"
        else
            echo "Successfully reproduced bug"
        fi
    elif [[ "$DBNAME" == *"disable"* ]]; then
        echo "FAILURE: disable test failed to reproduce bug"
        kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
        failexit "Count is correct even though committed-gen is disabled"
    else
        echo "Success!"
    fi

    kill_by_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
    echo "Success!"
}


[[ -z "$CLUSTER" || $(echo "$CLUSTER" | wc -w) -lt 3 ]] && failexit "This test requires a 3-node cluster"

# This tests both with committed-gen enabled and disabled 
# When committed_gen is disabled, run-test should fail.

create_lots_of_btrees
run_test


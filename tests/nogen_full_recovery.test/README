This test makes sure that full-recovery does not write a regop-gen record which
will incorrectly bias it to win an election when it rejoins the cluster.
Further, the 'disable' testops examines the behavior when elect-highest-gen is
disabled.  We believe that there are cases under the original algorithm where
full-recovery can push the end of the transaction-log beyond that of the
cluster, which may again incorrectly bias it towards winning an election.

There are 3 different versions of this test:

The default (no-testopts) version has elect-highest-committed-gen enabled, and
demonstrated the original bug.  It shows how full-recovery writes a regop-gen
record with a higher-generation than the cluster is running.  When it rejoins,
it becomes the master, which causes the cluster to unwind any transactions that
the fully-recovered node has not seen.  To see this failure, undo the fix in
berkdb/txn.c.

The 'disable' version of this test shows the failure case that occurs if elect-
highest-committed-gen is disabled.  This is the original issue that this
tunable was intended to fix.  This version of the test requires that the master
node downgrade just as the fully-recovered node rejoins the cluster.  The
fully-recovered node should be guaranteed to win the election because
full-recovery has pushed it's LSN further than the cluster's LSN.

The 'enableddowngrade' version of this test shows that
elect-highest-committed-gen will not allow the fully-recovered node to win the
election despite the fact that it's LSN is larger.  Rather, the election allows
a node which has the highest written generation to win the election.  So data
which has replicated to a majority is not lost.  This is the correct behavior.


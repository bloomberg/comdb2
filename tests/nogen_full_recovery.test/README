This test makes sure that full-recovery does not write a regop-gen record which
will incorrectly bias it to win an election when it rejoins the cluster.
Further, the 'disable' testops examines the behavior when elect-highest-gen is
disabled.  We believe that there are cases under the original algorithm where
full-recovery can push the end of the transaction-log beyond that of the
cluster, which may again incorrectly bias it towards winning an election.

Original design of elect-highest-committed-gen did not consider the effects (or
include any tests) for full-recovery.  The phy-rep/lcl-rep combination databases
demonstrated that a fully-recovered db can coerce the cluster into unwinding
committed data.  This was because full-recovery called 'open_dbs'
transactionally, which produced a regop_gen record which can be higher than the
cluster's gen, which allowed it to incorrectly win an election.  A similar
problem exists for checkpoint records: the issue in that case was that
fullrecovery can produce a checkpoint record which could also produced by the
cluster master- meaning that replicants can match against records which were not
produced by the cluster master for that generation. 

In order to work correctly with elect-highest-committed-gen, full-recovery must
not emit any matchable records, and it must not increment the generation.  The
database instead will issue 'txn_regop' records, and 'tkn_ckp_recover' records
rather than 'txn_regop_gen' / 'txn_ckp'.  Neither txn_regop nor txn_ckp_recover
records are used for voting or matching.

Versions of this test:

The default (no-testopts) version has elect-highest-committed-gen enabled, and
demonstrated the original bug.  It shows how full-recovery writes a regop-gen
record with a higher-generation than the cluster is running.  When it rejoins,
it becomes the master, which causes the cluster to unwind any transactions that
the fully-recovered node has not seen.  To see this failure, undo the fix in
berkdb/txn.c.

The 'disable' version of this test shows the failure case that occurs if elect-
highest-committed-gen is disabled.  This is the original issue that this
tunable was intended to fix.  This version of the test requires that the master
node downgrade just as the fully-recovered node rejoins the cluster.  The
fully-recovered node should be guaranteed to win the election because
full-recovery has pushed it's LSN further than the cluster's LSN.  While this
version of the test serves as proof that we can lose data, it is not reliable-
it will not always lose data- so I have disabled it.

The 'enableddowngrade' version of this test shows that
elect-highest-committed-gen will not allow the fully-recovered node to win the
election despite the fact that it's LSN is larger.  Rather, the election allows
a node which has the highest written generation to win the election.  So data
which has replicated to a majority is not lost.  This is the correct behavior.

The 'ckpbug' version of this test shows that even if fullrecovery emits non-
matchable regop records, the same issue can happen if we allow checkpoint
records to be considered for voting (committed-gen), and the checkpoint is
written at a higher generation than the cluster's generation.  As with the
'disable' version of the test, this serves as proof that we can lose data, but
is not reliable, and is disabled.

Finally, the 'rollout' version of the test demonstrates that we usually work 
correctly with retrieve_gen_from_ckp and recovery_ckp disabled, even though it
is incorrect for recovery to produce any matchable record.  'recovery_ckp'
introduces a new log-record type, and must therefore be disabled until the code
has moved everywhere.

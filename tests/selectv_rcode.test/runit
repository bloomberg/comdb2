#!/usr/bin/env bash
bash -n "$0" | exit 1

export debug=1
#export apidebug=1
[[ $debug == "1" ]] && set -x

export myhost=$(hostname)
export selectv_rcode=${TESTSBUILDDIR}/selectv_rcode

function write_prompt
{
    typeset func=$1
    echo "[$func] $2"
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    typeset f=$1
    write_prompt $func "$f failed: $2"
    exit -1
}

function truncate
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "truncate jobinstance"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "truncate dbgopts"
}

function populate
{
    [[ $debug == "1" ]] && set -x
    typeset file="load_instid.sql"
    typeset records=5000
    typeset instid=0
    typeset rqstid=0
    typeset state=1
    typeset updatehost=0
    typeset host=0

    echo "BEGIN" > $file
    while [[ $instid -lt $records ]]; do

        echo "INSERT INTO jobinstance VALUES ($rqstid, $instid, $state, now(), now(), $updatehost)" >> $file
        let instid=instid+1
        if [[ $(( instid % 10 )) -eq 0 ]]; then
            let rqstid=rqstid+1
        fi
    done
    echo "COMMIT" >> $file
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default - < $file
}

function serialize_reads_like_writes
{
    [[ $debug == "1" ]] && set -x
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select value from comdb2_tunables where name = 'serialize_reads_like_writes'")
    if [[ "$x" == "ON" ]]; then
        echo "-R"
    fi
}

function disallow_update_fail
{
    [[ $debug == "1" ]] && set -x
    x=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select value from comdb2_tunables where name = 'snapshot_serial_verify_retry'")
    if [[ "$x" == "ON" ]]; then
        echo "-f"
    fi
}

function debug_flags
{
    [[ $debug == "1" ]] && set -x
    if [[ "$apidebug" == "1" ]]; then
        echo "-D"
    fi
}

function run_tests
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_tests"
    typeset strict_mode=$(disallow_update_fail)
    typeset reads_like_writes=$(serialize_reads_like_writes)
    typeset dbug_flags=$(debug_flags)
    typeset isolation=""

    start=$(date +%s)
    isolation=socksql
    echo "$isolation test"
    $selectv_rcode -d $DBNAME -c $CDB2_CONFIG $strict_mode $reads_like_writes $dbug_flags -i $isolation
    export r=$?
    [[ $r != 0 ]] && failexit "$isolation selectv rcodes"

    isolation=reccom
    echo "$isolation test"
    $selectv_rcode -d $DBNAME -c $CDB2_CONFIG $strict_mode $reads_like_writes $dbug_flags -i $isolation
    export r=$?
    [[ $r != 0 ]] && failexit "$isolation selectv rcodes"

    isolation=snapshot
    echo "$isolation test"
    $selectv_rcode -d $DBNAME -c $CDB2_CONFIG $strict_mode $reads_like_writes $dbug_flags -i $isolation
    export r=$?
    [[ $r != 0 ]] && failexit "$isolation selectv rcodes"

    isolation=serial
    echo "$isolation test"
    $selectv_rcode -d $DBNAME -c $CDB2_CONFIG $strict_mode $reads_like_writes $dbug_flags -i $isolation
    export r=$?
    [[ $r != 0 ]] && failexit "$isolation selectv rcodes"
}

function run_isolated_test
{
    [[ $debug == "1" ]] && set -x
    typeset iterations=${1:-4}
    typeset func="run_isolated_test"
    typeset strict_mode=$(disallow_update_fail)
    typeset reads_like_writes=$(serialize_reads_like_writes)
    typeset dbug_flags=$(debug_flags)
    typeset isolation=""

    # Thread types
    typeset selectv_updaters="-v 15"
    typeset updaters="-u 0"
    typeset single_statement_noselect_updaters="-S 0"
    typeset intrans_effects_updaters="-e 0"
    typeset point_in_time_updaters="-p 0"
    typeset noselect_updaters="-U 0"
    typeset selectvs="-V 0"

    j=0
    while [[ $j -lt $iterations ]]; do
        isolation=snapshot
        echo "$isolation test"
        $selectv_rcode -d $DBNAME -c $CDB2_CONFIG $strict_mode $reads_like_writes $dbug_flags $selectv_updaters $updaters $single_statement_noselect_updaters $intrans_effects_updaters $point_in_time_updaters $noselect_updaters $selectvs -i $isolation
        export r=$?
        [[ $r != 0 ]] && failexit "$isolation selectv rcodes"
        let j=j+1
    done
}

truncate
populate
run_tests
#run_isolated_test
echo "Success"
exit 0

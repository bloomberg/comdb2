#!/usr/bin/env bash
bash -n "$0" | exit 1

export debug=1
[[ $debug == "1" ]] && set -x

export myhost=$(hostname)
export selectv_rcode=${TESTSBUILDDIR}/selectv_rcode

function write_prompt
{
    typeset func=$1
    echo "[$func] $2"
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    typeset f=$1
    write_prompt $func "$f failed: $2"
    exit -1
}

function truncate
{
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "truncate jobinstance"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "truncate dbgopts"
}

function populate
{
    typeset file="load_instid.sql"
    typeset records=5000
    typeset instid=0
    typeset rqstid=0
    typeset state=1
    typeset updatehost=0
    typeset host=0

    echo "BEGIN" > $file
    while [[ $instid -lt $records ]]; do

        echo "INSERT INTO jobinstance VALUES ($rqstid, $instid, $state, now(), now(), $updatehost)" >> $file
        let instid=instid+1
        if [[ $(( instid % 10 )) -eq 0 ]]; then
            let rqstid=rqstid+1
        fi
    done
    echo "COMMIT" >> $file
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default - < $file
}

function run_tests
{
    typeset func="run_tests"
    start=$(date +%s)
    $selectv_rcode -d $DBNAME -c $CDB2_CONFIG -i socksql
    export r=$?
    [[ $r != 0 ]] && failexit "socksql selectv rcodes"

    $selectv_rcode -d $DBNAME -c $CDB2_CONFIG -i reccom
    export r=$?
    [[ $r != 0 ]] && failexit "read committed selectv rcodes"

    $selectv_rcode -d $DBNAME -c $CDB2_CONFIG -i snapshot
    export r=$?
    [[ $r != 0 ]] && failexit "snapshot selectv rcodes"

    $selectv_rcode -d $DBNAME -c $CDB2_CONFIG -i serial
    export r=$?
    [[ $r != 0 ]] && failexit "serial selectv rcodes"
}

truncate
populate
run_tests
echo "Success"
exit 0

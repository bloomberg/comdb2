#!/usr/bin/env bash

set -x

[[ $COMDB2_UNITTEST == 1 ]] && exit 0

echo "!$TESTCASE: stopping"
[ -z "$TESTDIR" ] && TESTDIR=${PWD}/test_${TESTID}
[ -z "$TMPDIR" ] && TMPDIR=${TESTDIR}/tmp

#parameter $1 indicates if test is successful or not
successful=$1

kill_by_pidfile() {
    local pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        local pstr=$(ps -p $pid -o args | grep comdb2)
        echo $pstr | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then
            echo "${TESTCASE}: killing $pid"
            if [ "`echo $pstr | awk '{ print $1 }' | xargs basename`" = "comdb2" ] ; then
                kill -9 $pid
            else
                kill $pid
            fi
        fi
        rm -f $pidfile
    else
        echo "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}

build_pidfilelist() {
    local pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        ps -p $pid -o args | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then 
            echo "${TESTCASE}: adding to filelist $pid"
            pidfilelist="$pidfilelist $pid"
            rm -f $pidfile
        fi
    else
        echo "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}

dumplock_all_nodes() {
    local node
    local pidfl=${TMPDIR}/${DBNAME}.pid

    if [[ -z "$CLUSTER" ]] ; then
        cdb2sql ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("bdb lockinfo lockers")' &
    else
        for node in $CLUSTER; do
            cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("bdb lockinfo lockers")' &
        done
    fi
}

core_all_nodes() {
    local node
    local pidfl=${TMPDIR}/${DBNAME}.pid
    if [[ -z "$CLUSTER" ]] || [[ `echo $CLUSTER | grep $HOSTNAME ` ]]; then
        if [[ -n "$CLUSTER" ]] ; then
            pidfl=${TMPDIR}/${DBNAME}.$HOSTNAME.pid
        fi
        cat ${pidfl} | xargs kill -6 
    fi

    for node in ${CLUSTER/$HOSTNAME/} ; do
         pidfl=${TMPDIR}/${DBNAME}.pid
         ssh -o StrictHostKeyChecking=no $node "cat ${pidfl} | xargs kill -6 " </dev/null
    done
}

cleanup_cluster() {    
    local deregister_db_port="pgrep pmux > /dev/null && (exec 3<>/dev/tcp/localhost/${pmux_port}; echo del comdb2/replication/${DBNAME} >&3 )"
    local dbport
    if [[ -z "$CLUSTER" ]] || [[ `echo $CLUSTER | grep $HOSTNAME ` ]]; then
        dbport=`${TESTSROOTDIR}/tools/send_msg_port.sh -h $HOSTNAME "get comdb2/replication/${DBNAME}" ${pmux_port}`
        echo "deregistering $DBNAME (port $dbport) from $HOSTNAME pmux:$pmux_port"
        eval $deregister_db_port
    fi

    # the local node always has a copy of DBDIR even if not part of cluster
    if [ "$CLEANUPDBDIR" == "1" ] && [ "$successful" == "1" ] && [ "x$DBDIR" != "x" ] ; then 
        rm -rf ${DBDIR} ${TESTDIR}/var/log/cdb2/${DBNAME}.*
    fi

    local node
    for node in ${CLUSTER/$HOSTNAME/}; do
        dbport=`${TESTSROOTDIR}/tools/send_msg_port.sh -h $node "get comdb2/replication/${DBNAME}" ${pmux_port}`
        echo "deregistering $DBNAME (port $dbport) from $node pmux:$pmux_port"
        ssh -o StrictHostKeyChecking=no $node "${deregister_db_port}" < /dev/null
        if [ "x$DBDIR" == "x" ] ; then 
            continue
        fi

        if [ "$successful" != "1" ] ; then 
            echo copy $node:${DBDIR} content locally to $DBDIR/$node/ for investigation
            mkdir $DBDIR/$node/
            scp -r -o StrictHostKeyChecking=no $node:${DBDIR} $DBDIR/$node/ < /dev/null &
            scp -r -o StrictHostKeyChecking=no $node:${TESTDIR}/var/log/cdb2/${DBNAME}* $DBDIR/$node/ < /dev/null &
        elif [ "$CLEANUPDBDIR" == "1" ] ; then 
            ssh -o StrictHostKeyChecking=no $node "rm -rf ${DBDIR} ${TESTDIR}/var/log/cdb2/${DBNAME}.*" < /dev/null &
        fi
    done
    wait
}

flush_node() {
    local node=$1
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("flush")' &
    sleep 1
    cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("reql events off")' &
    sleep 1
}


if [[ "$NOKILL_ON_TIMEOUT" -eq 1 && "$successful" -eq "-1" ]]; then
    echo "Unsetup deferred"
    exit 0
fi

if [[ "$DUMPLOCK_ON_TIMEOUT" -eq "1" && "$successful" -eq "-1" ]]; then
    dumplock_all_nodes
fi


if [[ "$CORE_ON_TIMEOUT" -eq "1" && "$successful" -eq "-1" ]]; then
    core_all_nodes
fi


if [[ -z "$CLUSTER" ]]; then
    cdb2sql ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("flush")' &
    sleep 1
    cdb2sql ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("reql events off")' &
    sleep 1
    
    kill_by_pidfile ${TMPDIR}/${DBNAME}.pid

else
    pidfilelist=""

    for node in $CLUSTER; do
        flush_node $node &
        build_pidfilelist ${TMPDIR}/${DBNAME}.${node}.pid
    done
    wait

    # for clustered, killing ssh session which is running comdb2 cmd 
    # will kill server on that node
    if [ -n "$pidfilelist" ] ; then
        echo "killing $pidfilelist"
        kill -9 $pidfilelist
    fi
fi

cleanup_cluster
echo "Unsetup completed"

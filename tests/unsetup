#!/usr/bin/env bash
# We currently kill -9 the nodes rather than send exit
# In future we could exit by doing send exit, but it has to 
# function properly first (by cleaning up correctly)

set -x

[[ $COMDB2_UNITTEST == 1 ]] && exit 0

echo "!$TESTCASE: stopping"
TESTDIR=${TESTDIR:-${PWD}/test_${TESTID}}
TMPDIR=${TMPDIR:-${TESTDIR}/tmp}

#parameter $1 indicates if test is successful or not
successful=$1

kill_by_pidfile() {
    local pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        local pstr=$(ps -p $pid -o args | grep comdb2)
        echo $pstr | grep -q "comdb2 ${DBNAME}"
        #replace with if [[ $pstr == *"comdb2 ${DBNAME}"* ]]; then
        if [[ $? -eq 0 ]]; then
            echo "${TESTCASE}: killing $pid"
            if [ "`echo $pstr | awk '{ print $1 }' | xargs basename`" = "comdb2" ] ; then
                kill -9 $pid
            else
                kill $pid
            fi
        fi
        rm -f $pidfile
    else
        echo "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}

build_pidfilelist() {
    local pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        ps -p $pid -o args | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then 
            echo "${TESTCASE}: adding to filelist $pid"
            pidfilelist="$pidfilelist $pid"
            rm -f $pidfile
        fi
    else
        echo "build_pidfilelist: pidfile $pidfile does not exist"
    fi
}

dumplock_all_nodes() {
    local node
    local pidfl=${TMPDIR}/${DBNAME}.pid

    if [[ -z "$CLUSTER" ]] ; then
        cdb2sql ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("bdb lockinfo lockers")' &
    else
        for node in $CLUSTER; do
            cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("bdb lockinfo lockers")' &
        done
    fi
}

core_all_nodes() {
    local node
    local pidfl=${TMPDIR}/${DBNAME}.pid
    if [[ -z "$CLUSTER" ]] || [[ `echo $CLUSTER | grep $HOSTNAME ` ]]; then
        if [[ -n "$CLUSTER" ]] ; then
            pidfl=${TMPDIR}/${DBNAME}.$HOSTNAME.pid
        fi
        cat ${pidfl} | xargs kill -6 
    fi

    for node in ${CLUSTER} ; do
        if [ $node == $HOSTNAME ] ; then
            continue
        fi
        pidfl=${TMPDIR}/${DBNAME}.pid
        ssh -n -o StrictHostKeyChecking=no $node "cat ${pidfl} | xargs kill -6 "
    done
}

tail_and_error_file() {
    fl=$1
    if [ `wc -l $fl | cut -d' ' -f1` -lt 20 ] ; then
        return
    fi
    echo ".....truncated...." > tail.txt
    grep --context=3 -i "error\|failed" $fl >> tail.txt
    tail -20 $fl >> tail.txt
    mv tail.txt $fl # override with partial content
}

cleanup_cluster() {    
    local deregister_db_port="pgrep pmux > /dev/null && (exec 3<>/dev/tcp/localhost/${pmux_port}; echo del comdb2/replication/${DBNAME} >&3 )"
    local dbport
    if [[ -z "$CLUSTER" ]] || [[ `echo $CLUSTER | grep $HOSTNAME ` ]]; then
        dbport=`${TESTSROOTDIR}/tools/send_msg_port.sh -h $HOSTNAME "get comdb2/replication/${DBNAME}" ${pmux_port}`
        echo "deregistering $DBNAME (port $dbport) from $HOSTNAME pmux:$pmux_port"
        eval $deregister_db_port
    fi

    local node
    for node in ${CLUSTER}; do
        if [ $node == $HOSTNAME ] ; then
            continue
        fi
        dbport=`${TESTSROOTDIR}/tools/send_msg_port.sh -h $node "get comdb2/replication/${DBNAME}" ${pmux_port}`
        echo "deregistering $DBNAME (port $dbport) from $node pmux:$pmux_port"
        ssh -n -o StrictHostKeyChecking=no $node "${deregister_db_port}"
        if [ "x$DBDIR" == "x" ] ; then 
            continue
        fi

        if [ "$successful" != "1" ] ; then 
            echo copy $node:${DBDIR} content locally to $DBDIR/$node/ for investigation
            mkdir $DBDIR/$node/
            # from the next line, scp may result in a an extra copy of the core
            scp -r -o StrictHostKeyChecking=no $node:${DBDIR} $DBDIR/$node/ &
            scp -r -o StrictHostKeyChecking=no $node:${TESTDIR}/var/log/cdb2/${DBNAME}* $DBDIR/$node/ &
        elif [ "$CLEANUPDBDIR" != "0" ] ; then 
            ssh -n -o StrictHostKeyChecking=no $node "find ${DBDIR} | grep -q core || rm -rf ${DBDIR} $TMPDIR/${DBNAME}" &
            if [ "$CLEANUPDBDIR" == "2" ] ; then 
                ssh -n -o StrictHostKeyChecking=no $node "rm -f $TESTDIR/${DBNAME}.db ${TMPDIR}/${DBNAME}.* ${TMPDIR}/cdb2/${DBNAME}.* ${TESTDIR}/var/log/cdb2/${DBNAME}.*" &
            fi
        fi
    done
    wait

    # the local node always has a copy of DBDIR even if not part of cluster
    if [ "$CLEANUPDBDIR" != "0" ] && [ "$successful" == "1" ] && [ "x$DBDIR" != "x" ] ; then 
        find ${DBDIR} | grep -q core || rm -rf ${DBDIR} ${TMPDIR}/${DBNAME}
        if [ "$CLEANUPDBDIR" == "2" ] ; then
            rm -f ${TESTDIR}/var/log/cdb2/${DBNAME}.* `find $TESTDIR/${TESTCASE}.test/* | grep -v Makefile`
            rm -f $TESTDIR/logs/${DBNAME}.{setup,init,conn,copy,arstatus} # non clustered
            rm -f $TESTDIR/logs/${DBNAME}.*.{setup,init,conn,copy,arstatus} # clustered

            for fl in $TESTDIR/logs/${DBNAME}.*db $TESTDIR/logs/${DBNAME}.testcase ; do
                tail_and_error_file $fl
            done

            #rm -f ${TMPDIR}/${DBNAME}.* ${TMPDIR}/cdb2/${DBNAME}.*
            rmdir ${TMPDIR}/cdb2 ${TMPDIR} 2> /dev/null
        fi
    fi
}

flush_node() {
    local node=$1
    timeout --kill-after=5s 10s cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("flush")'
    sleep 1
    timeout --kill-after=5s 10s cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("stat")'
    timeout --kill-after=5s 10s cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("reql events off")'
}


# wait for exiting for up to N seconds
wait_for_exit_pids() {
    let TTL=$((SECONDS+$1))
    shift
    for pid in $@ ; do
        while :; do
            # wait up till script execution reaches $SECONDS
            if [ $TTL -lt $SECONDS ] ; then
                return
            fi

            if [[ "x$pid" == "x" ]]; then
                return
            fi

            echo "kill -0 $pid"
            #$? of 0 means proces $pid exists
            kill -0 $pid
            if [ $? != 0 ] ; then
                break
            fi
            sleep 0.5
        done
    done
}


unsetup_db() {
    if [[ "$NOKILL_ON_TIMEOUT" -eq 1 && "$successful" -eq "-1" ]]; then
        echo "Unsetup deferred"
        exit 0
    fi

    if [[ "$NOKILL_ON_FAILURE" -eq 1 && "$successful" -ne "1" ]]; then
        echo "Not killing on failed test"
        exit 0
    fi

    if [[ "$DUMPLOCK_ON_TIMEOUT" -eq "1" && "$successful" -eq "-1" ]]; then
        dumplock_all_nodes
    fi


    if [[ "$CORE_ON_TIMEOUT" -eq "1" && "$successful" -eq "-1" ]]; then
        core_all_nodes
    elif [[ "$CORE_ON_FAILURE" -eq "1" && "$successful" -ne "1" ]]; then
        core_all_nodes
    fi


    if [[ -z "$CLUSTER" ]]; then
        flush_node localhost

        if [[ -z "$SKIPDEBUG" ]] ; then
            cdb2sql ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("exit")'
            wait_for_exit_pids 10 `cat ${TMPDIR}/${DBNAME}.pid`
        fi
        
        kill_by_pidfile ${TMPDIR}/${DBNAME}.pid
    else
        pidfilelist=""

        for node in $CLUSTER; do
            flush_node $node &
            build_pidfilelist ${TMPDIR}/${DBNAME}.${node}.pid
        done

        wait

        for node in $CLUSTER; do
            if [[ -z "$SKIPDEBUG" ]] ; then
                cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("exit")' &
            fi
        done
        wait
 
        # for clustered, killing ssh session which is running comdb2 cmd 
        # will kill server on that node
        if [ -n "$pidfilelist" ] ; then
            wait_for_exit_pids 10 $pidfilelist
            echo "killing $pidfilelist"
            kill -9 $pidfilelist
        fi
    fi

    cleanup_cluster
}

unsetup_db

if [ -n "${SECONDARY_DB_PREFIX}" ] ; then
    # setup secondary db for the test, if specified
    DBNAME="${SECONDARY_DBNAME}" DBDIR="${SECONDARY_DBDIR}" CDB2_OPTIONS="${SECONDARY_CDB2_OPTIONS}" unsetup_db
fi
if [ -n "${TERTIARY_DB_PREFIX}" ] ; then
    # setup tertiary db for the test, if specified
    DBNAME="${TERTIARY_DBNAME}" DBDIR="${TERTIARY_DBDIR}" CDB2_OPTIONS="${TERTIARY_CDB2_OPTIONS}" unsetup_db
fi
if [ -n "${QUATERNARY_DB_PREFIX}" ] ; then
    # setup QUATERNARY db for the test, if specified
    DBNAME="${QUATERNARY_DBNAME}" DBDIR="${QUATERNARY_DBDIR}" CDB2_OPTIONS="${QUATERNARY_CDB2_OPTIONS}" unsetup_db
fi

if [ -n "${QUINARY_DB_PREFIX}" ] ; then
    # setup QUINARY db for the test, if specified
    DBNAME="${QUINARY_DBNAME}" DBDIR="${QUINARY_DBDIR}" CDB2_OPTIONS="${QUINARY_CDB2_OPTIONS}" unsetup_db
fi

if [ -n "${SENARY_DB_PREFIX}" ] ; then
    # setup SENARY db for the test, if specified
    DBNAME="${SENARY_DBNAME}" DBDIR="${SENARY_DBDIR}" CDB2_OPTIONS="${SENARY_CDB2_OPTIONS}" unsetup_db
fi

echo "Unsetup completed"

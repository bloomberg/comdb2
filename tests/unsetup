#!/bin/bash

set -x

[[ $COMDB2_UNITTEST == 1 ]] && exit 0

echo "!$TESTCASE: stopping"
[ -z "$TESTDIR" ] && TESTDIR=${PWD}/test_${TESTID}
[ -z "$TMPDIR" ] && TMPDIR=${TESTDIR}/tmp

successful=$1

function kill_by_pidfile() {
    pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        local pstr=$(ps -p $pid -o args | grep comdb2)
        echo $pstr | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then
            echo "${TESTCASE}: killing $pid"
            if [ "`echo $pstr | awk '{ print $1 }' | xargs basename`" = "comdb2" ] ; then
                kill -9 $pid
            else
                kill $pid
            fi
        fi
        rm -f $pidfile
    else
        echo "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}

function check_pid_from_pidfile() {
    pidfile=$1
    if [[ -f $pidfile ]]; then
        local pid=$(cat $pidfile)
        ps -p $pid -o args | grep -q "comdb2 ${DBNAME}"
        if [[ $? -eq 0 ]]; then 
            echo "${TESTCASE}: adding to filelist $pid"
            pidfilelist="$pidfilelist $pid"
            rm -f $pidfile
        fi
    else
        echo "kill_by_pidfile: pidfile $pidfile does not exist"
    fi
}

function cleanup {    
    for node in $CLUSTER; do
        if [ $node == `hostname` ] ; then
            eval $deregister_db
        else
            ssh -o StrictHostKeyChecking=no $node "${deregister_db}" < /dev/null
        fi
        if [ "$CLEANUPDBDIR" == "1" ] && [ "$successful" == "1" ] && [ "x$DBDIR" != "x" ] ; then 
            if [ $node == `hostname` ]  ; then
                rm -rf ${DBDIR}
            else
                ssh -o StrictHostKeyChecking=no $node "rm -rf ${DBDIR}" < /dev/null
            fi
        fi
    done
}


pmux_port=5105
if [ -n "$PMUXPORT" ] ; then
    pmux_port=$PMUXPORT
fi
deregister_db="pgrep pmux > /dev/null && (exec 3<>/dev/tcp/localhost/${pmux_port}; echo del comdb2/replication/${DBNAME} >&3 )"

if [[ -z "$CLUSTER" ]]; then
    cdb2sql ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("flush")'
    cdb2sql ${CDB2_OPTIONS} $DBNAME default 'exec procedure sys.cmd.send("reql events off")'
    
    kill_by_pidfile ${TMPDIR}/${DBNAME}.pid
    eval $deregister_db

    if [ "$CLEANUPDBDIR" == "1" ] && [ "$successful" == "1" ] && [ "x$DBDIR" != "x" ] ; then 
        rm -rf ${DBDIR}
    fi

else
    pidfilelist=""
    for node in $CLUSTER; do
        cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("flush")'
        cdb2sql ${CDB2_OPTIONS} $DBNAME --host $node 'exec procedure sys.cmd.send("reql events off")'
        check_pid_from_pidfile ${TMPDIR}/${DBNAME}.${node}.pid
    done

    # for clustered, killing ssh session which is running comdb2 cmd 
    # will kill server on that node
    if [ -n "$pidfilelist" ] ; then
        echo "killing $pidfilelist"
        kill -9 $pidfilelist
    fi
    cleanup
fi

echo "Unsetup completed"
exit 0

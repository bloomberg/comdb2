#!/usr/bin/env bash

# simple test to verify that new master does not block indefinitely when
# resuming a schema change that made zero progress from the previous master

source ${TESTSROOTDIR}/tools/runit_common.sh
source ${TESTSROOTDIR}/tools/cluster_utils.sh

bash -n "$0" | exit 1
[ -z "${CLUSTER}" ] && { echo "Test requires a cluster"; exit 0; }

dbnm=$1
master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'SELECT host FROM comdb2_cluster WHERE is_master="Y"'`

cdb2sql ${CDB2_OPTIONS} $dbnm default "CREATE TABLE t1 (a INTEGER)"
cdb2sql ${CDB2_OPTIONS} $dbnm default "INSERT INTO t1 VALUES (1)"

for node in $CLUSTER ; do
    cdb2sql $dbnm --host $node "EXEC PROCEDURE sys.cmd.send('on rep_delay')"
done

cdb2sql $dbnm --host $master "EXEC PROCEDURE sys.cmd.send('convert_record_sleep 1')"
cdb2sql ${CDB2_OPTIONS} $dbnm default "REBUILD t1" &
waitpid=$!
sleep 2 # give the master node a bit time to get to the convert thread
for node in $CLUSTER ; do
    kill_restart_node $node &
done

wait $waitpid
sleep 5
cdb2sql ${CDB2_OPTIONS} $dbnm default "INSERT INTO t1 VALUES (1)"

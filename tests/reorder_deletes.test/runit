#!/usr/bin/env bash
bash -n "$0" | exit 1

#set -e
set -x

source ${TESTSROOTDIR}/tools/runit_common.sh

if [[ "x${DEBUGGER}" == "xvalgrind" ]] ; then
    CDB2SQL_EXE="$DEBUGGER $CDB2SQL_EXE" 
fi

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0


assert_vers()
{
    local loc_tbl=$1
    local target=$2
    local newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$loc_tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}


insert_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."

    while [[ $j -le $nstop ]]; do 
        echo "insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'aabbccddeeffaabb$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))' ,'mycstring$j' ,'mypstring$j' ,x'$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))00000000$j , $((1-2*(j%2)))000000000000000$j )"
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
    done | cdb2sql ${CDB2_OPTIONS} $dbnm default &> $insfl || failexit "insert_records error"
    echo "done inserting round $nout"
}

populate_t2() {
    cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "DROP TABLE IF EXISTS t2" > t2.out
    cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "CREATE TABLE t2 {`cat t2.csc2`}" >> t2.out
    echo "begin" > t2.ins
    local j=0
    while [[ $j -lt 10 ]] ; do
        echo "insert into t2 values('1','${j}')" >> t2.ins
	let j=j+1
    done
    echo "commit" >> t2.ins
    cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default -f t2.ins >> t2.out 
    assertcnt t2 10
}

basic_deletes() {
    populate_t2
    echo "begin" > t2.ins
    echo "delete from t2 where text1='1'" >> t2.ins
    echo "commit" >> t2.ins
    cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default -f t2.ins >> t2.out
    count=`cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "select count(*) from t2 where text1='1'"` >> t2.out
    assertres $count 0
}


do_deletes()
{
    updater=$1
    count=1000

    j=0
    updfl=update${updater}.out
    sqlfl=update${updater}.sql
    echo "" > $updfl

    while [[ $j -le $count ]]; do 
        echo "begin" > $sqlfl
        i=0

        while [[ $i -lt $TRANSZ ]] ; do 
          echo "delete from t1 where a=$((RANDOM%NUM))"  >> $sqlfl
          let j=j+1
          let i=i+1
        done
        echo "commit" >> $sqlfl

        # the following may fail with "[commit] failed with rc 2 uncommittable txn on del genid=5270003 rc=404"
        cdb2sql ${CDB2_OPTIONS} $dbnm default -f $sqlfl  &> $updfl
        res=`grep '\[commit\]' $updfl`
        if [[ $res != "[commit] rc 0" && $res != "[commit] failed with rc 2 uncommittable"* ]] ; then
            failexit "update failed with unexpected error"
        fi

    done
    echo "done updater $updater"
}

basic_deletes
NUM=10000
TRANSZ=15
CONCURRENT=20


# round robin stripes will ensure an equal distribution of the genids accross the 8 dta stripes 
# thus lowering chance for updates to serialize on pages in the same dta
#SET maxtransize $NUM"
cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default - <<EOF &> ins1.out
INSERT INTO t1 (a,b,c,d,e,f,g) WITH i(x) AS ( VALUES(1) UNION ALL SELECT x+1 FROM i where x < $NUM) SELECT x,(random()+1)%100000,random()%100000,random()%100000,random()%100000,random()%100000,random()%100000 FROM i
EOF

wait
assertcnt t1 $NUM

cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.send('bdb verbdeadlock 1')"
i=0
while [[ $i -lt $CONCURRENT ]] ; do 
    do_deletes $i &
    let i=i+1
done

wait

# get master node
master=`getmaster`

export LOGDIR=$TESTDIR/logs # from setup
if [[ -z "$CLUSTER" ]] ; then
    mlog=$LOGDIR/${DBNAME}.db
else
    mlog=$LOGDIR/${DBNAME}.${master}.db
fi

ddcount=`grep -c DEADLOCK $mlog`
rr=$(cdb2sql -s --tabs ${CDB2_OPTIONS} $dbnm --host ${master} "select value from comdb2_tunables where name='reorder_idx_writes'")
limit=110
if [[ $DBNAME == *"noreordergenerated"* ]] ; then
    assertres $rr "OFF"
    if [[ $ddcount -lt $limit ]] ; then
        failexit "no reorder expected to get more than $limit deadlocks for this test"
    fi
else
    assertres $rr "ON"
    if [[ $ddcount -gt $limit ]] ; then
        failexit "reorder expected to get less than $limit deadlocks for this test"
    fi
fi


echo "Success"

#!/usr/bin/env bash
bash -n "$0" | exit 1

#PS4='$(date +%Y%m%d-%H:%M:%S): '
set -x

RESTART_DELAY=35
INITNUMREC=100
NUMREC=300

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

if [ -z $COMDB2_EXE ] ; then
   failexit '$COMDB2_EXE is not set'
fi

nout=0


failexit()
{
    echo "Failed $1"
    exit -1
}


assertcnt()
{
    target=$1
    cnt=$(cdb2sql --tabs --host $node $dbnm "select count(*) from t1")
    if [ $? -ne 0 ] ; then
        echo "assertcnt: select error"
    fi

    #echo "count is now $cnt"
    if [[ $cnt != $target ]] ; then
        failexit "count is now $cnt but should be $target"
    fi
}


assert_vers()
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs --host $node $dbnm "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
    tblver=$newver
}


assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs --host $node $dbnm "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs --host $node $dbnm 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

insert_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql --host $node $dbnm "insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'aabbccddeeffaabb$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))' ,'mycstring$j' ,'mypstring$j' ,x'$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))00000000$j , $((1-2*(j%2)))000000000000000$j )"  &>> $insfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
        sleep 0.01
    done
    echo "done inserting round $nout"
}

insert_records_with_bind()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl
#{ CDB2_INTEGER = 1, CDB2_REAL = 2, CDB2_CSTRING = 3, CDB2_BLOB = 4, CDB2_DATETIME = 6, CDB2_INTERVALYM = 7, CDB2_INTERVALDS = 8, CDB2_DATETIMEUS = 9, CDB2_INTERVALDSUS = 10 }
    while [[ $j -le $nstop ]]; do 
        echo $j
        echo "
@bind CDB2_INTEGER v_alltypes_short $(((1-2*(j%2))*$j))
@bind CDB2_INTEGER v_alltypes_u_short $j
@bind CDB2_INTEGER v_alltypes_int $((1-2*(j%2)))0000$j
@bind CDB2_INTEGER v_alltypes_u_int 10000$j
@bind CDB2_INTEGER v_alltypes_longlong $((1-2*(j%2)))000000000$j
@bind CDB2_REAL    v_alltypes_float $((1-2*(j%2)))00.00$j
@bind CDB2_REAL    v_alltypes_double $((1-2*(j%2)))0000$j.0000$j
@bind CDB2_CSTRING v_alltypes_cstring my cstring $j
@bind CDB2_CSTRING v_alltypes_pstring my pstring $j
@bind CDB2_CSTRING v_alltypes_datetime $(date +'%Y-%m-%dT%H:%M:%S')
@bind CDB2_CSTRING v_alltypes_datetimeus $(date +'%Y-%m-%dT%H:%M:%S')
@bind CDB2_CSTRING v_alltypes_vutf8 my vutf8 $j
@bind CDB2_CSTRING v_alltypes_intervalym $((1-2*(j%2)))$j
@bind CDB2_CSTRING v_alltypes_intervalds $((1-2*(j%2)))0000$j
@bind CDB2_CSTRING v_alltypes_decimal32 $((1-2*(j%2)))0000$j
@bind CDB2_CSTRING v_alltypes_decimal64 $((1-2*(j%2)))0000000$j
@bind CDB2_CSTRING v_alltypes_decimal128 $((1-2*(j%2)))000000000000000$j
insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_cstring, alltypes_pstring, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values (@v_alltypes_short, @v_alltypes_u_short, @v_alltypes_int, @v_alltypes_u_int, @v_alltypes_longlong, @v_alltypes_float, @v_alltypes_double, @v_alltypes_cstring, @v_alltypes_pstring, @v_alltypes_datetime, @v_alltypes_datetimeus, @v_alltypes_vutf8, @v_alltypes_intervalym, @v_alltypes_intervalds, @v_alltypes_decimal32, @v_alltypes_decimal64, @v_alltypes_decimal128)" | cdb2sql --host $node $dbnm - &>> $insfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
        sleep 0.01
    done
    echo "done inserting round $nout"
}

update_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    updfl=update${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $updfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql --host $node $dbnm "update t1 set alltypes_short=alltypes_short+1, alltypes_int=alltypes_int+1,alltypes_u_int=alltypes_u_int+1,alltypes_longlong=alltypes_longlong+1,alltypes_float=alltypes_float=1,alltypes_double=alltypes_double+1,alltypes_decimal32=alltypes_decimal32+1,alltypes_decimal64=alltypes_decimal64+1,alltypes_decimal128=alltypes_decimal128+1 where alltypes_u_short=$j"  &>> $updfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
        sleep 0.01
    done
    echo "done updating round $nout"
}

update_records_with_bind()
{
    j=$1
    nstop=$2
    let nout=nout+1
    updfl=update${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $updfl

    while [[ $j -le $nstop ]]; do 
        jpone=$j+1
        echo "
@bind CDB2_INTEGER v_alltypes_u_short $j
@bind CDB2_INTEGER v_alltypes_int $jpone
update t1 set alltypes_u_int=1+@v_alltypes_u_int where alltypes_u_short=@v_alltypes_u_short" | cdb2sql --host $node $dbnm - &>> $updfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
        sleep 0.01
    done
    echo "done updating round $nout"
}


delete_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    delfl=delete${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $delfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql --host $node $dbnm "delete from t1 where alltypes_u_short=$j"  &>> $delfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
        sleep 0.01
    done
    echo "done updating round $nout"
}

# Make sure we talk to the same host
node=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "SELECT comdb2_host()"`
export CDB2_HOST="$node"

echo "Test with insert, SC should not fail"

cdb2sql --host $node $dbnm "exec procedure sys.cmd.send('debg 0')"
#cdb2sql --host $node $dbnm "drop table t1"
#cdb2sql --host $node $dbnm "create table t1  { `cat alltypes.csc2 ` }"

cdb2sql --host $node $dbnm "select * from t2"

assert_vers t1 0
assert_schema t1 alltypes.csc2

let NEWNUMREC=$((2*INITNUMREC))
insert_records 1 $NEWNUMREC
assertcnt $NEWNUMREC

update_records 1 $NEWNUMREC
assertcnt $NEWNUMREC

delete_records $((INITNUMREC+1)) $NEWNUMREC
assertcnt $INITNUMREC

let NEWSTRT=$((INITNUMREC+1))
insert_records_with_bind $NEWSTRT $NEWNUMREC
assertcnt $NEWNUMREC

#update_records_with_bind $NEWSTRT $NEWNUMREC
#assertcnt $NEWNUMREC

set -e
#echo "Now call task that uses cdb2api to ins/upd/del"
${TESTSBUILDDIR}/cdb2api_caller $dbnm t1 > cdb2api_caller.out

cdb2sql --host $node $dbnm "select * from t1 order by alltypes_u_short" > orig.txt


cluster=`cdb2sql --tabs --host $node $dbnm 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `

cdb2sql --tabs --host $node $dbnm 'exec procedure sys.cmd.send("flush")'
cdb2sql --tabs --host $node $dbnm 'exec procedure sys.cmd.send("reql events roll")'

set +e

cdb2sql --tabs --host $node $dbnm 'exec procedure sys.cmd.send("exit")'
sleep 10

if [ $node != `hostname` ] ; then
    ssh -o StrictHostKeyChecking=no $node "ls -ltr $TESTDIR/var/log/cdb2/ | grep events"
    logfl=`ssh -o StrictHostKeyChecking=no $node "ls -1Sr $TESTDIR/var/log/cdb2/ | grep events | grep $dbnm | tail -1"`
    logfl=`ssh -o StrictHostKeyChecking=no $node "find $TESTDIR/var/log/cdb2/ | grep $logfl"`
    logflunziped=`pwd`/${node}.events.unzipped
    ssh -o StrictHostKeyChecking=no $node wc $logfl
    ssh -o StrictHostKeyChecking=no $node "zcat $logfl" > $logflunziped
else
    ls -ltr $TESTDIR/var/log/cdb2/ | grep events
    logfl=`ls -1Sr $TESTDIR/var/log/cdb2/ | grep events | grep $dbnm | tail -1`
    logfl=`find $TESTDIR/var/log/cdb2/ | grep $logfl`
    logflunziped=${logfl}.unzipped
    wc $logfl
    zcat $logfl > $logflunziped
fi

echo "main db vars"
vars="TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR CDB2_OPTIONS CDB2_CONFIG"
for required in $vars; do
    q=${!required}
    echo "$required=$q" 
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        exit 1
    fi
done

alterdbname=alter$dbnm
dbdir=$DBDIR
testdir=$TESTDIR
cdb2config=$CDB2_CONFIG

DBNAME=$alterdbname
DBDIR=$TESTDIR/$DBNAME
#effectively alterDB config -- needed to setup alterDB
CDB2_CONFIG=$DBDIR/comdb2db.cfg
CDB2_OPTIONS="--cdb2cfg $CDB2_CONFIG"

echo "remote db vars"
vars="TESTCASE DBNAME DBDIR TESTSROOTDIR TESTDIR CDB2_OPTIONS CDB2_CONFIG"
for required in $vars; do
    q=${!required}
    echo "$required=$q" 
    if [[ -z "$q" ]]; then
        echo "$required not set" >&2
        exit 1
    fi
done

set -e

#setup remode db
$TESTSROOTDIR/setup

echo running $CDB2_SQLREPLAY_EXE $alterdbname $logflunziped
$CDB2_SQLREPLAY_EXE $alterdbname $logflunziped > sqlreplay.out
cdb2sql ${CDB2_OPTIONS} $alterdbname default "select * from t1 order by alltypes_u_short" > replayed.txt

set +e
success=1

if ! diff orig.txt replayed.txt ; then
        success=0
fi

set -e
$TESTSROOTDIR/unsetup $success
set +e

if [ $success != 1 ] ; then
    failexit "replayed.txt content is not the same as original.txt"
fi

if [ "$CLEANUPDBDIR" == "1" ] ; then
    #delete files now that test is successful
    rm orig.txt replayed.txt sqlreplay.out
fi

echo "Success"

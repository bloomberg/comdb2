#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

INITNUMREC=100

if [ "x${DBNAME}" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

if [ -z $COMDB2_EXE ] ; then
   failexit '$COMDB2_EXE is not set'
fi

nout=0  # file extension counter


assert_vers()
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} default "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        failexit "newver is now $newver but should be $target"
    fi
    tblver=$newver
}

assert_schema()
{
    tbl=$1
    schema=$2

    echo "make sure that the current schema is $schema"
    cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} default "select csc2 from sqlite_master where name='$tbl'" | sed 's/ \(schema\)/\1/;s/} /}/' > schema.out

    if ! diff -Bw schema.out $schema ; then 
        cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} default 'select * from sqlite_master' > sqlite_master.out
        failexit "final schema is not same as $schema: diff schema.out $schema"
    fi
}

insert_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_byte, alltypes_cstring, alltypes_pstring, alltypes_blob, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_intervaldsus, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values ( $((1-2*(j%2)))$j ,$j ,$((1-2*(j%2)))0000$j ,10000$j ,$((1-2*(j%2)))000000000$j ,$((1-2*(j%2)))00.00$j ,$((1-2*(j%2)))0000$j.0000$j ,x'aabbccddeeffaabb$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))$((j%2))$((j%3))$((j%4))$((j%5))' ,'mycstring$j' ,'mypstring$j' ,x'$((j%2))$((j%3))$((j%4))$((j%5))' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'$(date +'%Y-%m-%dT%H:%M:%S')' ,'myvutf8$j' ,$((1-2*(j%2)))$j ,$((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))0000$j , $((1-2*(j%2)))00000000$j , $((1-2*(j%2)))000000000000000$j )"  &>> $insfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        # use for compare? echo "a=$j, b='test1$j', c='$j'" >> rows.out
        let j=j+1
        sleep 0.01
    done
    echo "done inserting round $nout"
}

insert_records_with_bind()
{
    j=$1
    nstop=$2
    let nout=nout+1
    insfl=insert${nout}.out
    echo "Inserting $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $insfl
#{ CDB2_INTEGER = 1, CDB2_REAL = 2, CDB2_CSTRING = 3, CDB2_BLOB = 4, CDB2_DATETIME = 6, CDB2_INTERVALYM = 7, CDB2_INTERVALDS = 8, CDB2_DATETIMEUS = 9, CDB2_INTERVALDSUS = 10 }
    while [[ $j -le $nstop ]]; do 
        echo $j
        echo "
@bind CDB2_INTEGER v_alltypes_short $(((1-2*(j%2))*$j))
@bind CDB2_INTEGER v_alltypes_u_short $j
@bind CDB2_INTEGER v_alltypes_int $((1-2*(j%2)))0000$j
@bind CDB2_INTEGER v_alltypes_u_int 10000$j
@bind CDB2_INTEGER v_alltypes_longlong $((1-2*(j%2)))000000000$j
@bind CDB2_REAL    v_alltypes_float $((1-2*(j%2)))00.00$j
@bind CDB2_REAL    v_alltypes_double $((1-2*(j%2)))0000$j.0000$j
@bind CDB2_CSTRING v_alltypes_cstring my cstring $j
@bind CDB2_CSTRING v_alltypes_pstring my pstring $j
@bind CDB2_CSTRING v_alltypes_datetime $(date +'%Y-%m-%dT%H:%M:%S')
@bind CDB2_CSTRING v_alltypes_datetimeus $(date +'%Y-%m-%dT%H:%M:%S')
@bind CDB2_CSTRING v_alltypes_vutf8 my vutf8 $j
@bind CDB2_CSTRING v_alltypes_intervalym $((1-2*(j%2)))$j
@bind CDB2_CSTRING v_alltypes_intervalds $((1-2*(j%2)))0000$j
@bind CDB2_CSTRING v_alltypes_decimal32 $((1-2*(j%2)))0000$j
@bind CDB2_CSTRING v_alltypes_decimal64 $((1-2*(j%2)))0000000$j
@bind CDB2_CSTRING v_alltypes_decimal128 $((1-2*(j%2)))000000000000000$j
insert into t1(alltypes_short, alltypes_u_short, alltypes_int, alltypes_u_int, alltypes_longlong, alltypes_float, alltypes_double, alltypes_cstring, alltypes_pstring, alltypes_datetime, alltypes_datetimeus, alltypes_vutf8, alltypes_intervalym, alltypes_intervalds, alltypes_decimal32, alltypes_decimal64, alltypes_decimal128) values (@v_alltypes_short, @v_alltypes_u_short, @v_alltypes_int, @v_alltypes_u_int, @v_alltypes_longlong, @v_alltypes_float, @v_alltypes_double, @v_alltypes_cstring, @v_alltypes_pstring, @v_alltypes_datetime, @v_alltypes_datetimeus, @v_alltypes_vutf8, @v_alltypes_intervalym, @v_alltypes_intervalds, @v_alltypes_decimal32, @v_alltypes_decimal64, @v_alltypes_decimal128)" | cdb2sql ${CDB2_OPTIONS} ${DBNAME} default - &>> $insfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
        sleep 0.01
    done
    echo "done inserting round $nout"
}

update_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    updfl=update${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $updfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "update t1 set alltypes_short=alltypes_short+1, alltypes_int=alltypes_int+1,alltypes_u_int=alltypes_u_int+1,alltypes_longlong=alltypes_longlong+1,alltypes_float=alltypes_float=1,alltypes_double=alltypes_double+1,alltypes_decimal32=alltypes_decimal32+1,alltypes_decimal64=alltypes_decimal64+1,alltypes_decimal128=alltypes_decimal128+1 where alltypes_u_short=$j"  &>> $updfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
        sleep 0.01
    done
    echo "done updating round $nout"
}

update_records_with_bind()
{
    j=$1
    nstop=$2
    let nout=nout+1
    updfl=update${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $updfl

    while [[ $j -le $nstop ]]; do 
        jpone=$j+1
        echo "
@bind CDB2_INTEGER v_alltypes_u_short $j
@bind CDB2_INTEGER v_alltypes_int $jpone
update t1 set alltypes_u_int=1+@v_alltypes_u_int where alltypes_u_short=@v_alltypes_u_short" | cdb2sql ${CDB2_OPTIONS} ${DBNAME} default - &>> $updfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
        sleep 0.01
    done
    echo "done updating round $nout"
}


delete_records()
{
    j=$1
    nstop=$2
    let nout=nout+1
    delfl=delete${nout}.out
    echo "Updating $((nstop-j+1)) records ($j to $nstop)."
    echo "" > $delfl

    while [[ $j -le $nstop ]]; do 
        cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "delete from t1 where alltypes_u_short=$j"  &>> $delfl
        if [ $? -ne 0 ]; then 
            sleep 1
            continue
        fi
        let j=j+1
        sleep 0.01
    done
    echo "done updating round $nout"
}

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
for node in $cluster ; do
    cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} --host $node 'exec procedure sys.cmd.send("reql events roll")'
done

cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "create table t1  { `cat alltypes.csc2 ` }"

# following is an error because t2 does not exist, resulting in a 
# fingerprint of 00000 so will not ba replayed
cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "select * from t2"

assert_vers t1 0
assert_schema t1 alltypes.csc2

let NEWNUMREC=$((2*INITNUMREC))
insert_records 1 $NEWNUMREC
assertcnt t1 $NEWNUMREC

update_records 1 $NEWNUMREC
assertcnt t1 $NEWNUMREC

delete_records $((INITNUMREC+1)) $NEWNUMREC
assertcnt t1 $INITNUMREC

let NEWSTRT=$((INITNUMREC+1))
insert_records_with_bind $NEWSTRT $NEWNUMREC
assertcnt t1 $NEWNUMREC

#update_records_with_bind $NEWSTRT $NEWNUMREC
#assertcnt t1 $NEWNUMREC

set -e
#echo "Now call task that uses cdb2api to ins/upd/del"
${TESTSBUILDDIR}/cdb2api_caller ${DBNAME} t1 > cdb2api_caller.out
cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "select * from t1 order by alltypes_u_short" > orig.txt



logflunziped=events.unzipped
if [[ -z "$CLUSTER" ]]; then
    logfl=`cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "exec procedure sys.cmd.send('reql stat')"  | grep Eventlog | sed "s/[^:]*:\(.*\)')/\1/g"`
    cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} default 'exec procedure sys.cmd.send("flush")'
    cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} default 'exec procedure sys.cmd.send("reql events roll")'

    zcat $logfl | grep --text -v 'sys.cmd.send' | sort -n > $logflunziped

else

    for node in $CLUSTER ; do
        logfl=`cdb2sql ${CDB2_OPTIONS} ${DBNAME} --host $node "exec procedure sys.cmd.send('reql stat')"  | grep Eventlog | sed "s/[^:]*:\(.*\)')/\1/g"`
        cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} --host $node 'exec procedure sys.cmd.send("flush")'
        cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} --host $node 'exec procedure sys.cmd.send("reql events roll")'
        ssh -o StrictHostKeyChecking=no $node "zcat $logfl" | grep --text -v 'sys.cmd.send' > ${node}.events.unzipped
    done
    sort -n *.events.unzipped > $logflunziped
fi

set +e

echo "Make sure that the data we expect is in the event log file"
echo $logflunziped
jq -r 'if (.type == "sql") and has("fingerprint") then .fingerprint else empty end' < $logflunziped | sort | uniq -c > fingerprints_only.out
if ! diff fingerprints_only.out fingerprints_freq.exp ; then
    failexit "fingerprints_only.out contains different fingerprint data than expected"
fi


count=$(jq -rc 'if (.type == "sql") or (.type == "txn") then . else empty end' < $logflunziped | wc -l)
CSHOULDBE=8210 # number of lines that should be in the log when single node
if [[ $count -ne $CSHOULDBE ]] ; then
    failexit "$logflunziped contains $count rather than $CSHOULDBE entries"
fi



echo "working with secondary db"

cluster=`cdb2sql --tabs ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
for node in $cluster ; do
    cdb2sql --tabs ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME --host $node 'exec procedure sys.cmd.send("reql events roll")'
done

echo running "CDB2_CONFIG=\"${SECONDARY_CDB2_CONFIG}\" $CDB2_SQLREPLAY_EXE $SECONDARY_DBNAME $logflunziped > sqlreplay.out"
CDB2_CONFIG="${SECONDARY_CDB2_CONFIG}" $CDB2_SQLREPLAY_EXE $SECONDARY_DBNAME $logflunziped > sqlreplay.out

echo "Get the secondary db event logs"
slogflunziped=secondary_events.unzipped
if [[ -z "$CLUSTER" ]]; then
    logfl=`cdb2sql ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME default "exec procedure sys.cmd.send('reql stat')"  | grep Eventlog | sed "s/[^:]*:\(.*\)')/\1/g"`
    cdb2sql --tabs ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME default 'exec procedure sys.cmd.send("flush")'
    cdb2sql --tabs ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME default 'exec procedure sys.cmd.send("reql events roll")'

    zcat $logfl | grep --text -v 'sys.cmd.send' | sort -n > $slogflunziped

else

    for node in $CLUSTER ; do
        logfl=`cdb2sql ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME --host $node "exec procedure sys.cmd.send('reql stat')"  | grep Eventlog | sed "s/[^:]*:\(.*\)')/\1/g"`
        cdb2sql --tabs ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME --host $node 'exec procedure sys.cmd.send("flush")'
        cdb2sql --tabs ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME --host $node 'exec procedure sys.cmd.send("reql events roll")'
        ssh -o StrictHostKeyChecking=no $node "zcat $logfl" | grep --text -v 'sys.cmd.send' > ${node}.events.unzipped
    done
    sort -n *.events.unzipped > $slogflunziped
fi

cdb2sql ${SECONDARY_CDB2_OPTIONS} $SECONDARY_DBNAME default "select * from t1 order by alltypes_u_short" > replayed.txt

success=1

if ! diff orig.txt replayed.txt ; then
    success=0
fi

if [ $success != 1 ] ; then
    failexit "replayed.txt content is not the same as original.txt"
fi


count=$(jq -rc 'if (.type == "sql") or (.type == "txn") then . else empty end' < $slogflunziped | wc -l)
CSHOULDBE=$((CSHOULDBE-1)) # one less than the orig which had an error which does not get replayed
if [[ $count -ne $CSHOULDBE ]] ; then
    failexit "$slogflunziped contains $count rather than $CSHOULDBE entries"
fi

jq 'if (.type == "sql") and (.fingerprint != "00000000000000000000000000000000") then [.fingerprint, .sql] | @csv else empty end' < $logflunziped > 1.out
jq 'if (.type == "sql") then [.fingerprint, .sql] | @csv else empty end' < $slogflunziped > 2.out
if ! diff 1.out 2.out ; then
    failexit "fingerprint and sql content is not same (1.out vs 2.out)"
fi

if [ "$CLEANUPDBDIR" != "0" ] ; then
    #delete files now that test is successful
    rm 1.out 2.out orig.txt replayed.txt sqlreplay.out $logflunziped $slogflunziped
fi

echo "Success"

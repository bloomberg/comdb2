#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ "$debug" == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/runit_common.sh

export maxtable=50
export stopfile=./stopfile.txt

function create_table
{
    typeset func=create_table
    write_prompt $func "Creating table"
    $CDB2SQL_EXE -s --cdb2cfg ${CDB2_CONFIG} ${DBNAME} default "create table t1 (a int)" >/dev/null 2>&1
    [[ "$?" == "0" ]] && write_prompt $func "Created table t1"
}

function insert_thd
{
    while [[ ! -f $stopfile ]]; do
        $CDB2SQL_EXE --cdb2cfg ${CDB2_CONFIG} ${DBNAME} default "insert into t1 select * from generate_series(1, 1000)" >/dev/null 2>&1
    done
}

function findmaster
{
    $CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default 'select host from comdb2_cluster where is_master="Y"'
}

function current_log_file
{
    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('bdb logstat')" | egrep st_cur_file)
    echo "${x##* }"
}

function oldest_txn_file
{
    typeset oldest=-1
    master=$(findmaster)
    x=$($CDB2SQL_EXE --tabs $CDB2_OPTIONS $DBNAME --host $master  "exec procedure sys.cmd.send('bdb txnstat')"  | egrep -A 1 "active transactions"  2>&1 | egrep -v "active transactions" | awk '{print $NF}')
    for l in $x ; do
        f=${l%%:*}
        if [[ "$oldest" == "-1" || "$f" -lt "$oldest" ]]; then
            oldest=$f
        fi 
    done
    echo $oldest
}

function run_test
{
    typeset maxtime=`echo "(${TEST_TIMEOUT%%m}-2)*60" | bc`
    typeset now=$(date +%s)
    typeset endtime=$(( now + maxtime ))
    typeset func=run_test
    typeset logtarget=10
    rm -f $stopfile >/dev/null 2>&1
    create_table

    j=0
    while [[ $j -lt 10 ]]; do
        insert_thd &
        let j=j+1
    done

    while [[ ! -f $stopfile && "$(date +%s)" -lt "$endtime" ]]; do
        master=$(findmaster)
        $CDB2SQL_EXE $CDB2_OPTIONS --host $master $DBNAME "exec procedure sys.cmd.send('leaktxn')";
        oldest=$(oldest_txn_file)
        clog=$(current_log_file)
        if [[ $(( clog - oldest )) -gt "$logtarget" ]]; then
            echo "met log-target, unleak & downgrade"
            $CDB2SQL_EXE $CDB2_OPTIONS --host $master $DBNAME "exec procedure sys.cmd.send('unleaktxn')";
            $CDB2SQL_EXE $CDB2_OPTIONS --host $master $DBNAME "exec procedure sys.cmd.send('downgrade')";
        else
            echo "oldest txn file is $oldest, current is $clog, logtarget is $logtarget, not downgrading"
            echo "Need current to be older than $(( oldest + logtarget ))"
        fi
        sleep 10
    done

    touch $stopfile
    echo "waiting for inserters to stop"
    wait

    # We succeed if the replicants never run recovery
    # Ignore truncates in the first file
    skip=$(egrep skip-recovery ${TESTDIR}/logs/${DBNAME}*db | egrep -v "trunc-lsn=\[1:")

    if [[ -z "$skip" ]]; then
        failexit "skip-recovery messages not found"
    fi
    echo "Found skip-recovery"
    echo "$skip"
    if [[ $skip == *"skip-recovery cannot skip"* ]]; then
        failexit "skip-recovery ran recovery"
    fi

    echo "Tell everything to unleak-txn"
    for n in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS --host $n $DBNAME "exec procedure sys.cmd.send('unleaktxn')"
    done

    echo "Nothing recovered- success!"
}

run_test
echo "Success!"

#!/usr/bin/env bash
bash -n "$0" | exit 1

# Current version
curv=0

# Current 'id'
id=0

# Number of records to insert
numins=40

# Debug variable
debug=0

# Dbname is first arg.
db=$1

# Sanity check
if [[ -z "$db" ]]; then

    echo "Test requires <dbname> as it's argument."
    exit 1

fi

# Verify that this works
function selecttest
{
    typeset selrec

    [[ "$debug" == 1 ]] && set -x

    selrec=./t_v${curv}_sel.txt
    err=./t_v${curv}.err
    out=./t_v${curv}.out

    if [[ -f $selrec ]]; then

        echo "cdb2sql ${CDB2_OPTIONS} $db default - < $selrec"
        cdb2sql ${CDB2_OPTIONS} $db default - < $selrec >$out 2>$err

    else

        echo cdb2sql ${CDB2_OPTIONS} $db default "select * from t order by id"
        cdb2sql ${CDB2_OPTIONS} $db default "select * from t order by id" >$out 2>$err

    fi

    if [[ $? != 0 ]]; then

        echo "Error in select."
        exit 1

    fi

    if [[ -s $err ]]; then

        echo "Select error"
        cat $err
        exit 1

    fi

    return 0
}

# Function to insert records
function insertrec
{
    typeset iter=$1
    typeset insrec
    typeset i=0

    [[ "$debug" == 1 ]] && set -x

    insrec=./t_v${curv}_sql.txt

    # Check for special insert for this schema
    if [[ -f $insrec ]]; then

        echo "cdb2sql ${CDB2_OPTIONS} $db default - < $insrec"
        cdb2sql -s ${CDB2_OPTIONS} $db default - < $insrec &> /dev/null

    else

        while [[ $i -lt $iter ]]; do

            echo cdb2sql -s ${CDB2_OPTIONS} $db default "insert into t(id) values($id)"
            cdb2sql -s ${CDB2_OPTIONS} $db default "insert into t(id) values($id)" &> /dev/null

            if [[ $? != 0 ]]; then

                echo "Error writing to database."
                exit 1

            fi

            let id=id+1
            let i=i+1

        done

    fi

    return 0
}

# Schemachange to the next schema
function nextschema
{
    typeset csc2
    let curv=curv+1

    [[ "$debug" == 1 ]] && set -x

    csc2=./t_v${curv}.csc2

    if [[ ! -f $csc2 ]] ; then

        return 1

    fi

    # Change my schema
    echo " "
    echo alter t $csc2
    cdb2sql ${CDB2_OPTIONS} $db default "alter table t { `cat $csc2 ` }"

    if [[ $? != 0 ]]; then

        echo "Schema change error."
        exit 1

    fi

    # Sleep here- it takes a second after we return from this before the new 
    # definition is recognized.  This isn't work fixing: we don't need split-
    # second accuracy for schema changes.
    sleep 1
    
    return 0
}

# Make sure we're on the default schema
cdb2sql ${CDB2_OPTIONS} $db default "drop table t"
cdb2sql ${CDB2_OPTIONS} $db default "create table t { `cat t.csc2 ` }"

# Change schemas and select back in a loop
while nextschema ; do

    insertrec $numins
    selecttest

done

# If we made it this far, we've passed
echo "Testcase passed."

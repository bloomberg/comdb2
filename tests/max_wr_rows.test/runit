#!/usr/bin/env bash
bash -n "$0" | exit 1

source ${TESTSROOTDIR}/tools/runit_common.sh

# Tests max_wr_rows_per_txn tunable
debug=1

[[ "$debug" == 1 ]] && set -x
db=$1

if [[ -z "$stage" ]]; then
    echo "Setting stage to 'default' (set 'stage' var to override)."
    stage="default"
fi

if [[ -n "$CLUSTER" ]]; then
    failexit "This test only works in NON-CLUSTERED mode."
fi


function createtables
{
    [[ "$debug" == 1 ]] && set -x
    cdb2sql ${CDB2_OPTIONS} $db $stage "create table t1 {schema{int id} keys{ \"id\" = id }}"
    cdb2sql ${CDB2_OPTIONS} $db $stage "create table t2 {schema{int id} keys{ dup \"id\" = id } constraints { \"id\" -> \"t1\":\"id\" on delete cascade on update cascade }}"
    cdb2sql ${CDB2_OPTIONS} $db $stage "create table t3 (i int)"
    cdb2sql ${CDB2_OPTIONS} $db $stage "create table t4 (i int)"
}

function insert_records
{
    [[ "$debug" == 1 ]] && set -x
    local val=$1
    local cnt=$2
    local i=0

    cdb2sql ${CDB2_OPTIONS} $db $stage "insert into t1 (id) values ($val)" >/dev/null 2>&1
    for ((i=0; i < $cnt; i++)) ; do
        echo "insert into t2 (id) values ($val)" 
    done | cdb2sql ${CDB2_OPTIONS} $db $stage &> out.txt || failexit "inserting, see out.txt"
}

function runtest
{
    [[ "$debug" == 1 ]] && set -x

    # Load table
    insert_records 1 50
    insert_records 2 100
    insert_records 4 200

    # Base-case: I should be able to update 4 to 5 .. after this i should see 200 5's in t2
    cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 5 where id = 4" >/dev/null 2>&1
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t2 where id = 5" 2>&1)

    if [[ "$x" != "(count(*)=200)" ]]; then 
        failexit "Update of 4 to 5 didn't cascade!"
    fi

    # This should fail
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 10"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1 where id = 1" 2>&1)
    if [[ "$x" != *"cascaded delete exceeds max writes"* ]]; then
        failexit "Tunable of 10 failed to prevent delete cascade for 1!"
    fi

    # This should also fail
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 50"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1 where id = 1" 2>&1)
    if [[ "$x" != *"cascaded delete exceeds max writes"* ]]; then
        failexit "Tunable of 50 failed to prevent delete cascade for 1!"
    fi

    # This should succeed
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 51"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1 where id = 1" 2>&1)
    if [[ "$x" != "(rows deleted=1)" ]]; then
        failexit "Tunable of 51 failed to allow delete cascade for 1!"
    fi

    # This should fail
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 100"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 1 where id = 2" 2>&1)
    if [[ "$x" != *"cascaded update exceeds max writes"* ]]; then
        failexit "Tunable of 100 failed to prevent update cascade from 2 to 1!"
    fi

    # This should succeed
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 101"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 1 where id = 2" 2>&1)
    if [[ "$x" != "(rows updated=1)" ]]; then
        failexit "Tunable of 101 failed to allow update cascade from 2 to 1!"
    fi

    # Generate a file that will do 100 inserts of 2 into t2 in a single txn
    fl=insert_sql.$$.txt
    echo "BEGIN" > $fl
    i=0
    while [[ $i -lt 100 ]] ; do
        echo "INSERT INTO t2 (id) values (2)" >> $fl
        let i=i+1
    done
    echo "COMMIT" >> $fl

    # Try to run this transaction with only 99 wr_rows_per txn allowed: it should fail
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 99"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage - < $fl 2>&1)

    if [[ "$x" != *"208"* ]]; then
        rm $fl
        failexit "Tunable of 99 failed to prevent insert of 100 records!"
    fi

    # Try the transaction again allowing 100 writes per txn: this should succeed
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 100"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage - < $fl 2>&1)
    if [[ "$x" != *"rc 0"* ]]; then
        rm $fl
        failexit "Tunable of 100 failed to allow insert of 100 records!"
    fi

    rm $fl

    # Insert into dependent table t1
    cdb2sql ${CDB2_OPTIONS} $db $stage "INSERT INTO t1(id) values (100)" >/dev/null 2>&1

    # Try to update these (& fail)
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 99"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "update t2 set id = 100 where id = 1" 2>&1)
    if [[ "$x" != *"208"* ]]; then
        failexit "Tunable of 99 failed to prevent update of 100 records!"
    fi

    # Reset tunable to 100 & update again
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 100"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "update t2 set id = 100 where id = 1" 2>&1)
    if [[ "$x" != "(rows updated=100)" ]]; then
        failexit "Tunable of 100 failed to allow update of 100 records!"
    fi

    # Set tunable to 99, attempt to delete (and fail)
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 99"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t2 where id = 100" 2>&1)
    if [[ "$x" != *"208"* ]]; then
        failexit "Tunable of 99 failed to prevent delete of 100 records!"
    fi

    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 100"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t2 where id = 100" 2>&1)
    if [[ "$x" != "(rows deleted=100)" ]]; then
        failexit "Tunable of 100 failed to allow delete of 100 records!"
    fi
}

# same idea as max_wr_rows_per_txn but use max_cascaded_rows_per_txn tunable
# which only counts the cascaded rows being updated by this txn
function runtest_max_cascades
{
    [[ "$debug" == 1 ]] && set -x

    # turn off max_wr_rows_per_txn
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_wr_rows_per_txn 0"

    cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t1"
    cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t2"

    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 100"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1" 2>&1)
    if [[ "$x" != *"cascaded delete exceeds max writes"* ]]; then
        failexit "Tunable of 100 failed to prevent delete cascade!"
    fi

    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 1000"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1" 2>&1)
    if [[ "$x" != "(rows deleted=3)" ]]; then
        failexit "Tunable of 1000 failed to allow delete cascade for 1!"
    fi


    # Load table
    insert_records 1 50
    insert_records 2 100
    insert_records 4 200

    # Base-case: I should be able to update 4 to 5 .. after this i should see 200 5's in t2
    cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 5 where id = 4" >/dev/null 2>&1
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t2 where id = 5" 2>&1)

    if [[ "$x" != "(count(*)=200)" ]]; then 
        failexit "Update of 4 to 5 didn't cascade!"
    fi

    cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t1 where id = 1"
    cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t2 where id = 1"
    # This should fail
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 10"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1 where id = 1" 2>&1)
    if [[ "$x" != *"cascaded delete exceeds max writes"* ]]; then
        failexit "Tunable of 10 failed to prevent delete cascade for 1!"
    fi

    # This should also fail
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 49"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1 where id = 1" 2>&1)
    if [[ "$x" != *"cascaded delete exceeds max writes"* ]]; then
        failexit "Tunable of 50 failed to prevent delete cascade for 1!"
    fi

    # This should succeed
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 50"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1 where id = 1" 2>&1)
    if [[ "$x" != "(rows deleted=1)" ]]; then
        failexit "Tunable of 51 failed to allow delete cascade for 1!"
    fi

    # This should fail
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 99"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 1 where id = 2" 2>&1)
    if [[ "$x" != *"cascaded update exceeds max writes"* ]]; then
        failexit "Tunable of 99 failed to prevent update cascade from 2 to 1!"
    fi

    # This should succeed
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 100"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 1 where id = 2" 2>&1)
    if [[ "$x" != "(rows updated=1)" ]]; then
        failexit "Tunable of 100 failed to allow update cascade from 2 to 1!"
    fi

    cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t1 where id = 1"
    cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t2 where id = 1"

    cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t1 where id = 100"
    cdb2sql ${CDB2_OPTIONS} $db $stage "select count(*) from t2 where id = 100"

    # Try to update these (& fail)
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 99"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 100 where id = 1" 2>&1)
    if [[ "$x" != *"cascaded update exceeds max writes"* ]]; then
        failexit "Tunable of 99 failed to prevent update of 100 cascading records!"
    fi

    # Reset tunable to 100 & update again
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 100"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "update t1 set id = 100 where id = 1" 2>&1)
    if [[ "$x" != "(rows updated=1)" ]]; then
        failexit "Tunable of 100 failed to allow update of 100 cascading records!"
    fi

    # Set tunable to 98, attempt to delete (and fail)
    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 99"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1 where id = 100" 2>&1)
    if [[ "$x" != *"cascaded delete exceeds max writes"* ]]; then
        failexit "Tunable of 99 failed to prevent delete of 100 cascading records!"
    fi

    cdb2sql ${CDB2_OPTIONS} $db $stage "PUT TUNABLE max_cascaded_rows_per_txn 100"
    x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "delete from t1 where id = 100" 2>&1)
    if [[ "$x" != "(rows deleted=1)" ]]; then
        failexit "Tunable of 100 failed to allow delete of 100 cascading records!"
    fi
}

function runtest_max_ttl
{
    cdb2sql ${CDB2_OPTIONS} $db $stage "insert into t3 (i) values (1)"
    cdb2sql ${CDB2_OPTIONS} $db $stage "exec procedure sys.cmd.send('bdb setattr DELAY_WRITES_IN_RECORD_C 2000')"
    cdb2sql ${CDB2_OPTIONS} $db $stage "insert into t3 (i) values (2)"
    cdb2sql ${CDB2_OPTIONS} $db $stage "put tunable max_time_per_txn_ms 1000"
    local x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "insert into t3 (i) values (3)" 2>&1)
    if [[ "$x" != *"Transaction exceeds max time limit"* ]]; then
        failexit "Expected: Transaction exceeds max time limit"
    fi
    # also assert that the last insert did not succeed
    local cnt=`cdb2sql ${CDB2_OPTIONS} --tabs $db $stage "select count(i) from t3"`
    assertres $cnt 2
    cdb2sql ${CDB2_OPTIONS} $db $stage "exec procedure sys.cmd.send('bdb setattr DELAY_WRITES_IN_RECORD_C 0')"
    cdb2sql ${CDB2_OPTIONS} $db $stage "put tunable max_time_per_txn_ms 0"
}

function runtest_max_logbytes
{
    cdb2sql ${CDB2_OPTIONS} $db $stage "insert into t4 (i) values (1)"
    cdb2sql ${CDB2_OPTIONS} $db $stage "put tunable max_wr_logbytes_per_txn 1"
    local x=$(cdb2sql ${CDB2_OPTIONS} $db $stage "insert into t4 (i) values (2)" 2>&1)
    if [[ "$x" != *"Transaction exceeds max log-bytes limit"* ]]; then
        failexit "Expected: Transaction exceeds max log-bytes limit"
    fi
    local cnt=`cdb2sql ${CDB2_OPTIONS} --tabs $db $stage "select count(i) from t4"`
    assertres $cnt 1
    cdb2sql ${CDB2_OPTIONS} $db $stage "put tunable max_wr_logbytes_per_txn 0"
}

createtables
runtest
runtest_max_cascades
runtest_max_ttl
runtest_max_logbytes

echo "Success"

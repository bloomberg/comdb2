#!/usr/bin/env bash
bash -n "$0" | exit 1

set -e
source ${TESTSROOTDIR}/tools/runit_common.sh

# Debug variable
debug=0

dbnm=$1

if [ "x$dbnm" == "x" ] ; then
    echo "need a DB name"
    exit 1
fi

# Number of insert_records function calls
nins=0

echo $CDB2_CONFIG
CNT=10000


test_guid_function() {
    echo 'part of a transaction'

    echo begin > ins.in
    for ((i=1;i<=$CNT;i++)) ; do
        echo "insert into t1 values(guid(), randomblob(16), $i,$i)"
    done >> ins.in
    echo commit >> ins.in

    echo 'same as above but not part of a transaction'

    for ((i=1;i<=$CNT;i++)) ; do
        echo "insert into t1 values(guid(), randomblob(16), $i,$((2*i)))"
    done >> ins.in

    echo 'using cte for speed'
    echo "INSERT INTO t1 (id,rndm,i,j) WITH tblx(x) AS ( VALUES(1) UNION ALL SELECT x+1 FROM tblx where x < $CNT) SELECT guid(), randomblob(16), x,($CNT-x) FROM tblx" >> ins.in


    PARALLEL=20
    for ((j=1;j<=$PARALLEL;j++)) ; do
       cdb2sql -f ins.in ${CDB2_OPTIONS} $dbnm default > ins_${j}.out &
    done

    echo wait for all above background inserts to complete
    wait

    set -x

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'select * from t1' > content.out
    echo 'failure in transactions inserting will mean count will be off'
    assertcnt t1 $((CNT*PARALLEL*3))

    echo "make sure we can find all the ids (field 1) from content.out"
    cut -f1 -d',' content.out | sed 's/,/ /g; s/(//; s/)$//; s/^/select count(*) from t1 where /; ' > sel1
    lines_per_part=$(((CNT*PARALLEL*3 + 20 - 1) / 20))
    split --lines=$lines_per_part sel1 sel1_in.

    for fl in `ls sel1_in.*`; do
        cdb2sql -f $fl ${CDB2_OPTIONS} $dbnm default > $fl.out &
    done

    echo "make sure we can find all the rndm (field 2) from content.out"
    cut -f2 -d',' content.out | sed 's/,/ /g; s/(//; s/)$//; s/^/select count(*) from t1 where /; ' > sel2
    split --lines=$lines_per_part sel2 sel2_in.

    for fl in `ls sel2_in.*`; do
        cdb2sql -f $fl ${CDB2_OPTIONS} $dbnm default > $fl.out &
    done

    echo "Wait for the selects to be done"
    wait
    cat sel1_in*.out > sel1.out
    cat sel2_in*.out > sel2.out

    cnt=`grep "^(count" sel1.out | grep "=0" | wc -l`
    if [ $cnt != 0 ] ; then
        failexit 'id not found'
    fi

    cnt=`grep "^(count" sel2.out | grep "=0" | wc -l`
    if [ $cnt != 0 ] ; then
        failexit 'rndm not found'
    fi

    mult=`grep "^count" sel2.out | grep -v "=1" | wc -l`
    echo "found $mult with duplicate key for randomblob()"
}

test_guid_str_function() {
    local ag=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select guid()"`
    local agstr=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select guid_str($ag)"`
    local agblb=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select guid('$agstr')"`
    assertres "$agblb" "$ag"

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table if exists t2'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2(gs cstring(37))'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2 select guid_str()'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2 select guid_str(guid())'
    assertcnt t2 2
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'

    res=`cdb2sql ${CDB2_OPTIONS} $dbnm default 'select typeof( guid_str() )'`
    assertres "$res" "(typeof( guid_str() )='text')"
    res=`cdb2sql ${CDB2_OPTIONS} $dbnm default 'select typeof( guid() )'`
    assertres "$res" "(typeof( guid() )='blob')"
}


test_guid_column() {
    echo "Test that having string 'guid' as a column name works"

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2(GUID int PRIMARY KEY, i int)'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(GUID, i) values(1,1),(2,2)'
    assertcnt t2 2
    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select count(*) from t2 where GUID=2'`
    assertres $res 1
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2(guid int  PRIMARY KEY, i int)'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(guid, i) values(3,3),(4,4)'
    assertcnt t2 2
    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select count(*) from t2 where guid=4'`
    assertres $res 1
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'

#sql is case insensitive so insert into t2(guid) is the same as insert into t2(GUID)
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2 { schema { int GUID  int i } }'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(GUID, i) values(5,5),(6,6)'
    assertcnt t2 2
    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select count(*) from t2 where GUID=6'`
    assertres $res 1
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2 { schema { int guid  int i } }'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(guid, i) values(7,7),(8,8)'
    assertcnt t2 2
    res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select count(*) from t2 where guid=8'`
    assertres $res 1
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'
}


test_guid_autofill() {
    echo "Testing having guid(guid) as autoassigned colun via dbstore"


    cdb2sql ${CDB2_OPTIONS} $dbnm default "create table t2 { 
    schema 
    {
        byte autoid[16] dbstore = {GUID()} null = no
        byte bytfld1[16] dbstore = {randomblob(16)} null = yes
        byte bytfld2[4] dbstore = x'00112233' null = yes
        cstring strfld[5] dbstore = {hex('hi')} null = yes
        int  i
    }
    keys
    {
            \"PK\"=autoid
    }
    }"

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(i) values(1),(2)'
    assertcnt t2 2
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2 { 
    schema 
    {
        byte autoid[16] dbstore={guid()} null=no
        datetime dt     dbstore={current_timestamp} null=no
        datetime dtnow  dbstore={now()} null=no
        int  i
    }
    keys
    {
            "PK"=autoid
    }
    }'

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(i) values(3),(4)'
    assertcnt t2 2
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2(autoid byte(16) DEFAULT(GUID() )  PRIMARY KEY, i int)'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(i) values(5),(6)'
    assertcnt t2 2
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2(autoid byte(16)   DEFAULT( guid()) PRIMARY KEY, i int)'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(i) values(7),(8)'
    assertcnt t2 2
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'


    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2 { 
    schema 
    {
        cstring id[33] dbstore={hex(GUID())} null=no
        int  i
    }
    keys
    {
            "PK"=id
    }
    }'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t2(i) values(9),(10)'
    assertcnt t2 2
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t2'



    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2 { 
    schema 
    {
        byte  autoid[16] dbstore={ GUID ( ) }
        short i   
        int   j
    }

    keys 
    {
            "PK"=autoid
    }
    }'


    echo 'part of a transaction'

    echo begin > ins2.in
    for ((i=1;i<=$CNT;i++)) ; do
        echo "insert into t2(i,j) values($i,$i)"
    done >> ins2.in
    echo commit >> ins2.in

    echo 'same as above but not part of a transaction'

    for ((i=1;i<=$CNT;i++)) ; do
        echo "insert into t2(i,j) values($i,$((2*i)))"
    done >> ins2.in

    echo 'using cte for speed'
    echo "INSERT INTO t2 (i,j) WITH tblx(x) AS ( VALUES(1) UNION ALL SELECT x+1 FROM tblx where x < $CNT) SELECT x,($CNT-x) FROM tblx" >> ins2.in


    PARALLEL=10
    for ((j=1;j<=$PARALLEL;j++)) ; do
       cdb2sql -f ins2.in ${CDB2_OPTIONS} $dbnm default > ins2_${j}.out &
    done

    echo wait for all above background inserts to complete
    wait

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'select * from t2' > content2.out
    echo 'failure in transactions inserting will mean count will be off'
    assertcnt t2 $((CNT*PARALLEL*3))

}

test_guid_sp() {
    echo "Testing having guid(guid) as used as key for multiple tables via stored procedure"

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table if exists t1'
    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table if exists t2'

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t1 { 
    schema 
    {
        byte uid[16] null=yes
        int  i
    }
    keys
    {
        "PK"=uid
    }
    }'

    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t2 { 
    schema 
    {
        int other
        byte uid[16] null=yes
        cstring  moredata[37]
    }
    keys
    {
        "PK"=uid
    }
    constraints
    {
        "PK" -> <"t1" : "PK">
    }
    }'

    u=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select guid()'`

    cdb2sql ${CDB2_OPTIONS} $dbnm default - << EOF
begin
insert into t1 values ($u, 1)
insert into t2 values (123, $u, '1234')
commit
EOF

    assertcnt t1 1
    assertcnt t2 1

    echo "add stored procedure"
    cdb2sql ${CDB2_OPTIONS} $dbnm default - << EOF
create procedure txnins version 'one' {
local function main(t1_i, t2_other, t2_moredata)
  local res, rc = db:exec("select guid() as H")
  local id = res:fetch()       -- id is a table with one column 'H'
  db:emit(id.H)
  local t1 = db:table('t1') 
  local t2 = db:table('t2') 
  db:begin()
  t1:insert({uid = id.H, i = t1_i}) 
  t2:insert({uid = id.H, other = t2_other, moredata = t2_moredata}) 
  db:commit()
  return 0
end}\$\$
put default procedure txnins 'one'
EOF

    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure txnins(2, 124,'1244')"

    assertcnt t1 2
    assertcnt t2 2

    cdb2sql ${CDB2_OPTIONS} $dbnm default - << EOF
create procedure txnins version 'two' {
local function main(t1_i, t2_other, t2_moredata)
    local gu = db:guid()
    db:emit(gu)
    local t1 = db:table('t1') 
    local t2 = db:table('t2') 
    t1:insert({uid = gu, i = t1_i}) 
    t2:insert({uid = gu, other = t2_other, moredata = t2_moredata}) 
end
}\$\$
put default procedure txnins 'two'
EOF

    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure txnins(3, 125,'1255')"

    assertcnt t1 3
    assertcnt t2 3
    cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t2 where 1"
    cdb2sql ${CDB2_OPTIONS} $dbnm default "delete from t1 where 1"

    cdb2sql ${CDB2_OPTIONS} $dbnm default - << EOF
create procedure teststr version 'one' {
local function main()
    local gu = db:guid(1,2)
    db:emit(gu)
end
}\$\$
put default procedure teststr 'one'
EOF

    set +e
    local res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure teststr()" 2>&1`
    assertres "[exec procedure teststr()] failed with rc -3 [local gu = db:guid(1,2)...]:3: bad argument #2 to 'guid' (Function may take only one optional guid as string argument)" "$res"
    set -e

    cdb2sql ${CDB2_OPTIONS} $dbnm default - << EOF
create procedure teststr version 'two' {
local function main()
    local gustr = db:guid_str(1,2)
    db:emit(gustr)
end
}\$\$
put default procedure teststr 'two'
EOF

    set +e
    local res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure teststr()" 2>&1`
    assertres "[exec procedure teststr()] failed with rc -3 [local gustr = db:guid_str(1,2)...]:3: bad argument #2 to 'guid_str' (Function may take only one optional guid blob as string argument)" "$res"
    set -e

    cdb2sql ${CDB2_OPTIONS} $dbnm default - << EOF
create procedure teststr version 'three' {
local function main()
    local gu = db:guid('867c25e2-8c91-433e-a1ab-f45830d621d2')
    db:emit(gu)
    gu = db:guid(100)
    db:emit(gu)
end
}\$\$
put default procedure teststr 'three'
EOF

    set +e
    local res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure teststr()" 2>&1 | tr -d "\n"`
    assertres "x'867c25e28c91433ea1abf45830d621d2'[exec procedure teststr()] failed with rc -3 [gu = db:guid(100)...]:5: Can not convert string 100 to guid" "$res"
    set -e

cdb2sql ${CDB2_OPTIONS} $dbnm default - << EOF
create procedure teststr version 'four' {
local function main()
    local gu = db:guid_str(x'867c25e28c91433ea1abf45830d621d2')
    db:emit(gu)
    gu = db:guid_str(100)
    db:emit(gu)
end
}\$\$
put default procedure teststr 'four'
EOF

    set +e
    local res=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "exec procedure teststr()" 2>&1 | tr -d "\n"`
    assertres "867c25e2-8c91-433e-a1ab-f45830d621d2[exec procedure teststr()] failed with rc -3 [gu = db:guid_str(100)...]:5: conversion to:blob failed from:number" "$res"
    set -e


    cdb2sql ${CDB2_OPTIONS} $dbnm default - << EOF
create procedure teststr version 'five' {
local function main(t1_i, t2_other, gu)
    local gustr = db:guid_str(gu) --note gustr will be 37 characters long (includes -)
    local gublb = db:guid(gustr)

    local t1 = db:table('t1') 
    local t2 = db:table('t2') 
    t1:insert({uid = gu, i = t1_i}) 
    t2:insert({other = t2_other, uid = gublb, moredata = gustr}) 
end
}\$\$
put default procedure teststr 'five'
EOF

    local aguid=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select guid()"`
    local aguidstr=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select guid_str($aguid)"`
    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure teststr(3, 125,$aguid)"
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select * from t1" > res.out
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select * from t2" >> res.out

    echo "$aguid 3" > res.exp
    echo "125 $aguid $aguidstr" >> res.exp
    if ! diff -w res.exp res.out ; then
        failexit "res.exp res.out differ"
    fi
}

test_guid_errors() {

    set +e 

    echo 'create table t3 { 
    schema 
    {
        byte autoid[17] dbstore={GUID()}
        int  i
    }
    }' > t3.in

    cdb2sql ${CDB2_OPTIONS} $dbnm default "`cat t3.in`" &> t3.err

    echo "[`cat t3.in`] failed with rc 240 Error at line   4: CAN ONLY HAVE BYTE[16] FOR GUID() DBSTORE: autoid
    " > t3.expected

    if ! diff -w t3.err t3.expected ; then
        failexit "t3.err not as expected diff $PWD/{t3.err,t3.expected}"
    fi

#    echo "Note that there is no check at table creation time for size mismatch, only at insert time"
#    cdb2sql ${CDB2_OPTIONS} $dbnm default 'create table t4 { 
#    schema 
#    {
#        byte autoid[16] dbstore={hex(GUID())}
#        int  i
#    }
#    }'
#    cdb2sql ${CDB2_OPTIONS} $dbnm 'insert into t4(i) values(1),(2)' &> t4.err
#    echo "[insert into t4(i) values(1),(2)] failed with rc 113 incompatible values from SQL string of length 32 to bbytearray field 'autoid' for table 't4'" > t4.expected
#    if ! diff -w t4.err t4.expected ; then
#        failexit "t4.err not as expected diff $PWD/{t4.err,t4.expected}"
#    fi
#    cdb2sql ${CDB2_OPTIONS} $dbnm default 'drop table t4'

    set -e

    
}

test_guid_str_function

test_guid_function

test_guid_column

test_guid_autofill

test_guid_sp

test_guid_errors

rm -f *.out

# Run all *.sql tests
${TESTSROOTDIR}/tools/compare_results.sh -s -d $1
[ $? -eq 0 ] || exit 1

echo "Success"

exit 0

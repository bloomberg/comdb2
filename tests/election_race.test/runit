#!/usr/bin/env bash

# debug
debug=1
[[ "$debug" == 1 ]] && set -x

# vars
target_delay=20
settle_window=10
test_iterations=5

# check
if [[ -z "$CLUSTER" ]]; then
    echo "This test is relavant only for CLUSTERED tests"
    exit 1
fi

# functions
function getmaster {
    [[ "$debug" == 1 ]] && set -x
    cdb2sql --tabs ${CDB2_OPTIONS} ${DBNAME} default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

function fail_exit {
    [[ "$debug" == 1 ]] && set -x
    echo "Testcase failed: $1"
    exit 1
}

function verify_insert {
    [[ "$debug" == 1 ]] && set -x
    cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "insert into t1 values (1)"
    if [[ $? != 0 ]]; then
        fail_exit "Could not insert record"
    fi
}

function create_tables {
    [[ "$debug" == 1 ]] && set -x
    cdb2sql ${CDB2_OPTIONS} ${DBNAME} default "create table t1 ( a int )"
}

function set_defer
{
    [[ "$debug" == 1 ]] && set -x
    for node in $CLUSTER ; do
        cdb2sql ${CDB2_OPTIONS} ${DBNAME} --host $node "put tunable 'defer_upgrade_time' $1"
    done
}

function wait_for_election
{
    [[ "$debug" == 1 ]] && set -x
    i=0
    while [[ $i -lt $target_delay ]]; do
        master=$(getmaster)
        if [[ -n "$master" ]]; then
            cdb2sql ${CDB2_OPTIONS} ${DBNAME} --host $master 'exec procedure sys.cmd.send("downgrade")'
        fi
        let i=i+1
        sleep 1
    done
}

function test_iteration {
    [[ "$debug" == 1 ]] && set -x
    epoch=$(date "+%s")
    set_defer $(( epoch + target_delay ))
    wait_for_election
    sleep $settle_window
    verify_insert
}

function runtest {
    [[ "$debug" == 1 ]] && set -x
    j=0
    while [[ $j -lt $test_iterations ]] ; do
        test_iteration
        let j=j+1
    done
}

# test
create_tables
runtest
echo "Success!"

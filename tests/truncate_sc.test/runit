#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
#debug=1

[[ $debug == "1" ]] && set -x

# Grab my database name.
dbnm=$1

sleeptime=5

function failexit
{
    [[ $debug == "1" ]] && set -x
    echo "Failed $1"
    exit -1
}

function get_current_lsn
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select lsn from comdb2_transaction_logs(NULL, NULL, 4) limit 1"
}

function get_master
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

function truncate_log
{
    [[ $debug == "1" ]] && set -x
    typeset lsn="$1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$lsn\")"
    sleep $sleeptime
}

function assert_notable
{
    [[ $debug == "1" ]] && set -x
    typeset tbl=$1
    echo "> Assert $tbl does not exist"
    chk=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from $tbl")
    [[ $? != 0 ]] || failexit "table $tbl still exists"
}

function assert_stat_compr
{
    [[ $debug == "1" ]] && set -x
    typeset prev_sc="$1"
    echo "> Assert stat compr is the same"
    typeset curr_sc=$(stat_compr)
    [[ "$prev_sc" != "$curr_sc" ]] && failexit "stat compr changed"
}

function stat_compr
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('stat compr')"
}

function select_sp
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from comdb2_procedures"
}

function assert_select_sp
{
    [[ $debug == "1" ]] && set -x
    typeset prev_sp="$1"
    echo "> Assert select_sp is the same"
    typeset curr_sp=$(select_sp)
    [[ "$prev_sp" != "$curr_sp" ]] && failexit "select_sp changed"
}

function select_t1
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure select_t1()"
}

function assert_select_t1
{
    [[ $debug == "1" ]] && set -x
    typeset prev_rn="$1"
    echo "> Assert select_t1 procedure is the same"
    typeset curr_rn=$(select_t1)
    [[ "$prev_rn" != "$curr_rn" ]] && failexit "return_number sp changed"
}

function return_number
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure return_number()"
}

function assert_return_number
{
    [[ $debug == "1" ]] && set -x
    typeset prev_rn="$1"
    echo "> Assert return_number is the same"
    typeset curr_rn=$(return_number)
    [[ "$prev_rn" != "$curr_rn" ]] && failexit "return_number sp changed"
}

function select_all
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t3"
}

function assert_select_all
{
    [[ $debug == "1" ]] && set -x
    typeset prev_sa="$1"
    echo "> Assert select_all is the same"
    typeset curr_sa=$(select_all)
    [[ "$prev_sa" != "$curr_sa" ]] && failexit "select_all changed"
}

function assert_count
{
    [[ $debug == "1" ]] && set -x
    typeset tbl=$1
    typeset cnt=$2
    echo "> Assert count $tbl is $cnt"
    chk=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from $tbl")
    [[ "$chk" == "$cnt" ]] || failexit "count for $tbl is not $cnt"
}

# Get begin-lsn and master
begin_lsn=$(get_current_lsn)
master=$(get_master)

function add_tables
{
    [[ $debug == "1" ]] && set -x

    echo "> Creating t1 and inserting three records"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"
    add_tables_lsn_1=$(get_current_lsn)
    add_tables_sal_1=$(select_all)
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(2)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(3)"
    assert_count t1 3

    echo "> Truncating t1 to one record"
    truncate_log "$add_tables_lsn_1"
    assert_count t1 1
    assert_select_all "$add_tables_sal_1"

    echo "> Truncating to before t1"
    truncate_log "$begin_lsn"
    assert_notable t1
}

function drop_tables
{
    [[ $debug == "1" ]] && set -x
    echo "> Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"
    echo "> Creating t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t2 values(1)"
    echo "> Creating t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t3 values(1)"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    drop_tables_lsn=$(get_current_lsn)
    echo "> Dropping t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    echo "> Dropping t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t2"
    echo "> Dropping t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t3"

    echo "> Truncating to before table drops"
    master=$(get_master)
    truncate_log "$drop_tables_lsn"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    echo "> Truncating to before table creates"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$begin_lsn\")"
    sleep $sleeptime
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function truncate_tables
{
    [[ $debug == "1" ]] && set -x

    echo "> Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"

    echo "> Creating t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t2 values(1)"

    echo "> Creating t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t3 values(1)"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1
    truncate_tables_lsn=$(get_current_lsn)

    echo "> Truncating tables"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t3"
    assert_count t1 0
    assert_count t2 0
    assert_count t3 0

    echo "> Truncating logs to before table truncates"
    truncate_log "$truncate_tables_lsn"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    echo "> Truncating to before table creates"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function alter_table_options
{
    [[ $debug == "1" ]] && set -x
    echo "> Creating t1 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"

    echo "> Creating t2 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t2 values(1)"

    echo "> Creating t3 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t3 values(1)"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1
    alter_table_lsn_1=$(get_current_lsn)
    alter_table_sal_1=$(select_all)
    alter_table_stc_1=$(stat_compr)

    echo "> Altering tables adding ODH"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    alter_table_lsn_2=$(get_current_lsn)
    alter_table_sal_2=$(select_all)
    alter_table_stc_2=$(stat_compr)

    echo "> Altering tables adding compression"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 options rebuild, ipu off, isc off { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 options rebuild, ipu off, isc off { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 options rebuild, ipu off, isc off { schema { int a } }"
    alter_table_lsn_3=$(get_current_lsn)
    alter_table_sal_3=$(select_all)
    alter_table_stc_3=$(stat_compr)

    echo "> Altering tables adding ipu/isc"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 { schema { int a } }"
    alter_table_lsn_4=$(get_current_lsn)
    alter_table_sal_4=$(select_all)
    alter_table_stc_4=$(stat_compr)

    echo "> Altering tables adding blobs"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 add b blob"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 add b blob"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 add b blob"
    alter_table_lsn_5=$(get_current_lsn)
    alter_table_sal_5=$(select_all)
    alter_table_stc_5=$(stat_compr)

    echo "> Dropping tables"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t3"
    assert_notable t1
    assert_notable t2
    assert_notable t3

    echo "> Truncating to added blobs"
    truncate_log "$alter_table_lsn_5"
    assert_stat_compr "$alter_table_stc_5"
    assert_select_all "$alter_table_sal_5"

    echo "> Truncating to added ipu/isc"
    truncate_log "$alter_table_lsn_4"
    assert_stat_compr "$alter_table_stc_4"
    assert_select_all "$alter_table_sal_4"

    echo "> Truncating to added compression"
    truncate_log "$alter_table_lsn_3"
    assert_stat_compr "$alter_table_stc_3"
    assert_select_all "$alter_table_sal_3"

    echo "> Truncating to added ODH"
    truncate_log "$alter_table_lsn_2"
    assert_stat_compr "$alter_table_stc_2"
    assert_select_all "$alter_table_sal_2"

    echo "> Truncating to old options"
    truncate_log "$alter_table_lsn_1"
    assert_stat_compr "$alter_table_stc_1"
    assert_select_all "$alter_table_sal_1"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    echo "> Truncating to before table creates"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function luasp
{
    [[ $debug == "1" ]] && set -x

    echo "> Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int, b blob)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1, x'12')"
    luasp_lsn_1=$(get_current_lsn)
    luasp_sal_1=$(select_all)
    luasp_rtn_1=$(select_sp)

    echo "> Creating return_number:v1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure return_number version 'v1' {
local function main()
    db:emit(1)
end
}$$
EOF
    luasp_lsn_2=$(get_current_lsn)
    luasp_sal_2=$(select_all)
    luasp_ssp_2=$(select_sp)
    luasp_rtn_2=$(return_number)

    echo "> Creating return_number:v2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure return_number version 'v2' {
local function main()
    db:emit(2)
end
}$$
EOF
    luasp_lsn_3=$(get_current_lsn)
    luasp_sal_3=$(select_all)
    luasp_ssp_3=$(select_sp)
    luasp_rtn_3=$(return_number)

    echo "> Making v2 default sp"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - "put default procedure return_number 'v2'"
    luasp_lsn_4=$(get_current_lsn)
    luasp_sal_4=$(select_all)
    luasp_ssp_4=$(select_sp)
    luasp_rtn_4=$(return_number)

    echo "> Dropping v1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - "drop procedure return_number 'v1'"
    luasp_lsn_5=$(get_current_lsn)
    luasp_sal_5=$(select_all)
    luasp_ssp_5=$(select_sp)
    luasp_rtn_5=$(return_number)

    echo "> Creating select_t1:v1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure select_t1 version 'v1' {
local function main()
    local t1 = db:table("t1")
    t1:where(1)
    t1:emit()
end
}$$
EOF
    luasp_lsn_6=$(get_current_lsn)
    luasp_sal_6=$(select_all)
    luasp_ssp_6=$(select_sp)
    luasp_rtn_6=$(return_number)
    luasp_st1_6=$(select_t1)

    echo "> Altering t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 add b blob"
    luasp_lsn_7=$(get_current_lsn)
    luasp_sal_7=$(select_all)
    luasp_ssp_7=$(select_sp)
    luasp_rtn_7=$(return_number)
    luasp_st1_7=$(select_t1)

    echo "> Dropping t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    assert_notable t1

    echo "> Truncating to altered t1"
    truncate_log "$luasp_lsn_7"
    assert_select_t1 "$luasp_st1_7"
    assert_return_number "$luasp_rtn_7"
    assert_select_sp "$luasp_ssp_7"
    assert_select_all "$luasp_sal_7"

    echo "> Truncating to created select_t1"
    truncate_log "$luasp_lsn_6"
    assert_select_t1 "$luasp_st1_6"
    assert_return_number "$luasp_rtn_6"
    assert_select_sp "$luasp_ssp_6"
    assert_select_all "$luasp_sal_6"

    echo "> Truncating to existing return_number:v1"
    truncate_log "$luasp_lsn_5"
    assert_return_number "$luasp_rtn_5"
    assert_select_sp "$luasp_ssp_5"
    assert_select_all "$luasp_sal_5"

    echo "> Truncating to make return_number:v2 default"
    truncate_log "$luasp_lsn_4"
    assert_return_number "$luasp_rtn_4"
    assert_select_sp "$luasp_ssp_4"
    assert_select_all "$luasp_sal_4"

    echo "> Truncating to create return_number:v2"
    truncate_log "$luasp_lsn_3"
    assert_return_number "$luasp_rtn_3"
    assert_select_sp "$luasp_ssp_3"
    assert_select_all "$luasp_sal_3"

    echo "> Truncating to create return_number:v1"
    truncate_log "$luasp_lsn_2"
    assert_return_number "$luasp_rtn_2"
    assert_select_sp "$luasp_ssp_2"
    assert_select_all "$luasp_sal_2"

    echo "> Truncating to created table t1"
    truncate_log "$luasp_lsn_1"
    assert_select_sp "$luasp_ssp_1"
    assert_select_all "$luasp_sal_1"

    echo "> Truncating to before table create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

add_tables
drop_tables
truncate_tables
alter_table_options
#luasp

#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
#debug=1

[[ $debug == "1" ]] && set -x

# Grab my database name.
dbnm=$1

sleeptime=5

function failexit
{
    [[ $debug == "1" ]] && set -x
    echo "Failed $1"
    exit -1
}

function get_current_lsn
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select lsn from comdb2_transaction_logs(NULL, NULL, 4) limit 1"
}

function get_master
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

function assert_notable
{
    [[ $debug == "1" ]] && set -x
    typeset tbl=$1
    echo "> Assert $tbl does not exist"
    chk=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from $tbl")
    [[ $? != 0 ]] || failexit "table $tbl still exists"
}

function assert_count
{
    [[ $debug == "1" ]] && set -x
    typeset tbl=$1
    typeset cnt=$2
    echo "> Assert count $tbl is $cnt"

    chk=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from $tbl")
    [[ "$chk" == "$cnt" ]] || failexit "count for $tbl is not $cnt"
}

# Back to the start
begin_lsn=$(get_current_lsn)
echo "> Creating t1"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"

after_1_lsn=$(get_current_lsn)
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(2)"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(3)"

assert_count t1 3
master=$(get_master)

echo "> Truncating t1 to one record"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$after_1_lsn\")"
sleep $sleeptime
assert_count t1 1

echo "> Truncating to before t1"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$begin_lsn\")"
sleep $sleeptime
assert_notable t1

echo "> Creating t1"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"
echo "> Creating t2"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int)"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t2 values(1)"
echo "> Creating t3"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int)"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t3 values(1)"
assert_count t1 1
assert_count t2 1
assert_count t3 1

after_3_lsn=$(get_current_lsn)
echo "> Dropping t1"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
echo "> Dropping t2"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t2"
echo "> Dropping t3"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t3"

echo "> Truncating to before table drops"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$after_3_lsn\")"
sleep $sleeptime
assert_count t1 1
assert_count t2 1
assert_count t3 1

echo "> Truncating to before table creates"
$CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$begin_lsn\")"
sleep $sleeptime
assert_notable t1
assert_notable t2
assert_notable t3


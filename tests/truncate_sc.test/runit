#!/usr/bin/env bash
bash -n "$0" | exit 1

[[ $debug == "1" ]] && set -x

# Grab my database name.
dbnm=$1

export sleeptime=5
export repsleep=5
export repname=rep$TESTID
export repdir=${DBDIR}/$repname
export comdb2ar=${COMDB2AR_EXE}
export myhost=$(hostname)
export physrep=1
export replive=1
export replog=$repdir/log.txt
export COPYCOMDB2_EXE=${BUILDDIR}/db/copycomdb2

function write_prompt
{
    typeset func=$1
    echo "[$func] $2"
}

function failexit
{
    [[ $debug == "1" ]] && set -x
    typeset func="failexit"
    typeset f=$1
    write_prompt $func "$f failed: $2"
    kill -9 $(cat $repdir/${repname}.pid)
    exit -1
}

function make_phys_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="make_phys_rep"

    mkdir -p $repdir

    if [[ -z "$CLUSTER" ]]; then
        cl="-y localhost"
    fi

    if [[ -n "$CLUSTER" ]]; then
        if [[ "$CLUSTER" =~ .*$myhost.* ]]; then
            rmt=""
        else
            clarray=($CLUSTER)
            rmt="${clarray[0]}:"
        fi
    fi

    write_prompt $func "Creating physical rep $repname"
    ${COPYCOMDB2_EXE} -x ${COMDB2_EXE} -H $repname $cl $rmt${DBDIR}/${DBNAME}.lrl $repdir $repdir
    if [ ! $? -eq 0 ]; then
        write_prompt $func "Copycomdb2 failed"
        exit 1
    fi

    write_prompt $func "Starting replicant database, replog is $replog"
    if [[ -n "$replive" ]]; then
        ( $COMDB2_EXE $repname -lrl $repdir/${repname}.lrl -pidfile $repdir/${repname}.pid >$replog 2>&1) &
    else
        ( timeout $TEST_TIMEOUT $COMDB2_EXE $repname -lrl $repdir/${repname}.lrl -pidfile $repdir/${repname}.pid >$replog 2>&1) &
    fi
}

function get_current_lsn
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_current_lsn"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select lsn from comdb2_transaction_logs(NULL, NULL, 4) limit 1"
}

function insert_record
{
    [[ $debug == "1" ]] && set -x
    typeset func="insert_records"
    typeset tbl=$1
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "insert into $tbl values(1)" >/dev/null
}


function bulk_insert_records
{
    [[ $debug == "1" ]] && set -x
    typeset func="insert_records"
    typeset tbl=$1
    typeset cnt=$2
    typeset chunk=10000
    j=0
    while [[ $cnt -gt 0 ]]; do
        if [[ $cnt -lt $chunk ]]; then
            amt=$cnt
        else
            amt=$chunk
        fi

        $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "insert into $tbl select * from generate_series(1, $amt)" >/dev/null
        let cnt=$(( cnt - amt ))
    done
}

function get_comdb2_columns
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_comdb2_columns"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select * from comdb2_columns"
}

function get_comdb2_columns_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_comdb2_columns_rep"
    $CDB2SQL_EXE --tabs $repname --host localhost "select * from comdb2_columns"
}

function assert_comdb2_columns
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_comdb2_columns"
    typeset prev_cols=$1
    write_prompt $func "Assert comdb2_columns is the same"
    typeset curr_cols=$(get_comdb2_columns)
    [[ "$prev_cols" != "$curr_cols" ]] && failexit $func "comdb2_columns changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset phys_cols=$(get_comdb2_columns_rep)
        write_prompt $func "Assert comdb2_columns on phys-rep is the same"
        [[ "$prev_cols" != "$phys_cols" ]] && failexit $func "phys-rep comdb2_columns changed"
    fi
}

function get_master
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_master"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

function truncate_log
{
    [[ $debug == "1" ]] && set -x
    typeset func="truncate_log"
    typeset lsn="$1"
    write_prompt $func "Truncating to $lsn"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$lsn\")"
    typeset newlsn=$(get_current_lsn)
    write_prompt $func "Current lsn is $newlsn"
    sleep $sleeptime
}

function morestripe_command
{
    [[ $debug == "1" ]] && set -x
    typeset func="morestripe_command"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send(\"morestripe $1\")"
    sleep $sleeptime
}

function get_dtastripe
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_dtastripe"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select value from comdb2_tunables where name='dtastripe'"
}

function get_dtastripe_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_dtastripe_rep"
    $CDB2SQL_EXE -tabs $repname --host localhost "select value from comdb2_tunables where name='dtastripe'"
}

function assert_stripe
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_stripe"
    write_prompt $func "Assert $1 stripes"
    typeset stp=$(get_dtastripe)
    [[ "$1" == "$stp" ]] || failexit $func "was expecting $1 stripes but have $stp"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(get_dtastripe_rep)
        [[ "$1" == "$rep" ]] || failexit $func "was expecting phys-rep $1 stripe but have $rep"
    fi
}

function get_rowlocks
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_rowlocks"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send(\"stat\")" | egrep "rowlocks is"
}

function get_rowlocks_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_rowlocks_rep"
    $CDB2SQL_EXE -tabs $repname --host localhost "exec procedure sys.cmd.send(\"stat\")" | egrep "rowlocks is"
}

function verify_rowlocks
{
    [[ $debug == "1" ]] && set -x
    typeset func="verify_rowlocks"
    typeset rlocks=$(get_rowlocks)
    write_prompt $func "Assert rowlocks is $1"
    [[ "$1" == "$rlocks" ]] || failexit $func "expected rowlocks to be $1 not $rlocks"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(get_rowlocks_rep)
        [[ "$1" == "$rep" ]] || failexit $func "expected phys-rep rowlocks to have $1 stripes but have $rep"
    fi
}

function get_partition_start_time
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_partition_start_time"
    perl -MPOSIX -le 'local $ENV{TZ}=":/usr/share/zoneinfo/UTC"; print strftime "%Y-%m-%dT%H%M%S UTC", localtime(time()+60)'
}

function get_time_partitions_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_time_partitions_rep"
    $CDB2SQL_EXE -tabs $repname --host localhost "exec procedure sys.cmd.send('partitions')"
}

function get_time_partitions
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_time_partitions"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('partitions')"
}

function assert_time_partitions
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_time_partitions"
    typeset prev_tp="$1"
    write_prompt $func "Assert 'partitions' is the same"
    typeset curr_tp=$(get_time_partitions)
    [[ "$prev_tp" != "$curr_tp" ]] && failext $func "time-partitions have changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(get_time_partitions_rep)
        [[ "$prev_tp" != "$rep" ]] && failexit $func "time-partitions changed in rep"
    fi
}

function get_genid_format_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_genid_format_rep"
    $CDB2SQL_EXE -tabs $repname --host localhost "exec procedure sys.cmd.send(\"bdb bdbstate\")" | egrep genid_format | egrep -v child
}

function get_genid_format
{
    [[ $debug == "1" ]] && set -x
    typeset func="get_genid_format"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send(\"bdb bdbstate\")" | egrep genid_format | egrep -v child
}

function assert_genid_format
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_genid_format"
    typeset fmt=$(get_genid_format)
    [[ "$1" == "$fmt" ]] || failexit $func "was expecting $1 genid_fmt is $fmt"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(get_genid_format_rep)
        [[ "$1" == "$rep" ]] || failexit $func "was expecting phys-rep genid_fmt $1 genid_fmt is $fmt"
    fi
}

function assert_notable
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_notable"
    typeset tbl=$1
    write_prompt $func "Assert $tbl does not exist"
    chk=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from $tbl" 2>/dev/null)
    [[ $? != 0 ]] || failexit $func "table $tbl still exists"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        rep=$($CDB2SQL_EXE -tabs $repname --host localhost "select count(*) from $tbl" 2>/dev/null)
        [[ $? != 0 ]] || failexit $func "table $tbl in rep still exists"
    fi
}

function stat_compr_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="stat_compr_rep"
    $CDB2SQL_EXE -tabs $repname --host localhost "exec procedure sys.cmd.send('stat compr')"
}

function stat_compr
{
    [[ $debug == "1" ]] && set -x
    typeset func="stat_compr"
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('stat compr')"
}

function assert_stat_compr
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_stat_compr"
    typeset prev_sc="$1"
    write_prompt $func "Assert stat compr is the same"
    typeset curr_sc=$(stat_compr)
    [[ "$prev_sc" != "$curr_sc" ]] && failexit $func "stat compr changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        rep=$(stat_compr_rep)
        [[ "$prev_sc" != "$rep" ]] && failexit $func "stat compr changed in rep"
    fi
}

function select_json_extract_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_json_extract_rep"
    $CDB2SQL_EXE $repname --host localhost "select json_extract(str, 'i') as i from strings" 2>/dev/null
}

function select_json_extract
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_json_extract"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select json_extract(str, 'i') as i from strings" 2>/dev/null
}

function assert_select_json_extract
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_select_json_extract"
    typeset prev_sp="$1"
    write_prompt $func "Assert select_json_extract is the same"
    typeset curr_sp=$(select_json_extract)
    [[ "$prev_sp" != "$curr_sp" ]] && failexit $func "select_json_extract changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(select_json_extract_rep)
        [[ "$prev_sp" != "$rep" ]] && failexit $func "select_json_extract in rep changed"
    fi
}

function select_myavg_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_myavg_rep"
    $CDB2SQL_EXE $repname --host localhost "select myavg(i) from nums" 2>/dev/null
}

function select_myavg
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_myavg"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select myavg(i) from nums" 2>/dev/null
}

function assert_select_myavg
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_select_myavg"
    typeset prev_sp="$1"
    write_prompt $func "Assert select_myavg is the same"
    typeset curr_sp=$(select_myavg)
    [[ "$prev_sp" != "$curr_sp" ]] && failexit $func "select_myavg changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(select_myavg_rep)
        [[ "$prev_sp" != "$rep" ]] && failexit $func "select_sp in rep changed"
    fi
}

function select_sp_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_sp_rep"
    $CDB2SQL_EXE $repname --host localhost "select * from comdb2_procedures"
}

function select_sp
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_sp"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from comdb2_procedures"
}

function assert_select_sp
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_select_sp"
    typeset prev_sp="$1"
    write_prompt $func "Assert select_sp is the same"
    typeset curr_sp=$(select_sp)
    [[ "$prev_sp" != "$curr_sp" ]] && failexit $func "select_sp changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(select_sp_rep)
        [[ "$prev_sp" != "$rep" ]] && failexit $func "select_sp in rep changed"
    fi
}

function select_t1_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_t1_rep"
    $CDB2SQL_EXE $repname --host localhost "exec procedure select_t1()"
}

function select_t1
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure select_t1()"
}

function assert_select_t1
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_select_t1"
    typeset prev_rn="$1"
    write_prompt $func "Assert select_t1 procedure is the same"
    typeset curr_rn=$(select_t1)
    [[ "$prev_rn" != "$curr_rn" ]] && failexit $func "return_number sp changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(select_t1_rep)
        [[ "$prev_rn" != "$rep" ]] && failexit $func "return_number sp changed in rep"
    fi
}

function return_number_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="return_number_rep"
    $CDB2SQL_EXE $repname --host localhost "exec procedure return_number()"
}

function return_number
{
    [[ $debug == "1" ]] && set -x
    typeset func="return_number"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure return_number()"
}

function assert_return_number
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_return_number"
    typeset prev_rn="$1"
    write_prompt $func "Assert return_number is the same"
    typeset curr_rn=$(return_number)
    [[ "$prev_rn" != "$curr_rn" ]] && failexit $func "return_number sp changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(return_number_rep)
        [[ "$prev_rn" != "$rep" ]] && failexit $func "return_number sp changed in rep"
    fi
}

function select_all_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_all_rep"
    $CDB2SQL_EXE $repname --host localhost "select * from t1" 2>/dev/null
    $CDB2SQL_EXE $repname --host localhost "select * from t2" 2>/dev/null
    $CDB2SQL_EXE $repname --host localhost "select * from t3" 2>/dev/null
}

function select_all_int
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_all_int"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t1" 2>/dev/null
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t2" 2>/dev/null
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from t3" 2>/dev/null
}


function assert_select_all_rep
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_select_all_rep"
    typeset tries=10
    typeset good=0
    while [[ "$physrep" != 0 && "$good" == "0" ]]; do
        typeset sal=$(select_all_int)
        typeset rep=$(select_all_rep)
        if [[ "$sal" != "$rep" ]] ; then
            let tries=tries-1
            [[ "$tries" == "0" ]] && failexit $func "rep has diverged"
            sleep $repsleep
        else
            let good=1
        fi
    done
}

function select_all
{
    [[ $debug == "1" ]] && set -x
    typeset func="select_all"
    assert_select_all_rep
    select_all_int
}

function assert_select_all
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_select_all"
    typeset prev_sa="$1"
    write_prompt $func "Assert select_all is the same"
    typeset curr_sa=$(select_all)
    [[ "$prev_sa" != "$curr_sa" ]] && failexit $func "select_all changed"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        typeset rep=$(select_all_rep)
        [[ "$prev_sa" != "$rep" ]] && failexit $func "select_all changed in rep"
    fi
}

function assert_count
{
    [[ $debug == "1" ]] && set -x
    typeset func="assert_count"
    typeset tbl=$1
    typeset cnt=$2
    write_prompt $func "Assert count $tbl is $cnt"
    chk=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from $tbl" 2>/dev/null)
    [[ "$chk" == "$cnt" ]] || failexit $func "count for $tbl is not $cnt"
    if [[ "$physrep" == 1 ]]; then
        sleep $repsleep
        rep=$($CDB2SQL_EXE -tabs $repname --host localhost "select count(*) from $tbl" 2>/dev/null)
        [[ "$rep" == "$cnt" ]] || failexit $func "count for $tbl is not $cnt in rep"
    fi
}

# Get begin-lsn and master
begin_lsn=$(get_current_lsn)
master=$(get_master)

function add_tables
{
    [[ $debug == "1" ]] && set -x
    typeset func="add_tables"

    write_prompt $func "Creating t1 and inserting three records"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    insert_record t1
    add_tables_lsn_1=$(get_current_lsn)
    add_tables_sal_1=$(select_all)
    insert_record t1
    insert_record t1
    assert_count t1 3

    write_prompt $func "Truncating t1 to one record"
    truncate_log "$add_tables_lsn_1"
    assert_count t1 1
    assert_select_all "$add_tables_sal_1"

    write_prompt $func "Truncating to before t1"
    truncate_log "$begin_lsn"
    assert_notable t1
}

function drop_tables
{
    [[ $debug == "1" ]] && set -x
    typeset func="drop_tables"
    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    insert_record t1
    write_prompt $func "Creating t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int)"
    insert_record t2
    write_prompt $func "Creating t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int)"
    insert_record t3
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    drop_tables_lsn=$(get_current_lsn)
    write_prompt $func "Dropping t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    write_prompt $func "Dropping t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t2"
    write_prompt $func "Dropping t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t3"

    write_prompt $func "Truncating to before table drops"
    master=$(get_master)
    truncate_log "$drop_tables_lsn"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    write_prompt $func "Truncating to before table creates"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$begin_lsn\")"
    sleep $sleeptime
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function rename_tables
{
    [[ $debug == "1" ]] && set -x
    typeset func="rename_tables"
    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    insert_record t1
    assert_count t1 1
    rename_lsn_1=$(get_current_lsn)
    rename_sal_1=$(select_all)
    rename_col_1=$(get_comdb2_columns)

    write_prompt $func "Renaming to t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 rename to t2"
    rename_lsn_2=$(get_current_lsn)
    rename_sal_2=$(select_all)
    rename_col_2=$(get_comdb2_columns)

    write_prompt $func "Renaming to t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 rename to t3"
    rename_sal_3=$(select_all)
    rename_col_3=$(get_comdb2_columns)

    write_prompt $func "Truncating to t2"
    truncate_log "$rename_lsn_2"
    assert_select_all "$rename_sal_2"
    assert_comdb2_columns "$rename_col_2"

    write_prompt $func "Truncating to t1"
    truncate_log "$rename_lsn_1"
    assert_select_all "$rename_sal_1"
    assert_comdb2_columns "$rename_col_1"

    write_prompt $func "Truncating to before table create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function truncate_tables
{
    [[ $debug == "1" ]] && set -x
    typeset func="truncate_tables"

    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    insert_record t1

    write_prompt $func "Creating t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int)"
    insert_record t2

    write_prompt $func "Creating t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int)"
    insert_record t3
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1
    truncate_tables_lsn=$(get_current_lsn)

    write_prompt $func "Truncating tables"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t3"
    assert_count t1 0
    assert_count t2 0
    assert_count t3 0

    write_prompt $func "Truncating logs to before table truncates"
    truncate_log "$truncate_tables_lsn"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    write_prompt $func "Truncating to before table creates"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function bulk_rebuild
{
    [[ $debug == "1" ]] && set -x
    typeset func="bulk_rebuild"
    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"

    write_prompt $func "Inserting 50000 records"
    bulk_insert_records t1 50000
    bulk_rebuild_lsn_1=$(get_current_lsn)
    bulk_rebuild_sal_1=$(select_all)

    write_prompt $func "Rebuilding t1 with blob"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 options rebuild { schema { int a blob b null=yes }} "
    bulk_rebuild_lsn_2=$(get_current_lsn)
    bulk_rebuild_sal_2=$(select_all)

    write_prompt $func "Rebuilding t1 with cstring"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 options rebuild { schema { int a blob b null=yes cstring c[10] null=yes}} "
    bulk_rebuild_lsn_3=$(get_current_lsn)
    bulk_rebuild_sal_3=$(select_all)

    write_prompt $func "Dropping t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"

    write_prompt $func "Truncating to t1 with cstring"
    truncate_log "$bulk_rebuild_lsn_3"
    assert_select_all "$bulk_rebuild_sal_3"

    write_prompt $func "Truncating to t1 with blob"
    truncate_log "$bulk_rebuild_lsn_2"
    assert_select_all "$bulk_rebuild_sal_2"

    write_prompt $func "Truncating to t1 with int"
    truncate_log "$bulk_rebuild_lsn_1"
    assert_select_all "$bulk_rebuild_sal_1"

    write_prompt $func "Truncating to before table creates"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function alter_table_options
{
    [[ $debug == "1" ]] && set -x
    typeset func="alter_table_options"
    write_prompt $func "Creating t1 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    insert_record t1

    write_prompt $func "Creating t2 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    insert_record t2

    write_prompt $func "Creating t3 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    insert_record t3
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1
    alter_table_lsn_1=$(get_current_lsn)
    alter_table_sal_1=$(select_all)
    alter_table_stc_1=$(stat_compr)

    write_prompt $func "Altering tables adding ODH"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    alter_table_lsn_2=$(get_current_lsn)
    alter_table_sal_2=$(select_all)
    alter_table_stc_2=$(stat_compr)

    write_prompt $func "Altering tables adding compression"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 options rebuild, ipu off, isc off { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 options rebuild, ipu off, isc off { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 options rebuild, ipu off, isc off { schema { int a } }"
    alter_table_lsn_3=$(get_current_lsn)
    alter_table_sal_3=$(select_all)
    alter_table_stc_3=$(stat_compr)

    write_prompt $func "Altering tables adding ipu/isc"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 { schema { int a } }"
    alter_table_lsn_4=$(get_current_lsn)
    alter_table_sal_4=$(select_all)
    alter_table_stc_4=$(stat_compr)

    write_prompt $func "Altering tables adding blobs"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 add b blob"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 add b blob"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 add b blob"
    alter_table_lsn_5=$(get_current_lsn)
    alter_table_sal_5=$(select_all)
    alter_table_stc_5=$(stat_compr)

    write_prompt $func "Dropping tables"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t3"
    assert_notable t1
    assert_notable t2
    assert_notable t3

    write_prompt $func "Truncating to added blobs"
    truncate_log "$alter_table_lsn_5"
    assert_stat_compr "$alter_table_stc_5"
    assert_select_all "$alter_table_sal_5"

    write_prompt $func "Truncating to added ipu/isc"
    truncate_log "$alter_table_lsn_4"
    assert_stat_compr "$alter_table_stc_4"
    assert_select_all "$alter_table_sal_4"

    write_prompt $func "Truncating to added compression"
    truncate_log "$alter_table_lsn_3"
    assert_stat_compr "$alter_table_stc_3"
    assert_select_all "$alter_table_sal_3"

    write_prompt $func "Truncating to added ODH"
    truncate_log "$alter_table_lsn_2"
    assert_stat_compr "$alter_table_stc_2"
    assert_select_all "$alter_table_sal_2"

    write_prompt $func "Truncating to old options"
    truncate_log "$alter_table_lsn_1"
    assert_stat_compr "$alter_table_stc_1"
    assert_select_all "$alter_table_sal_1"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    write_prompt $func "Truncating to before table create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function luasp
{
    [[ $debug == "1" ]] && set -x
    typeset func="luasp"
    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int, b blob)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1, x'12')" >/dev/null
    luasp_lsn_1=$(get_current_lsn)
    luasp_sal_1=$(select_all)
    luasp_rtn_1=$(select_sp)

    write_prompt $func "Creating return_number:v1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure return_number version 'v1' {
local function main()
    db:emit(1)
end
}$$
EOF
    luasp_lsn_2=$(get_current_lsn)
    luasp_sal_2=$(select_all)
    luasp_ssp_2=$(select_sp)
    luasp_rtn_2=$(return_number)

    write_prompt $func "Creating return_number:v2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure return_number version 'v2' {
local function main()
    db:emit(2)
end
}$$
EOF
    luasp_lsn_3=$(get_current_lsn)
    luasp_sal_3=$(select_all)
    luasp_ssp_3=$(select_sp)
    luasp_rtn_3=$(return_number)

    write_prompt $func "Making v2 default sp"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put default procedure return_number 'v2'"
    luasp_lsn_4=$(get_current_lsn)
    luasp_sal_4=$(select_all)
    luasp_ssp_4=$(select_sp)
    luasp_rtn_4=$(return_number)

    write_prompt $func "Dropping v1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop procedure return_number 'v1'"
    luasp_lsn_5=$(get_current_lsn)
    luasp_sal_5=$(select_all)
    luasp_ssp_5=$(select_sp)
    luasp_rtn_5=$(return_number)

    write_prompt $func "Creating select_t1:v1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure select_t1 version 'v1' {
local function main()
    local t1 = db:table("t1")
    t1:where(1)
    t1:emit()
end
}$$
EOF
    luasp_lsn_6=$(get_current_lsn)
    luasp_sal_6=$(select_all)
    luasp_ssp_6=$(select_sp)
    luasp_rtn_6=$(return_number)
    luasp_st1_6=$(select_t1)

    write_prompt $func "Altering t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 add c blob"
    luasp_lsn_7=$(get_current_lsn)
    luasp_sal_7=$(select_all)
    luasp_ssp_7=$(select_sp)
    luasp_rtn_7=$(return_number)
    luasp_st1_7=$(select_t1)

    write_prompt $func "Dropping t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    assert_notable t1

    write_prompt $func "Truncating to altered t1"
    truncate_log "$luasp_lsn_7"
    assert_select_t1 "$luasp_st1_7"
    assert_return_number "$luasp_rtn_7"
    assert_select_sp "$luasp_ssp_7"
    assert_select_all "$luasp_sal_7"

    write_prompt $func "Truncating to created select_t1"
    truncate_log "$luasp_lsn_6"
    assert_select_t1 "$luasp_st1_6"
    assert_return_number "$luasp_rtn_6"
    assert_select_sp "$luasp_ssp_6"
    assert_select_all "$luasp_sal_6"

    write_prompt $func "Truncating to existing return_number:v1"
    truncate_log "$luasp_lsn_5"
    assert_return_number "$luasp_rtn_5"
    assert_select_sp "$luasp_ssp_5"
    assert_select_all "$luasp_sal_5"

    write_prompt $func "Truncating to make return_number:v2 default"
    truncate_log "$luasp_lsn_4"
    assert_return_number "$luasp_rtn_4"
    assert_select_sp "$luasp_ssp_4"
    assert_select_all "$luasp_sal_4"

    write_prompt $func "Truncating to create return_number:v2"
    truncate_log "$luasp_lsn_3"
    assert_return_number "$luasp_rtn_3"
    assert_select_sp "$luasp_ssp_3"
    assert_select_all "$luasp_sal_3"

    write_prompt $func "Truncating to create return_number:v1"
    truncate_log "$luasp_lsn_2"
    assert_return_number "$luasp_rtn_2"
    assert_select_sp "$luasp_ssp_2"
    assert_select_all "$luasp_sal_2"

    write_prompt $func "Truncating to created table t1"
    truncate_log "$luasp_lsn_1"
    assert_select_sp "$luasp_ssp_1"
    assert_select_all "$luasp_sal_1"

    write_prompt $func "Truncating to before table create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function lua_sfunc
{
    [[ $debug == "1" ]] && set -x
    typeset func="lua_sfunc"
    write_prompt $func "Create strings table"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table strings(str vutf8)"
    write_prompt $func "Create json-extract sp"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure json_extract {
local function json_extract(json, field)
    local tbl = db:json_to_table(json)
        return tbl[field]
end
}$$
EOF
    write_prompt $func "Making json_extract a scalar sp"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create lua scalar function json_extract"
    write_prompt $func "Inserting some records"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into strings(str) values ('{\"i\":10}')"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into strings(str) values ('{\"i\":20}')"
    lua_sfunc_lsn_1=$(get_current_lsn)
    lua_sfunc_jse_1=$(select_json_extract)
    sleep $repsleep
    write_prompt $func "Selecting json-extract from rep"
    lua_sfunc_rep_1=$(select_json_extract_rep)
    [[ "$lua_sfunc_rep_1" != "$lua_sfunc_jse_1" ]] && failexit $func "rep json-extract output differs"


    write_prompt $func "Dropping json_extract"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop lua scalar function json_extract"
    lua_sfunc_jse_2=$(select_json_extract)
    [[ "$lua_sfunc_jse_2" == "$lua_sfunc_jse_1" ]] && failexit $func "dropped lua scalar returned same as active"
    write_prompt $func "Truncating to json_extract create"
    truncate_log "$lua_sfunc_lsn_1"
    assert_select_json_extract "$lua_sfunc_jse_1"

    write_prompt $func "Truncating to before sp create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function lua_afunc
{
    [[ $debug == "1" ]] && set -x
    typeset func="lua_afunc"
    write_prompt $func "Creating nums table"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table nums (i double)"
    write_prompt $func "Creating gen function"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure gen version 'sptest' {
local function gen(tbl, a, b)
    local stmt = db:prepare("insert into "..tbl.."(i) values(@a),(@b),(@c),(@d),(@e),(@f),(@g),(@h),(@i),(@j)")
    local params = 10
    local num = b - a + 1
    local per_tran
    if num > 1000 then
        per_tran = 1000
    else
        per_tran = num
    end
    local loop = (b - a + 1) / per_tran
    local per_loop = per_tran / params
    local i = a
    for j = 1, loop do
        db:begin()
        for k = 1, per_loop do
            stmt:bind('a', i + 0)
            stmt:bind('b', i + 1)
            stmt:bind('c', i + 2)
            stmt:bind('d', i + 3)
            stmt:bind('e', i + 4)
            stmt:bind('f', i + 5)
            stmt:bind('g', i + 6)
            stmt:bind('h', i + 7)
            stmt:bind('i', i + 8)
            stmt:bind('j', i + 9)
            stmt:exec()
            i = i + params
        end
        db:commit()
    end
end
local function main(tbl, to, num_thds)
    local from = 1
    if tbl == nil then tbl = "nums" end
    if to == nil then to = 100000 end
    if num_thds == nil then num_thds = 10 end
    local thds = {}
    local a = from
    local b = to / num_thds
    for i = 1, num_thds do
        table.insert(thds, db:create_thread(gen, tbl, a, a + b - 1))
        a = a + b
    end
    for _,t in pairs(thds) do
        t:join()
    end
end
}$$
EOF

    write_prompt $func "Putting default version for gen"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put default procedure gen 'sptest'"
    write_prompt $func "Creating myavg function"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default - <<'EOF'
create procedure myavg version 'sptest' {
local agg = nil
local function step(a)
    if agg == nil then
        agg = {}
        agg.as = a
        agg.n = 1
    else
        agg.as = agg.as + a
        agg.n = agg.n + 1
    end
end

local function final()
    return agg.as / agg.n
end
}$$
EOF
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put default procedure myavg 'sptest'"
    write_prompt $func "Putting default for myavg"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create lua aggregate function myavg"
    write_prompt $func "Exec gen and myavg"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "exec procedure gen()"
    lua_afunc_lsn_1=$(get_current_lsn)
    lua_afunc_avg_1=$(select_myavg)
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop lua aggregate function myavg"
    lua_afunc_avg_2=$(select_myavg)
    [[ "$lua_afunc_avg_2" == "$lua_afunc_avg_1" ]] && failexit $func "dropped lua aggregate returned same as active"

    write_prompt $func "Truncating to aggregate-function create"
    truncate_log "$lua_afunc_lsn_1"
    assert_select_myavg "$lua_afunc_avg_1"

    write_prompt $func "Truncating to before sp create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function morestripe
{
    [[ $debug == "1" ]] && set -x
    typeset func="morestripe"
    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    insert_record t1
    morestripe_lsn_1=$(get_current_lsn)
    morestripe_sal_1=$(select_all)
    morestripe_stp_1=$(get_dtastripe)
    assert_stripe 8

    write_prompt $func "More-striping to 16 stripes"
    morestripe_command 16
    morestripe_stp_2=$(get_dtastripe)
    assert_stripe 16

    write_prompt $func "Truncating to before morestripe"
    truncate_log "$morestripe_lsn_1"
    sleep $sleeptime
    dtastripe=$(get_dtastripe)
    assert_stripe 8

    write_prompt $func "Truncating to before table create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function genid48
{
    [[ $debug == "1" ]] && set -x
    typeset func="genid48"
    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    insert_record t1
    genid48_lsn_1=$(get_current_lsn)
    genid48_fmt_1=$(get_genid_format)

    write_prompt $func "Changing to time-based genids"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put genid48 disable"
    insert_record t1
    genid48_lsn_2=$(get_current_lsn)
    genid48_fmt_2=$(get_genid_format)
    [[ "$genid48_fmt_1" != "$genid48_fmt_2" ]] || failexit $func "genid format did not change"

    write_prompt $func "Changing to genid48 genids"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put genid48 enable"
    insert_record t1
    genid48_fmt_3=$(get_genid_format)
    [[ "$genid48_fmt_3" != "$genid48_fmt_2" ]] || failexit $func "genid format did not change"

    write_prompt $func "Truncating to time-based genids"
    truncate_log "$genid48_lsn_2"
    assert_genid_format "$genid48_fmt_2"

    write_prompt $func "Truncating to genid48 genids"
    truncate_log "$genid48_lsn_1"
    assert_genid_format "$genid48_fmt_1"

    write_prompt $func "Truncating to before table create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function rowlocks
{
    [[ $debug == "1" ]] && set -x
    typeset func="rowlocks"
    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    insert_record t1
    rowlocks_lsn_1=$(get_current_lsn)
    rowlocks_rlk_1=$(get_rowlocks)

    write_prompt $func "Enabling rowlocks"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put rowlocks enable"
    rowlocks_lsn_2=$(get_current_lsn)
    rowlocks_rlk_2=$(get_rowlocks)
    [[ "$rowlocks_rlk_1" != "$rowlocks_rlk_2" ]] || failexit $func "rowlocks were not enabled"

    write_prompt $func "Disabling rowlocks"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "put rowlocks disable"
    rowlocks_rlk_3=$(get_rowlocks)
    [[ "$rowlocks_rlk_2" != "$rowlocks_rlk_3" ]] || failexit $func "rowlocks were not disabled"

    write_prompt $func "Truncating to enabled rowlocks"
    truncate_log "$rowlocks_lsn_2"
    verify_rowlocks "$rowlocks_rlk_2"

    write_prompt $func "Truncating to disabled rowlocks"
    truncate_log "$rowlocks_lsn_1"
    verify_rowlocks "$rowlocks_rlk_1"

    write_prompt $func "Truncating to before table create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function time_partitions
{
    [[ $debug == "1" ]] && set -x
    typeset func="time_partitions"
    write_prompt $func "Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)" >/dev/null
    time_partitions_lsn_1=$(get_current_lsn)
    time_partitions_all_1=$(select_all)
    time_partitions_par_1=$(get_time_partitions)

    write_prompt $func "Make t1 a time-partitioned table"
    starttime=$(get_partition_start_time)
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create time partition on t1 as testpartition period 'test2min' retention 2 start '$starttime'"
    time_partitions_lsn_2=$(get_current_lsn)
    time_partitions_all_2=$(select_all)
    time_partitions_par_2=$(get_time_partitions)

    write_prompt $func "Insert 1000 records"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into testpartition select * from generate_series(1, 1000)"
    time_partitions_lsn_3=$(get_current_lsn)
    time_partitions_all_3=$(select_all)
    time_partitions_par_3=$(get_time_partitions)

    write_prompt $func "Schema-change testpartition"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table testpartition add b blob"
    time_partitions_lsn_4=$(get_current_lsn)
    time_partitions_all_4=$(select_all)
    time_partitions_par_4=$(get_time_partitions)

    write_prompt $func "Inserting into new schema"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into testpartition select * from generate_series(1, 1000)" >/dev/null

    write_prompt $func "Truncating to after schema-change"
    truncate_log "$time_partitions_lsn_4"
    assert_select_all "$time_partitions_all_4"
    assert_time_partitions "$time_partitions_par_4"

    write_prompt $func "Truncating to before schema-change"
    truncate_log "$time_partitions_lsn_3"
    assert_select_all "$time_partitions_all_3"
    assert_time_partitions "$time_partitions_par_3"

    write_prompt $func "Truncating to before insert"
    truncate_log "$time_partitions_lsn_2"
    assert_select_all "$time_partitions_all_2"
    assert_time_partitions "$time_partitions_par_2"

    write_prompt $func "Truncating to before partition"
    truncate_log "$time_partitions_lsn_1"
    assert_select_all "$time_partitions_all_1"
    assert_time_partitions "$time_partitions_par_1"

    write_prompt $func "Truncating to before table create"
    truncate_log "$begin_lsn"
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function setup
{
    [[ $debug == "1" ]] && set -x
    typeset func="setup"
    if [[ "$physrep" == 1 ]] ; then
        [[ "$dont_make_phys_rep" ]] || make_phys_rep
        sleep $repsleep
    fi

    if [[ "$setup_sleep" -gt 0 ]]; then
        write_prompt main "Sleeping for $setup_sleep"
        sleep $setup_sleep
    fi
}

function tear_down
{
    if [[ "$physrep" == 1 ]] ; then
        kill -9 $(cat $repdir/${repname}.pid)
    fi
}

function run_tests
{
    add_tables
    drop_tables
    rename_tables
    truncate_tables
    alter_table_options
    bulk_rebuild
    luasp
    lua_afunc
    lua_sfunc
    morestripe
    genid48
    rowlocks
    time_partitions
}

setup
run_tests
tear_down

# Not tested or supported (yet):
# queues

#!/usr/bin/env bash
bash -n "$0" | exit 1

# Debug variable
#debug=1

[[ $debug == "1" ]] && set -x

# Grab my database name.
dbnm=$1

sleeptime=10

function failexit
{
    [[ $debug == "1" ]] && set -x
    echo "Failed $1"
    exit -1
}

function get_current_lsn
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select lsn from comdb2_transaction_logs(NULL, NULL, 4) limit 1"
}

function get_master
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

function assert_notable
{
    [[ $debug == "1" ]] && set -x
    typeset tbl=$1

    echo "> Assert $tbl does not exist"
    chk=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from $tbl")
    [[ $? != 0 ]] || failexit "table $tbl still exists"
}

function assert_stat_compr
{
    #[[ $debug == "1" ]] && set -x
    set -x
    typeset prev_sc="$1"

    echo "> Assert stat compr is the same"
    typeset curr_sc=$(stat_compr)
    [[ "$prev_sc" != "$curr_sc" ]] && failexit "stat compr changed"
}

function stat_compr
{
    [[ $debug == "1" ]] && set -x
    $CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "exec procedure sys.cmd.send('stat compr')"
}

function assert_count
{
    [[ $debug == "1" ]] && set -x
    typeset tbl=$1
    typeset cnt=$2

    echo "> Assert count $tbl is $cnt"
    chk=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select count(*) from $tbl")
    [[ "$chk" == "$cnt" ]] || failexit "count for $tbl is not $cnt"
}

# Get begin-lsn and master
begin_lsn=$(get_current_lsn)
master=$(get_master)

function add_tables
{
    [[ $debug == "1" ]] && set -x

    echo "> Creating t1 and inserting three records"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"
    after_1_lsn=$(get_current_lsn)
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(2)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(3)"
    assert_count t1 3

    echo "> Truncating t1 to one record"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$after_1_lsn\")"
    sleep $sleeptime
    assert_count t1 1

    echo "> Truncating to before t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$begin_lsn\")"
    sleep $sleeptime
    assert_notable t1
}

function drop_tables
{
    [[ $debug == "1" ]] && set -x
    echo "> Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"
    echo "> Creating t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t2 values(1)"
    echo "> Creating t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t3 values(1)"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    after_3_lsn=$(get_current_lsn)
    echo "> Dropping t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    echo "> Dropping t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t2"
    echo "> Dropping t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t3"

    echo "> Truncating to before table drops"
    master=$(get_master)
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$after_3_lsn\")"
    sleep $sleeptime
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    echo "> Truncating to before table creates"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$begin_lsn\")"
    sleep $sleeptime
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function truncate_tables
{
    [[ $debug == "1" ]] && set -x

    echo "> Creating t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"

    echo "> Creating t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t2 values(1)"

    echo "> Creating t3"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int)"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t3 values(1)"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1
    before_truncate_lsn=$(get_current_lsn)

    echo "> Truncating tables"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "truncate table t3"
    assert_count t1 0
    assert_count t2 0
    assert_count t3 0

    echo "> Truncating logs to before table truncates"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$before_truncate_lsn\")"
    sleep $sleeptime
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    echo "> Truncating to before table creates"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$begin_lsn\")"
    sleep $sleeptime
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

function alter_table_options
{
    [[ $debug == "1" ]] && set -x
    echo "> Creating t1 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t1(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t1 values(1)"

    echo "> Creating t2 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t2(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t2 values(1)"

    echo "> Creating t3 with old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table t3(a int) options odh off, ipu off, isc off, rec none, blobfield none"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t3 values(1)"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1
    before_alter_options_lsn_1=$(get_current_lsn)
    before_alter_options_stc_1=$(stat_compr)

    echo "> Altering tables adding ODH"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 options rebuild, ipu off, isc off, rec none, blobfield none { schema { int a } }"
    added_odh_lsn_2=$(get_current_lsn)
    added_odh_stc_2=$(stat_compr)

    echo "> Altering tables adding compression"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 options rebuild, ipu off, isc off { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 options rebuild, ipu off, isc off { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 options rebuild, ipu off, isc off { schema { int a } }"
    added_comp_lsn_3=$(get_current_lsn)
    added_comp_stc_3=$(stat_compr)

    echo "> Altering tables adding ipu/isc"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t1 { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t2 { schema { int a } }"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "alter table t3 { schema { int a } }"
    added_all_lsn_4=$(get_current_lsn)
    added_all_stc_4=$(stat_compr)

    echo "> Dropping tables"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t1"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t2"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t3"
    assert_notable t1
    assert_notable t2
    assert_notable t3

    echo "> Truncating to added ipu/isc"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$added_all_lsn_4\")"
    sleep $sleeptime
    assert_stat_compr "$added_all_stc_4"

    echo "> Truncating to added compression"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$added_comp_lsn_3\")"
    sleep $sleeptime
    assert_stat_compr "$added_comp_stc_3"

    echo "> Truncating to added ODH"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$added_odh_lsn_2\")"
    sleep $sleeptime
    assert_stat_compr "$added_odh_stc_2"

    echo "> Truncating to old options"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$before_alter_options_lsn_1\")"
    sleep $sleeptime
    assert_stat_compr "$before_alter_options_stc_1"
    assert_count t1 1
    assert_count t2 1
    assert_count t3 1

    echo "> Truncating to before table creates"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.truncate_log(\"$begin_lsn\")"
    sleep $sleeptime
    assert_notable t1
    assert_notable t2
    assert_notable t3
}

add_tables
drop_tables
truncate_tables
alter_table_options

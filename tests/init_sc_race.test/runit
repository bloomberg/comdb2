#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x

. ${TESTSROOTDIR}/tools/write_prompt.sh
. ${TESTSROOTDIR}/tools/ddl.sh
. ${TESTSROOTDIR}/tools/cluster_utils.sh

export stopfile=./stopfile.txt
export tablecount=50

function failexit
{
    [[ $debug == "1" ]] && set -x
    touch $stopfile
    echo "Failed: $1"
    exit -1
}

function start_node
{
    [[ $debug == "1" ]] && set -x
    typeset func="start_node"
    typeset node=$1
    write_prompt $func "Running $func"
    ts=$(date +%s)
    if [ $node != $(hostname) ] ; then
        ssh -o StrictHostKeyChecking=no -tt $node COMDB2_ROOT=$COMDB2_ROOT $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl >$TESTDIR/logs/${DBNAME}.${node}.db.$ts 2>&1 </dev/null &
        echo $! > ${TMPDIR}/${DBNAME}.${node}.pid
    else
        $COMDB2_EXE ${DBNAME} -lrl $DBDIR/${DBNAME}.lrl &> $TESTDIR/logs/${DBNAME}.${node}.db.$ts -pidfile ${TMPDIR}/${DBNAME}.${node}.pid &
    fi
}

function start_cluster
{
    [[ $debug == "1" ]] && set -x
    typeset func="start_cluster"
    write_prompt $func "Running $func"
    for node in $CLUSTER ; do
        start_node $node
    done
}

function stop_cluster
{
    [[ $debug == "1" ]] && set -x
    typeset func="stop_cluster"
    write_prompt $func "Running $func"
    for node in $CLUSTER ; do
        $CDB2SQL_EXE $CDB2_OPTIONS --tabs $DBNAME --host $node "exec procedure sys.cmd.send(\"exit\")"
    done
    sleep 5
}

function kill_cluster
{
    [[ $debug == "1" ]] && set -x
    typeset func="stop_cluster"
    write_prompt $func "Running $func"
    for node in $CLUSTER ; do
        ssh $node "pid=\$(ps -ef | egrep comdb2 | egrep lrl | egrep -v bash | egrep $DBNAME | awk '{print \$2}') ; kill -9 \$pid "
    done
}

function verify_up
{
    [[ $debug == "1" ]] && set -x
    typeset func="verify_up"
    write_prompt $func "Running $func"
    typeset node=$1
    typeset count=0
    typeset r=1
    while [[ "$r" -ne "0" && "$count" -lt 5 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $node "select 1" >/dev/null 2>&1
        r=$?
        [[ $r != 0 ]] && sleep 1
        let count=count+1
    done
    [[ $r != 0 ]] && failexit "node $node did not recover in time"
}

function add_records
{
    [[ $debug == "1" ]] && set -x
    typeset func="add_records"
    write_prompt $func "Running $func"
    
    i=0
    while [[ $i -lt $tablecount ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into t$i(a, b, c, d, e) values (1, 2, 3, 4, 5)"
        let i=i+1
    done
}

function run_test
{
    [[ $debug == "1" ]] && set -x
    typeset func="run_test"
    write_prompt $func "Running $func"
    add_records
    write_prompt $func "Tables should already be created"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "select * from comdb2_tables"

    stop_cluster
    sleep 5
    start_cluster

    r=1
    while [[ $r != 0 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "update t1 set a=1 where a=1" 
        r=$?
    done

    j=11
    while [[ $j -lt 40 ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "drop table t$j"
        let j=j+1
    done

    for node in $CLUSTER; do
        verify_up $node &
    done
    sleep 10
    kill_cluster

    [[ -f "$stopfile" ]] && failexit "testcase failed"
    touch "$stopfile"
    wait
}

[[ -z "$CLUSTER" ]] && failexit "This test requires a cluster"

run_test
echo "Success"

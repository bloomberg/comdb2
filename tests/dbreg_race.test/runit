#!/usr/bin/env bash
bash -n "$0" | exit 1

[ -z "${CLUSTER}" ] && { echo "Test requires a cluster"; exit 0; }


for node in $CLUSTER ; do
    cdb2sql $dbnm --host $node 'EXEC PROCEDURE sys.cmd.send("abort_ufid_open 1")'
    cdb2sql $dbnm --host $node 'EXEC PROCEDURE sys.cmd.send("bdb_handle_reset_delay 1")'
done

set -e

dbnm=$1

master=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'select host from comdb2_cluster where is_master="Y"'`
echo master is $master


# The test demonstrates a day-1 race condition between bdb_handle_reset() and dbreg_lazy_id()
# where a dbreg entry may be mistakenly deleted from the system, if ufid is disabled;
# or a dbreg entry may be closed and reopened, if ufid is enabled.
#
# Consider the following tables:
#   CREATE TABLE t1 (i INT)
#   CREATE TABLE t2 (i INT)
# Suppose t2 is opened already; dbreg N is assigned to t2. t1 hasn't been assigned an ID yet.
#
# The following events reproduce the race:
#
#     client                   m1                             m2
# ---------------------------------------------------------------------------------------------------------------------
# T0  TRUNCATE t2
# ---------------------------------------------------------------------------------------------------------------------
# T1                           begin sc txn;
#                              close dbreg N
# ---------------------------------------------------------------------------------------------------------------------
# T2  INSERT-INTO-t1
# ---------------------------------------------------------------------------------------------------------------------
# T3                           assign N to t1
# ---------------------------------------------------------------------------------------------------------------------
# T4                                                          apply dbreg {N->t1}
# ---------------------------------------------------------------------------------------------------------------------
# T5                           re-assign N-1 to t2
#                              commit sc txn
# ---------------------------------------------------------------------------------------------------------------------
# T6                                                          start applying the sc txn:
#                                                               1) unassign dbreg N and clears t1;
#                                                               2) open t2 and assign dbreg N-1 to t2
# ---------------------------------------------------------------------------------------------------------------------
# T7  INSERT-INTO-t1
# ---------------------------------------------------------------------------------------------------------------------
# T8                                                          dbreg N which is assigned to t1 is closed by the sc txn!
# ---------------------------------------------------------------------------------------------------------------------
#
# Note that at T8, m2 would not be able to find dbreg N. if ufid logging is enabled, m2 would reopen t1;
# if ufid logging is disabled, m2 would panic with the following trace:
#   transaction failed at [1][613041]
#   __rep_process_txn_int failed at line 4907 with 2
#   Error processing txn [1][613353]
#   PANIC: No such file or directory

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<'EOF'
CREATE TABLE t1 (i INT)$$
CREATE TABLE t2 (i INT)$$
CREATE TABLE t3 (i INT)$$
EOF

cdb2sql $dbnm --host $master 'EXEC PROCEDURE sys.cmd.send("downgrade")'

# allow master swing to complete
sleep 5

cdb2sql ${CDB2_OPTIONS} $dbnm default 'TRUNCATE TABLE t2' &

# allow sc to almost finish
sleep 3
cdb2sql ${CDB2_OPTIONS} $dbnm default 'INSERT INTO t1 VALUES(1)'

wait

# The statement below would crash replicants if ufid is disabled, and would cause t1 to be reopened if ufid is enabled.
cdb2sql ${CDB2_OPTIONS} $dbnm default 'INSERT INTO t1 VALUES(1)'

# make sure that all nodes are accessible. we use --admin mode because on a busy box
# it could take quite a while for a cluster to fully sync.
for node in $CLUSTER ; do
    ssh -o StrictHostKeyChecking=no $node "/opt/bb/bin/cdb2sql --admin $dbnm --host $node 'SELECT 1'"
done

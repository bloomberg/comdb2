#!/usr/bin/env bash
bash -n "$0" | exit 1

# Grab my database name.
dbnm=$1

# Verify that the user at least supplied a dbname
if [[ -z "$dbnm" ]]; then

    echo "Testcase requires <dbname> argument."
    exit 1

fi

# Enable or disable debugging.
debug=0

# Enable background-debugging.
bgdebug=0

# Set the maximum number of added records
maxt=1000

# Set to 0 to disable inserts.
ins=1

# Set to 0 to disable updates.
upd=1

# Set to 0 to disable no-blob updates.
upd_noblob=1

# Set to 0 to disable only-blob updates
upd_onlyblob=1

# Set to 0 to disable deletes.
del=1

# Does have any writes- calculated at end.
wr=1

# 'Background' tmpfile.
bgtmpfl=${TMPDIR}/cdb2tst_bg.$$.tmp

# Counter.
ii=0

# Number of background writers.
nwrts=5

# Enable or disable a hello-message from the bg writers.
bghlo=0

# Variable to maintain the pids of the bkground writes.
bkpid=-1

# Set to 1 to make all blobs NULL originally
allnull_blob=0

# Set the background pids to -1.
while [[ $ii -lt $nwrts ]]; do

    # Reset to -1.
    bkpid[$ii]=-1

    # Increment.
    let ii=ii+1

done

# Error/quit function.
function errquit
{
    typeset msg=$1
    typeset cnt=0

    # Enable debugging.
    [[ "$debug" == "1" ]] && set -x

    echo "ERROR: $msg"
    echo "Testcase failed."

    # Check for the background writer.
    while [[ $cnt -lt $nwrts ]]; do

        # Kill each pid
        [[ ${bkpid[$cnt]} != "-1" ]] && kill -9 ${bkpid[$cnt]} >/dev/null 2>&1

        # Reset to -1
        bkpid[$cnt]=-1

        let cnt=cnt+1

    done

    # Exit test.
    exit 1
}

# Generate insert statements
function geninsert
{
    typeset tbl=$1
    typeset max=$2
    typeset fl=$3
    typeset ii=0
    typeset nullblob=0

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Clear my file
    >$fl

    # Start a loop
    while [[ $ii -lt $max ]] ; do

        # Insert a NULL blob once every 2 records
        if [[ "0" == $(( ii % 2 )) ]]; then

            nullblob=1

        else

            nullblob=0

        fi

        # Set all blobs to NULL initially if allnull_blob is set.
        if [[ "$allnull_blob" == "1" ]]; then

            nullblob=1

        fi

        if [[ "1" == "$nullblob" ]]; then

            # Print a line of trace
            echo "insert into $tbl(id) values ($ii)" >> $fl

        else

            # Print a line of trace
            echo "insert into $tbl(id, b1) values ($ii, x'aa')" >> $fl

        fi

        # Increment ii
        let ii=ii+1

    done

    return 0
}

# Create a random blob 
function randbl
{
    typeset sz=$1

    for i in $(seq 1 $sz); do

        echo -n $(echo "obase=16; $(($RANDOM % 16))" | bc);

    done;

    echo

    return 0
}

# Insert a random record into
function insert_rand
{
    typeset db=$1
    typeset tbl=$2
    typeset id
    typeset bl
    typeset out
    typeset bsz

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id
    id=$(( RANDOM % (maxt * 2) ))

    # Create a random blob
    bsz=$(( (RANDOM % 17) * 2 ))
    bl=$(randbl $bsz)

    # Insert the record
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"insert into $tbl(id, b1) values ($id, x'$bl')\""
        cdb2sql ${CDB2_OPTIONS} $db default "insert into $tbl(id, b1) values ($id, x'$bl')"
    else
        out=$(cdb2sql ${CDB2_OPTIONS} $db default "insert into $tbl(id, b1) values ($id, x'$bl')" 2>&1)
    fi
    if [[ $? != 0 ]]; then
        echo "insert_rand failed, $out"
        exit 1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then
        
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"insert into $tbl(id, b1) values ($id, x'$bl')\"" >> $bgtmpfl
    fi

    return 0
}

function update_noblob_rand
{
    typeset db=$1
    typeset tbl=$2
    typeset id
    typeset upid
    typeset x
    typeset out

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id
    id=$(( RANDOM % ( maxt * 2) )) ; upid=$(( RANDOM % (maxt * 2) ))

    # Update a record, discard the result
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set id=$upid where id=$id\""
        cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set id=$upid where id=$id"
    else
        out=$(cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set id=$upid where id=$id" 2>&1)
    fi
    if [[ $? != 0 ]]; then
        echo "update_noblob_rand failed, $out"
        exit 1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then
        
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set id=$upid where id=$id\"" >> $bgtmpfl
    fi

    return 0
}

# Update a random record
function update_onlyblob_rand
{
    typeset db=$1
    typeset tbl=$2
    typeset id
    typeset nullblob=0
    typeset x
    typeset out
    typeset bsz

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id
    x=$RANDOM ; id=$(( x % ( maxt * 2) ))

    # Create a random blob
    bsz=$(( (RANDOM % 17) * 2 ))
    bl=$(randbl $bsz)

    # Make the blob a NULL once every 5 times
    if [[ "0" == $((RANDOM % 5 )) ]]; then
        nullblob=1
    fi

    # Update a record, discard the result
    if [[ "1" == "$debug" ]]; then

        if [[ "1" == "$nullblob" ]]; then

            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set b1=NULL where id=$id\""
            cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set b1=NULL where id=$id"

        else

            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set b1=x'$bl' where id=$id\""
            cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set b1=x'$bl' where id=$id"

        fi

    else
        if [[ "1" == "$nullblob" ]]; then
            out=$(cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set b1=NULL where id=$id" 2>&1)
        else
            out=$(cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set b1=x'$bl' where id=$id" 2>&1)
        fi
    fi
    if [[ $? != 0 ]]; then
        echo "update_onlyblob_rand failed, $out"
        exit 1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then
        
        if [[ "1" == "$nullblob" ]]; then
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set b1=NULL where id=$id\"" >> $bgtmpfl
        else
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set b1=x'$bl' where id=$id\"" >> $bgtmpfl
        fi
    fi

    return 0
}


# Update a random record
function update_rand
{
    typeset db=$1
    typeset tbl=$2
    typeset id
    typeset upid
    typeset nullblob=0
    typeset out
    typeset bsz

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id
    id=$(( RANDOM % (maxt * 2) )) ; upid=$(( RANDOM % (maxt * 2) ))

    # Create a random blob
    bsz=$(( (RANDOM % 17) * 2 ))
    bl=$(randbl $bsz)

    # Make the blob a NULL once every 5 times
    if [[ "0" == $(( RANDOM % 5 )) ]]; then
        nullblob=1
    fi

    # Update a record, discard the result
    if [[ "1" == "$debug" ]]; then

        if [[ "1" == "$nullblob" ]]; then

            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set id=$upid, b1=NULL where id=$id\""
            cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set id=$upid, b1=NULL where id=$id"

        else

            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set id=$upid, b1=x'$bl' where id=$id\""
            cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set id=$upid, b1=x'$bl' where id=$id"

        fi

    else
        if [[ "1" == "$nullblob" ]]; then
            out=$(cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set id=$upid, b1=NULL where id=$id" 2>&1)
        else
            out=$(cdb2sql ${CDB2_OPTIONS} $db default "update $tbl set id=$upid, b1=x'$bl' where id=$id" 2>&1)
        fi
    fi
    if [[ $? != 0 ]]; then
        echo "update_rand failed, $out"
        exit 1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then
        
        if [[ "1" == "$nullblob" ]]; then
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set id=$upid, b1=NULL where id=$id\"" >> $bgtmpfl
        else
            echo "cdb2sql ${CDB2_OPTIONS} $db default \"update $tbl set id=$upid, b1=x'$bl' where id=$id\"" >> $bgtmpfl
        fi

    fi

    return 0
}

# Delete a random record
function delete_rand
{
    typeset db=$1
    typeset tbl=$2
    typeset id
    typeset x
    typeset out

    # Enable debugging if necessary
    [[ "$debug" == "1" ]] && set -x

    # Create a random id
    x=$RANDOM ; id=$(( x % (maxt * 2) ))

    # Delete a record, discard the result
    if [[ "1" == "$debug" ]]; then
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"delete from $tbl where id=$id\""
        cdb2sql ${CDB2_OPTIONS} $db default "delete from $tbl where id=$id"
    else
        out=$(cdb2sql ${CDB2_OPTIONS} $db default "delete from $tbl where id=$id" 2>&1)
    fi
    if [[ $? != 0 ]]; then
        echo "delete_rand failed, $out"
        exit 1
    fi

    # If the 'bgdebug' flag is set, write this to a file. */
    if [[ "1" == "$bgdebug" ]]; then
        
        echo "cdb2sql ${CDB2_OPTIONS} $db default \"delete from $tbl where id=$id\"" >> $bgtmpfl

    fi

    return 0
}

# Perform some random writes
function randomwrites
{
    typeset rdm
    typeset table 

    # Say 'hello'.
    [[ "1" == "$bghlo" ]] && echo "Background writer executing."

    # Perform some random writes in a loop
    while true; do
        rdm=$RANDOM
        if [[ "0" == $(( rdm % 3 )) ]]; then
            table='t1'
        fi
        if [[ "1" == $(( rdm % 3 )) ]]; then
            table='t2'
        fi
        if [[ "2" == $(( rdm % 3 )) ]]; then
            table='t3'
        fi

        # Insert a record
        [[ "1" == "$ins" ]] && insert_rand $dbnm $table

        # Update a random record
        [[ "1" == "$upd" ]] && update_rand $dbnm $table

        # Update a random record without touching the blob
        [[ "1" == "$upd_noblob" ]] && update_noblob_rand $dbnm $table

        # Update a random records blob without touching id
        [[ "1" == "$upd_onlyblob" ]] && update_onlyblob_rand $dbnm $table

        # Delete a record
        [[ "1" == "$del" ]] && delete_rand $dbnm $table

        sleep 0.1
    done

    return 0
}

function do_verify
{
    typeset $tbl=$1
    typeset cnt=0

    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('$tbl')" &> verify.out

    if ! grep succeeded verify.out > /dev/null ; then

        errquit "Verify failed."

    fi

    echo "Verify for $tbl succeeded"
    cat verify.out

    # Check for the background writer.
    while [[ $cnt -lt $nwrts ]]; do

        if [[ "-1" != ${bkpid[$cnt]} ]]; then

            ps -p ${bkpid[$cnt]} >/dev/null 2>&1

            if [[ $? != 0 ]] ; then

                errquit "Background writers failed"

            fi

        fi

        let cnt=cnt+1

    done
}

function assert_vers 
{
    tbl=$1
    target=$2
    newver=$(cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default "select table_version('$tbl')")
    if [[ $newver != $target ]] ; then
        errquit "newver is now $newver but should be $target"
    fi
    tblver=$newver
}

function get_schemachange_status
{
    master=$1
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('stat sc')" | grep "in progress with seed" > schemachange_status.out
    if [ $? -eq 0 ] ; then
        return 1 
    fi
    return 0
}

function wait_for_sc
{
    sleep 5
    while true ; do
        get_schemachange_status $master
        if [ $? -ne 1 ] ; then
            cat schemachange_status.out
            echo "break out since sc was done"
            break;
        fi
        cat schemachange_status.out
        echo "Schema is still running on master $master"

        sleep 5
    done
}

function force_delay_master
{
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('bdb setattr SC_FORCE_DELAY 1')"
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "exec procedure sys.cmd.send('scdelay 100')"
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE COMMITSLEEP 3"
    cdb2sql ${CDB2_OPTIONS} --host $master $dbnm "PUT SCHEMACHANGE CONVERTSLEEP 3"
}

function getmaster {
    cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep MASTER | cut -f1 -d":" | tr -d '[:space:]'
}

# Trap to errquit if the user presses Ctrl-C
trap "errquit \"Cancelling test on INT EXIT\"" INT EXIT

master=`getmaster`
echo "Master is $master"

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
create table t1 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "ID"  = id
   dup "EXPR"  = (int)"id + id"
   dup "EXPR2"  = (int)"length(b1)" {where b1 is not null}
   dup "EXPR3"  = (int)"length(b1)" + (int)"id + length(b1)"
}
}\$\$
EOF

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
create table t2 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "ID"  = id
   dup "EXPR"  = (int)"id + id"
   dup "EXPR2"  = (int)"length(b1)" {where b1 is not null}
   dup "EXPR3"  = (int)"length(b1)" + (int)"id + length(b1)"
}
}\$\$
EOF

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<EOF
create table t3 {
schema
{
   int  id
   blob b1 null=yes
}
keys
{
   dup "ID"  = id
   dup "EXPR"  = (int)"id + id"
   dup "EXPR2"  = (int)"length(b1)" {where b1 is not null}
   dup "EXPR3"  = (int)"length(b1)" + (int)"id + length(b1)"
}
}\$\$
EOF

# If bgdebugging is enabled, print the filename.
if [[ "1" == "$bgdebug" ]]; then

    # Clear it out.
    > $bgtmpfl

    echo "Enabled 'background' debugging for writes in file '$bgtmpfl'."
fi

# Create an insert_t1.cfg 
echo "Generating insert_t1.cfg."
geninsert t1 $maxt insert_t1.cfg

echo "Generating insert_t2.cfg."
geninsert t2 $maxt insert_t2.cfg

echo "Generating insert_t3.cfg."
geninsert t3 $maxt insert_t3.cfg

# Insert records into t1.k
echo "Inserting records into t1."
cdb2sql -s ${CDB2_OPTIONS} $dbnm default - < insert_t1.cfg >/dev/null

# Insert records into t2.k
echo "Inserting records into t2."
cdb2sql -s ${CDB2_OPTIONS} $dbnm default - < insert_t2.cfg >/dev/null

# Insert records into t3.k
echo "Inserting records into t3."
cdb2sql -s ${CDB2_OPTIONS} $dbnm default - < insert_t3.cfg >/dev/null

# Select t1 back.
echo "Selecting t1."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id, b1 from t1 order by id" > select_t1.txt

# Select t2 back.
echo "Selecting t2."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id, b1 from t2 order by id" > select_t2.txt

# Select t3 back.
echo "Selecting t3."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id, b1 from t3 order by id" > select_t3.txt

ii=0
# Print status message.
echo "Writing random records from $nwrts background processes."
# Start my background writers
while [[ $ii -lt $nwrts ]]; do

    # Start a loop of random-writes.
    randomwrites &

    # Retrieve the pid.
    bkpid[$ii]=$!

    echo "Background write $ii pid ${bkpid[$ii]}"

    # Increment.
    let ii=ii+1

done

assert_vers t1 0
assert_vers t2 0
assert_vers t3 0

force_delay_master

echo "Starting schemachange"
cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild t1" > rebuild_t1.log 2>&1 &
cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild t2" > rebuild_t2.log 2>&1 &
cdb2sql ${CDB2_OPTIONS} $dbnm default "rebuild t3" > rebuild_t3.log 2>&1 &

echo "wait for sc to finish"
wait_for_sc

echo "rebuild t1 log"
cat rebuild_t1.log
echo "rebuild t2 log"
cat rebuild_t2.log
echo "rebuild t3 log"
cat rebuild_t3.log

assert_vers t1 1
assert_vers t2 1
assert_vers t3 1

do_verify t1
do_verify t2
do_verify t3

# Reset counter.
ii=0

# Check my writer-pids in a loop.
while [[ $ii -lt $nwrts ]]; do

    # Check the writer pid again
    if [[ "-1" != ${bkpid[$ii]} ]]; then

        # kill it
        kill -9 ${bkpid[$ii]}
    fi

    # Go to next pid
    let ii=ii+1

done

# Remove trap-command.
trap - INT EXIT

# Select t1 back.
echo "Selecting t1."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id, b1 from t1 order by id" > select_t1_final.txt

# See if t1 was updated during this test.
wr_t1=$(( upd_t1 + del_t1 + ins_t1 ))

# Diff the current t1 against the original snapshot.
diff ./select_t1.txt $select_t1_final >/dev/null 2>&1

# If this is the same, something went wrong.
if [[ "0" != "$wr_t1" && $? == 0 ]]; then

    # echo testcase is broken message.
    echo "Testcase is broken: the post-commit t1 should have changed."

    # Tell the user how to see this.
    echo "Run 'diff $(pwd)/{select_t1.txt select_t1_final.txt}' to see the error."

    exit 1

fi

# Select t2 back.
echo "Selecting t2."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id, b1 from t2 order by id" > select_t2_final.txt

# See if t2 was updated during this test.
wr=$(( upd + del + ins ))

# Diff the current t2 against the original snapshot.
diff ./select_t2.txt $select_t2_final >/dev/null 2>&1

# If this is the same, something went wrong.
if [[ "0" != "$wr" && $? == 0 ]]; then

    # echo testcase is broken message.
    echo "Testcase is broken: the post-commit t2 should have changed."

    # Tell the user how to see this.
    echo "Run 'diff $(pwd)/{select_t2.txt select_t2_final.txt}' to see the error."

    exit 1

fi

# Select t3 back.
echo "Selecting t3."
cdb2sql ${CDB2_OPTIONS} $dbnm default "select id, b1 from t3 order by id" > select_t3_final.txt

# See if t3 was updated during this test.
wr=$(( upd + del + ins ))

# Diff the current t3 against the original snapshot.
diff ./select_t3.txt $select_t3_final >/dev/null 2>&1

# If this is the same, something went wrong.
if [[ "0" != "$wr" && $? == 0 ]]; then

    # echo testcase is broken message.
    echo "Testcase is broken: the post-commit t3 should have changed."

    # Tell the user how to see this.
    echo "Run 'diff $(pwd)/{select_t3.txt select_t3_final.txt}' to see the error."

    exit 1

fi

echo "Testcase passed."

exit 0

#!/usr/bin/env bash
bash -n "$0" | exit 1

#export debug=1
[[ $debug == "1" ]] && set -x
export stopfile=./stopfile.txt

. ${TESTSROOTDIR}/tools/cluster_utils.sh
. ${TESTSROOTDIR}/tools/runit_common.sh

function create_table
{
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "create table if not exists x(a int)"
}

function insert_loop
{
    while [[ ! -f $stopfile ]]; do
        $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME default "insert into x select * from generate_series(1, 100000)" >/dev/null 2>&1
    done
}

function downgrade
{
    master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y' limit 1")
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "exec procedure sys.cmd.send('downgrade')" >/dev/null 2>&1
}

function run_test
{
    rm -f $stopfile >/dev/null 2>&1

    create_table
    insert_loop &

    replicant=""
    while [[ -z "$replicant" ]]; do
        replicant=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='N' limit 1")
        if [[ -z "$replicant" ]]; then
            sleep 5
        fi
    done

    master=$($CDB2SQL_EXE -tabs $CDB2_OPTIONS $DBNAME default "select host from comdb2_cluster where is_master='Y' limit 1")

    echo "Bringing $replicant down for 120 seconds"
    kill_restart_node $replicant 120 0

    echo "Sleeping for 20 seconds for recovery"
    sleep 20

    echo "Toggle sleep-on-long-req-log-request"
    $CDB2SQL_EXE $CDB2_OPTIONS $DBNAME --host $master "put tunable 'slow_rep_log_get_loop' 1" 

    foundsleep=0
    echo "Search for 'polling in rep-log-get loop' on master"
    while [[ "$foundsleep" == "0" ]]; do
        x=$(grep -c "polling in rep-log-get loop" $TESTDIR/logs/${DBNAME}.${master}.db 2>&1)
        if [[ "$x" != "0" ]]; then
            foundsleep=1
        else
            sleep 1
        fi
    done
    echo "Found sleep"

    foundtrace=0

    echo "Downgrading"
    downgrade
    sleep 1

    cnt=0
    x=$(grep "exiting log-get loop, lock-is-desired" $TESTDIR/logs/${DBNAME}.${master}.db 2>&1)
    while [[ "$x" == "" && "$cnt" -le "60" ]]; do
        sleep 1
        x=$(grep "exiting log-get loop, lock-is-desired" $TESTDIR/logs/${DBNAME}.${master}.db 2>&1)
        let cnt=cnt+1
    done

    if [[ "$x" != "" ]]; then
        foundtrace=1
    fi

    touch $stopfile

    # Have seen rr hang for tests which restart nodes
    # Just kill them from driver
    echo "Killing all databases"
    for node in $CLUSTER ; do 
        kill -9 $(cat ${TMPDIR}/${DBNAME}.${node}.pid)
    done

    if [[ "$foundtrace" == "1" ]]; then
        echo "Success!"
    else
        failexit "Failed to reproduce lock-is-desired condition in log-get loop"
    fi
}

[[ -z "$CLUSTER" ]] && failexit "This test requires a cluster"
run_test

#!/bin/sh

# Verify that a large number of rollbacks or disconnects won't cause bplog to
# pile up on the master, by using synchronous osql cancellation.

[ -z "$CLUSTER" ] && { echo "skipping, it's a cluster test"; exit 0; }

bash -n "$0" | exit 1

dbnm=$1

cdb2sql ${CDB2_OPTIONS} $dbnm default 'CREATE TABLE t1 (i int)'

for h in $CLUSTER; do
  cdb2sql $dbnm --host $h "exec procedure sys.cmd.send('test_sync_osql_cancel 1')"
done

while true; do
cat << EOF | cdb2sql ${CDB2_OPTIONS} -s --tabs $dbnm default - >/dev/null 2>&1
BEGIN
INSERT INTO t1 VALUES (1)
ROLLBACK
EOF
done &

pid=$!
sleep 30
kill $pid

for h in $CLUSTER; do
  echo $h:
  cdb2sql --tabs $dbnm --host $h "exec procedure sys.cmd.send('appsockpool stat')"
  nreqs=`cdb2sql --tabs $dbnm --host $h "exec procedure sys.cmd.send('appsockpool stat')" | grep 'Work items done immediate' | awk '{print $NF;}'`
  if [ $nreqs -gt 100 ]; then
    echo Requests piled up on master! >&2
    exit 1
  fi
done

#!/bin/bash

set -e
set -x
prefix=$(basename $(realpath $(pwd)/..))
dir=$(pwd)
echo test dir is $dir
prefix=$(echo $prefix | sed "s/_//g")
echo prefix for test is $prefix

export COMPOSE_PROJECT_NAME=$prefix

cd ../../../
pwd

# Build a container from the current source
docker build -t comdb2test:$prefix -f ${dir}/Dockerfile.dev .
cd $dir
pwd
rm -fr testdb
rm -fr log
mkdir testdb
mkdir log
chmod 777 log
../../../comdb2 testdb --create --dir $(pwd)/testdb
sed -i.bak 's!^dir.*!dir     /opt/bb/var/cdb2/testdb!' testdb/testdb.lrl
cat >> testdb/testdb.lrl <<EOF
cluster nodes m1 m2 m3 m4 m5
SOSQL_MAX_COMMIT_WAIT_SEC 60
dedicated_network_suffixes -n3 -n4
EOF

# We'll build our db and client containers from that container
sed -i.bak "s/@image@/comdb2test:$prefix/" Dockerfile.client Dockerfile.db
docker-compose build

# Start, wait for it to signal that it's ready
docker-compose up &
(cat log/client.log ; tail -F log/client.log) | sed '/READY/q' >/dev/null

# let it run for a bit
sleep 30

# break the network
net=$((3 + $RANDOM % 2))
echo "Disconnecting n${net}..."
for m in $(seq 1 5); do 
    docker network disconnect ${prefix}_n${net} ${prefix}_m${m}_1
done

# Let the test keep running, we'll look for errors later.
sleep 120

set +e

rc=0
# Let's see if we have errors:

grep -q "Master.*failed to acknowledge session" log/m*.log
[[ $? -eq 0 ]] && { echo 'master failed to ack session'; rc=$((rc + 1)); }

grep -q "master.*lost transaction" log/*.log
[[ $? -eq 0 ]] && { echo 'master lost txn'; rc=$((rc + 1)); }

grep -q "Cannot connect to db" log/*.log
[[ $? -eq 0 ]] && { echo 'client could not connect'; rc=$((rc + 1)); }

# tear down
docker network ls

# shutting down instances
docker-compose down --rmi 'all' --volumes --remove-orphans

# try to clean up
docker rmi -f comdb2test:$prefix >/dev/null 2>&1
docker network rm ${prefix}_primary ${prefix}_n3 ${prefix}_n4 >/dev/null 2>&1

exit $rc

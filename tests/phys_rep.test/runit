
#!/usr/bin/env bash

env
dbname=$1
NRECS=1000
NRUNS=10000

set -x

destdb=${TESTCASE}dest${TESTID}
DEST_DBDIR=${DBDIR}/$destdb
mkdir -p $DEST_DBDIR

# use copycomdb2 to create a physical replicant

$COPYCOMDB2_EXE -H ${destdb} -y localhost $DEST_DBDIR/${destdb}.lrl

df $DBDIR | awk '{print $1 }' | grep "tmpfs\|nfs" && echo "setattr directio 0" >> $DBDIR/${destdb}.lrl

if [ -n "$PMUXPORT" ] ; then
    echo "portmux_port $PMUXPORT" >> $DEST_DBDIR/${destdb}.lrl
    echo "portmux_bind_path $pmux_socket" >> $DEST_DBDIR/${destdb}.lrl
fi

out=
while [[ "$out" != "1" ]]; do
    out=$(cdb2sql --tabs ${CDB2_OPTIONS} $destdb local 'select 1' 2>/dev/null)
    sleep 1
done

# iterate over each test
for sql in `ls *.sql | sort -V`; do
    src=$(cdb2sql -s --tabs -f $sql ${CDB2_OPTIONS} $dbnme default 2>&1) 
    dest=$(cdb2sql -s --tabs -f $sql ${CDB2_OPTIONS} $destdb localhost 2>&1)
    if [ "$?" != "0" ]; then
        echo 'Failed.'
        exit 1
    fi
done

# check add, insert, update
cdb2sql ${CDB2_OPTIONS} $dbname default 'create table t1 {
schema {
    int id

    short a null=yes
    int b null=yes
    u_short c null=yes
    u_int d null=yes
    longlong e null=yes
    float f null=yes
    double g null=yes
    cstring h[10] null=yes
    blob i null=yes
    datetime j null=yes

}
}
'


src_add_table=$(cdb2sql ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | md5sum)
dest_add_table=$(cdb2sql ${CDB2_OPTIONS} $destdb local "select * from t1" | sort | md5sum)
echo "src $src dest $dest"

for i in $(seq 1 $NRECS); do
    echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values ($i, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());"
done | cdb2sql -s ${CDB2_OPTIONS} $dbname default - >/dev/null

for i in $(seq 1 $NRUNS); do
    what=$(($RANDOM % 3))
    id=$(($RANDOM % $NRECS))
    case $what in
        0)  echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values ($id, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());"
        ;;
        1)  echo "delete from t1 where id = $id limit 1"
        ;;
        2)  echo "update t1 set a=a+1, b=b+2 where id=$id"
        ;;
    esac
done | cdb2sql -s ${CDB2_OPTIONS} $dbname default - >/dev/null

src_rand=$(cdb2sql ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | md5sum)
dest_rand=$(cdb2sql ${CDB2_OPTIONS} $destdb local "select * from t1" | sort | md5sum)
echo "src $src dest $dest"

echo "Testing truncate table"
cdb2sql ${CDB2_OPTIONS} $dbname default "truncate t1"
# run the replication step
${TESTSBUILDDIR}/localrep $dbname $destdb 2>&1
src2=$(cdb2sql ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | md5sum)
dest2=$(cdb2sql ${CDB2_OPTIONS} $destdb local "select * from t1" | sort | md5sum)
echo "src2 $src2 dest2 $dest2"

# cleanup
# kill -9 $(cat $DBDIR/${destdb}.pid)
# echo deregister from pmux ${destdb}
# ${TESTSROOTDIR}/tools/send_msg_port.sh "del comdb2/replication/${destdb} " ${pmux_port}

if [[ "$src" != "$dest" ]]; then
    exit 1
fi

if [[ "$src2" != "$dest2" ]]; then
    echo "truncate failed"
    exit 1
fi

exit 0
xit 0

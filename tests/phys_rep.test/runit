#!/usr/bin/env bash
bash -n "$0" | exit 1

set -x
source ${TESTSROOTDIR}/tools/runit_common.sh

export NRECS=10
export COPYCOMDB2_EXE=${BUILDDIR}/db/copycomdb2

SLEEPAMOUNT=8
dbname=$1
NRUNS=100
dgpid=0
destdb=${TESTCASE}dest${TESTID}
copy_using_comdb2_files=0

COPY_DBDIR=${DBDIR}/$destdb
DEST_DBDIR=${COPY_DBDIR}/$dbname

if [[ -z "$TEST_TIMEOUT" ]] ; then
    export TEST_TIMEOUT=5m
fi

if [ "$TESTCASE" == "phys_rep_via_comdb2_files_generated" ]; then
    copy_using_comdb2_files=1
fi

function downgradeonce()
{
    local dbname=$1
    local mnode=`getmaster`
    cdb2sql ${CDB2_OPTIONS} --host $mnode $dbname "exec procedure sys.cmd.send('downgrade')"
}

function downgrade()
{
    local dbname=$1
    local SLEEPAMOUNT=${2:-4}
    while true; do
        sleep $SLEEPAMOUNT
        local mnode=`getmaster`
        cdb2sql ${CDB2_OPTIONS} --host $mnode $dbname "exec procedure sys.cmd.send('downgrade')"
    done
}

function override_physrep_sp()
{
    local mnode=`getmaster`
    # Override the register_replicant stored procedure
    ${CDB2SQL_EXE} $CDB2_OPTIONS $dbname --host $mnode "create procedure 'sys.physrep.register_replicant' version '1' { `cat ./register_replicant.lua`  }"
}

function setup_replicant()
{
    if [ $copy_using_comdb2_files -eq 1 ]; then
	mkdir -p $COPY_DBDIR

	# The data gets copied under $COPY_DIR/${DBNAME} which is stored in $DEST_DBDIR
	local mnode=`getmaster`
	${TESTSBUILDDIR}/copy_db_files -d ${DBNAME} -h @${mnode} -t $COPY_DBDIR
	if [ $? -ne 0 ]; then
	    failexit "copy_db_files failed"
	fi

	# Create a new lrl file for the replicant (ignoring the one copied from parent)
	cat <<END >> ${DEST_DBDIR}/${destdb}.lrl
name ${destdb}
dir ${DEST_DBDIR}
logmsg level debug
replicate_from ${dbname} @${mnode}
END

    else
	mkdir -p $DEST_DBDIR
	if [[ -z "$CLUSTER" ]]; then
	    cl="-y @localhost"
	else
	    cl="-y @$(echo $CLUSTER | tr ' ' ',')"
	fi
	if [[ -n "$CLUSTER" ]]; then
	    if [[ "$CLUSTER" =~ .*$myhost.* ]]; then
		rmt=""
	    else
		clarray=($CLUSTER)
		rmt="${clarray[0]}:"
	    fi
	fi

	${COPYCOMDB2_EXE} -x ${COMDB2_EXE} -H $destdb $cl $rmt${DBDIR}/${DBNAME}.lrl $DEST_DBDIR $DEST_DBDIR
	if [ $? -ne 0 ]; then
	    failexit "copycomdb2 failed"
	fi
    fi

    df $DBDIR | awk '{print $1 }' | grep "tmpfs\|nfs" && echo "setattr directio 0" >> $DEST_DBDIR/${destdb}.lrl
    echo "verbose_fills on" >> $DEST_DBDIR/${destdb}.lrl

    if [ -n "$PMUXPORT" ] ; then
        echo "portmux_port $PMUXPORT" >> $DEST_DBDIR/${destdb}.lrl
        echo "portmux_bind_path $pmux_socket" >> $DEST_DBDIR/${destdb}.lrl
    fi

    replog=$TESTDIR/logs/$destdb.db

    if [[ -n "$repalive" ]]; then
        # cd to dbdir so we get potential core where we expect it
        (cd $DBDIR; $COMDB2_EXE $destdb --lrl $DEST_DBDIR/${destdb}.lrl --pidfile $DEST_DBDIR/${destdb}.pid >$replog 2>&1) &
    else
        (cd $DBDIR; timeout --kill-after=5s $TEST_TIMEOUT $COMDB2_EXE $destdb --lrl $DEST_DBDIR/${destdb}.lrl --pidfile $DEST_DBDIR/${destdb}.pid >$replog 2>&1) &
    fi

    out=
    retries=0
    while [[ "$out" != "1" ]]; do
        out=$(${CDB2SQL_EXE} --tabs $destdb --host localhost 'select 1' 2>/dev/null)
        sleep 1

        let retries=retries+1

        if [ $retries -eq 10 ]; then
            failexit "Timeout waiting for local replicant to come up"
        fi
    done
}

function cleanup_abort()
{
    # If pkill is always available, use pkill -F fl.pid
    kill -6 $(cat $DEST_DBDIR/${destdb}.pid)
    [[ $dgpid != 0 ]] && kill -9 $dgpid
}

function cleanup()
{
    kill -9 $(cat $DEST_DBDIR/${destdb}.pid)
    [[ $dgpid != 0 ]] && kill -9 $dgpid
}

function wait_for_catchup()
{
    local start=$SECONDS
    local mnode=""
    local c_lsn=""
    local r_lsn=""

    while [ -z "$mnode" ] || [ -z "$c_lsn" ] || [ -z "$r_lsn" ] || [ "$r_lsn" -ne "$c_lsn" ]; do
        sleep 0.5
        if [ $((SECONDS-start)) -gt $SLEEPAMOUNT ] ; then
            break;
        fi
        mnode=`getmaster`
        if [ -z "$mnode" ] ; then continue ; fi
        c_lsn=`$CDB2SQL_EXE --tabs $CDB2_OPTIONS $dbname --host $mnode 'exec procedure sys.cmd.send("bdb cluster")' | grep "MASTER l" | cut -f3 -d":" | cut -f1 -d" "`

        r_lsn=`$CDB2SQL_EXE --tabs $CDB2_OPTIONS $destdb local 'exec procedure sys.cmd.send("bdb cluster")' | grep "MASTER l" | cut -f3 -d":" | cut -f1 -d" "`
    done

    if [ "$r_lsn" -ne "$c_lsn" ] ; then
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS $dbname --host $mnode 'select * from comdb2_transaction_logs(NULL, NULL, 4) limit 1' > cl.out
        $CDB2SQL_EXE --tabs $CDB2_OPTIONS $destdb local 'select * from comdb2_transaction_logs(NULL, NULL, 4) limit 1' > pr.out
        if diff cl.out pr.out ; then
            echo "comdb2_transaction_logs are the same, continue"
            #sleep 1 
        else
            failexit "The wait_for_lsn is not enough and we need the extra sleep because lsn on replicant can move ahead--as local log--then roll back"
        fi
    fi
}

function run_tests()
{
    # iterate over each test: for every .src.sql and .src.sh file there is a .query.sql file to check
    for file in `ls *.src.sql *src.sh | sort -V`; do
        # for each sql test execute it
        if [ "${file: -3}" == "sql" ]; then
            ${CDB2SQL_EXE} -s --tabs --maxretries=100000 -f $file ${CDB2_OPTIONS} $dbname default || failexit "Error from $file"
            query_cmd=$(echo $file | sed 's/\.src\.sql//').query.sql

        else
            source ./"$file"

            query_cmd=$(echo $file | sed 's/\.src\.sh//').query.sql
        fi

        if [ $((RANDOM % 3)) -eq 1 ] ; then
            downgradeonce $dbname
        fi

        is_ok=1
        while [ $is_ok -ne 0 ] ; do
            sleep 2
            ${CDB2SQL_EXE} -s --tabs --maxretries=100000 -v -f $query_cmd ${CDB2_OPTIONS} $dbname default 2> src.err > src.out 
            is_ok=$?
        done

        wait_for_catchup

        ${CDB2SQL_EXE} -s --tabs -f $query_cmd $destdb --host localhost 2> dest.err > dest.out

        if ! diff src.out dest.out ; then
            echo "Replicant not updated [correctly] vimdiff $PWD/{src.out,dest.out}"
            sleep 1
            src=$(${CDB2SQL_EXE} -s --tabs -f $query_cmd ${CDB2_OPTIONS} $dbname default 2>&1 ) 
            dest=$(${CDB2SQL_EXE} -s --tabs -f $query_cmd $destdb --host localhost 2>&1 )
            failexit "Failed on $file test."
        fi
    done
}

trap - INT EXIT

override_physrep_sp
setup_replicant
./generate_tests.sh
run_tests
cleanup

exit 0

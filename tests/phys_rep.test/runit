#!/usr/bin/env bash

env
dbname=$1
NRECS=10
NRUNS=100

set -x

destdb=${TESTCASE}dest${TESTID}
DEST_DBDIR=${DBDIR}/$destdb
mkdir -p $DEST_DBDIR

# use copycomdb2 to create a physical replicant

$COPYCOMDB2_EXE -H ${destdb} -y localhost ${DBDIR}/$dbname.lrl $DEST_DBDIR

if [ ! $? -eq 0 ]; then
    echo "copycomdb2 failed"
    exit 1
fi

df $DBDIR | awk '{print $1 }' | grep "tmpfs\|nfs" && echo "setattr directio 0" >> $DEST_DBDIR/${destdb}.lrl

if [ -n "$PMUXPORT" ] ; then
    echo "portmux_port $PMUXPORT" >> $DEST_DBDIR/${destdb}.lrl
    echo "portmux_bind_path $pmux_socket" >> $DEST_DBDIR/${destdb}.lrl
fi
comdb2 $destdb -lrl $DEST_DBDIR/${destdb}.lrl -pidfile $DEST_DBDIR/${destdb}.pid &

out=
while [[ "$out" != "1" ]]; do
    out=$(CDB2SQL_EXE --tabs ${CDB2_OPTIONS} $destdb local 'select 1' 2>/dev/null)
    sleep 1
done

# requires $1 and $2
equal_queries() {
    lhs="$1" 
    rhs="$2"

    [ "$lhs" = "$rhs" ]
}

cleanup() {
    kill -9 $(cat $DEST_DBDIR/${destdb}.pid)
}

# generate our tests that we will use
set +x
source ./generate_tests.sh
set -x

# iterate over each test
for sql in `ls *.src.sql | sort -V`; do
    $(CDB2SQL_EXE -s --tabs -f $sql ${CDB2_OPTIONS} $dbname default 2>&1 > /dev/null) 
    query_cmd=$(echo $sql | sed 's/\.src\.sql//').query.sql

    src=$(CDB2SQL_EXE -s --tabs -f $query_cmd ${CDB2_OPTIONS} $dbname default 2>&1 | md5sum) 
    dest=$(CDB2SQL_EXE -s --tabs -f $query_cmd ${CDB2_OPTIONS} $destdb local 2>&1 | md5sum)

    failed=1
    for i in `seq 1 5`;
    do
        if ! $(equal_queries "$src" "$dest"); then
            echo 'Replicant not updated'
            sleep 1
            src=$(CDB2SQL_EXE -s --tabs -f $query_cmd ${CDB2_OPTIONS} $dbname default 2>&1 | md5sum) 
            dest=$(CDB2SQL_EXE -s --tabs -f $query_cmd ${CDB2_OPTIONS} $destdb local 2>&1 | md5sum)
            continue
        fi
        
        failed=0
        break
    done

    if ! [ $failed -eq 0 ]; then
        echo "Failed on $sql test."
        $(cleanup)
        exit 1
    fi
done

# test truncation and application of logs from stored procedures

# src_add_table=$(CDB2SQL_EXE ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | md5sum)
# dest_add_table=$(CDB2SQL_EXE ${CDB2_OPTIONS} $destdb local "select * from t1" | sort | md5sum)
# echo "src $src dest $dest"

# for i in $(seq 1 $NRECS); do
#     echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values ($i, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());"
# done | CDB2SQL_EXE -s ${CDB2_OPTIONS} $dbname default - >/dev/null

# for i in $(seq 1 $NRUNS); do
#     what=$(($RANDOM % 3))
#     id=$(($RANDOM % $NRECS))
#     case $what in
#         0)  echo "insert into t1 (id, a, b, c, d, e, f, g, h, i, j) values ($id, 1, 2, 3, 4, 5, 6.000000, 7.000000, 'eight', x'99', now());"
#         ;;
#         1)  echo "delete from t1 where id = $id limit 1"
#         ;;
#         2)  echo "update t1 set a=a+1, b=b+2 where id=$id"
#         ;;
#     esac
# done | CDB2SQL_EXE -s ${CDB2_OPTIONS} $dbname default - >/dev/null

# src_rand=$(CDB2SQL_EXE ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | md5sum)
# dest_rand=$(CDB2SQL_EXE ${CDB2_OPTIONS} $destdb local "select * from t1" | sort | md5sum)
# echo "src $src dest $dest"

# echo "Testing truncate table"
# CDB2SQL_EXE ${CDB2_OPTIONS} $dbname default "truncate t1"
# # run the replication step
# ${TESTSBUILDDIR}/localrep $dbname $destdb 2>&1
# src2=$(CDB2SQL_EXE ${CDB2_OPTIONS} $dbname default "select * from t1" | sort | md5sum)
# dest2=$(CDB2SQL_EXE ${CDB2_OPTIONS} $destdb local "select * from t1" | sort | md5sum)
# echo "src2 $src2 dest2 $dest2"

# cleanup
# kill -9 $(cat $DBDIR/${destdb}.pid)
# echo deregister from pmux ${destdb}
# ${TESTSROOTDIR}/tools/send_msg_port.sh "del comdb2/replication/${destdb} " ${pmux_port}

$(cleanup)

exit 0

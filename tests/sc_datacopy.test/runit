#!/usr/bin/env bash

maxt1=100000

wrpid=-1

# Grab my database name.
dbnm=$1

# Verify that the user at least supplied a dbname
if [[ -z "$dbnm" ]]; then

    echo "Testcase requires <dbname> argument."
    exit 1

fi

function errquit
{
    typeset msg=$1

    echo "ERROR: $msg"
    echo "Testcase failed."

    [[ $wrpid != "-1" ]] && kill -9 $wrpid >/dev/null 2>&1

    exit 1
}

function do_verify
{
    typeset cnt=0

    cdb2sql ${CDB2_OPTIONS} $dbnm default "exec procedure sys.cmd.verify('t1')" &> verify.out
    if ! grep succeeded verify.out > /dev/null ; then
        errquit "Verify failed. see verify.out"
    fi
}

function update_t1
{
    typeset id
    typeset out

    id=$(( RANDOM % (maxt1) ))
    cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set time = `echo $(($(date +%s%N)/1000000))` where id = $id" >> update.log
    if [[ $? != 0 ]]; then
        errquit "update failed, see update.log"
    fi
}

function writer
{
    while true; do
        update_t1
        sleep 0.02
    done
}

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
drop table if exists t1
create table t1 {
    tag ondisk {
        longlong id
        u_longlong time
    }
    keys {
        datacopy "ID" = id
    }
}$$
EOF

cdb2sql ${CDB2_OPTIONS} $dbnm default "WITH RECURSIVE cnt(x) AS (SELECT 1 UNION ALL SELECT x+1 FROM cnt LIMIT $maxt1) insert into t1(id, time) SELECT x, `echo $(($(date +%s%N)/1000000))` FROM cnt"
if [[ $? != 0 ]]; then
    echo "initial insert failed"
    exit 1
fi

# Trap to errquit if the user presses Ctrl-C
trap "errquit \"Cancelling test on INT EXIT\"" INT EXIT

writer &
wrpid=$!
echo "Background writer pid: $wrpid"

echo "Starting schemachange"
cdb2sql ${CDB2_OPTIONS} $dbnm default "PUT SCHEMACHANGE COMMITSLEEP 3"
cdb2sql ${CDB2_OPTIONS} $dbnm default "PUT SCHEMACHANGE CONVERTSLEEP 3"

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
alter table t1 {
    tag ondisk {
        longlong id
        longlong time
    }
    keys {
        datacopy "ID" = id
    }
}$$
EOF
if [[ $? != 0 ]]; then
    errquit "schemachange 1 failed"
fi
do_verify

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
alter table t1 {
    tag ondisk {
        longlong id
        double time
    }
    keys {
        datacopy "ID" = id
    }
}$$
EOF
if [[ $? != 0 ]]; then
    errquit "schemachange 2 failed"
fi
do_verify

cdb2sql ${CDB2_OPTIONS} $dbnm default - <<"EOF"
alter table t1 {
    tag ondisk {
        longlong id
        u_longlong time
    }
    keys {
        datacopy "ID" = (longlong)"id*1"
    }
}$$
EOF
if [[ $? != 0 ]]; then
    errquit "schemachange 3 failed"
fi
do_verify

# Remove trap-command.
trap - INT EXIT

[[ $wrpid != "-1" ]] && kill -9 $wrpid >/dev/null 2>&1

echo "Testcase passed."
exit 0

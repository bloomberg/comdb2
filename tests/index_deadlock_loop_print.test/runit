#!/usr/bin/env bash
bash -n "$0" | exit 1

set -e
set -x
source ${TESTSROOTDIR}/tools/runit_common.sh
################################################################################

# args
dbnm=$1

cdb2sql ${CDB2_OPTIONS} $DBNAME default <<"EOF"
create table t1 {
schema
{   
    int  i
}
keys
{
    "PK"=i
}
}
EOF


cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t1 values(1002)' #make sure 1002 has lower genid than 1 so no reordering
cdb2sql ${CDB2_OPTIONS} $dbnm default 'insert into t1 select * from generate_series(1,1001)'

cdb2sql ${CDB2_OPTIONS} $dbnm default "update t1 set i=3 where i=3"
#FTR print genid as follows. Note that the last 2 bytes are stripe and updid:
# stripe     4 bits -- the rightmost digit (max 16),
# update id 12 bits -- next three digits (max 4096)
cdb2sql ${CDB2_OPTIONS} $dbnm default "select printf('%llx',comdb2_rowid) as genid, i from t1 order by i" > content0.out

cluster=`cdb2sql --tabs ${CDB2_OPTIONS} $dbnm default 'exec procedure sys.cmd.send("bdb cluster")' | grep lsn | cut -f1 -d':' `
for node in $cluster ; do
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('debg 500')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('ndebg 500')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('bdb verbdeadlock 1')"
#    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('on verbose_deadlocks')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('bdb setattr DELAY_WRITES_IN_RECORD_C 1000')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('print_deadlock_cycles on')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('track_curtran_locks on')"
    cdb2sql ${CDB2_OPTIONS} $dbnm --host $node "exec procedure sys.cmd.send('reql events detailed on')"
done

f1() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default <<"EOF"
begin
delete from t1 where i=500
delete from t1 where i=1001
commit
EOF
}

f2() {
    cdb2sql ${CDB2_OPTIONS} $dbnm default <<"EOF"
begin
delete from t1 where i=1002
delete from t1 where i=501
commit
EOF
}

#run two transactions that will get in a deadlock
#will see DEADLOCK-CYCLE: in db log
f1 &
f2 &

wait

cdb2sql ${CDB2_OPTIONS} $dbnm default "select i as value from t1 order by i" > content1.out
cdb2sql ${CDB2_OPTIONS} $dbnm default 'select * from generate_series(1,499)' > content2.out
cdb2sql ${CDB2_OPTIONS} $dbnm default 'select * from generate_series(502,1000)' >> content2.out

set +e

if ! diff $PWD/{content1.out,content2.out} ; then 
    failexit "content not what it is supposed to be"
fi

master=`getmaster`
logfl=`cdb2sql ${CDB2_OPTIONS} --tabs $dbnm --host $master "exec procedure sys.cmd.send('reql stat')" | grep "Eventlog enabled" | cut -f2 -d ':'`
if [ "x$logfl" == "x" ]; then
    cdb2sql ${CDB2_OPTIONS} --tabs $dbnm --host $master "exec procedure sys.cmd.send('reql stat')"
    failexit "cant find events logfile in reql stat on $master"
fi

cdb2sql ${CDB2_OPTIONS} $dbnm --host $master "exec procedure sys.cmd.send('reql events roll')"

sleep 4

if [ $master != `hostname` ]; then
    scp $master:$logfl $logfl
fi

logflunziped=${logfl}.unzipped 
zcat $logfl > $logflunziped

cnt=$(jq -cr 'if has("deadlock_cycle") then .deadlock_cycle | map(.cnonce) | join("\n") else empty end' < $logflunziped | wc -l)
if [ $cnt != 2 ]; then
    failexit 'expected two cnonces reported part of deadlock_cycle in eventslog'
fi

echo "Testcase passed."

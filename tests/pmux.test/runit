#!/usr/bin/env bash
bash -n "$0" | exit 1

source ${TESTSROOTDIR}/tools/runit_common.sh
set -x

if [ "$TESTCASE" == "pmux_sqlite_file_generated" ]; then
    PMUX_FILE_FLAG="-l"
    STARTRANGE=30200
    INITPORT=19500
    PMUX_FILE=${PWD}/pmux.sqlite
elif [ "$TESTCASE" == "pmux_sqlite_memory_generated" ]; then
    STARTRANGE=30100
    PMUX_FILE_FLAG="-l"
    INITPORT=19600
    PMUX_FILE="::memory::"
else
    STARTRANGE=30000
    PMUX_FILE_FLAG=""
    INITPORT=19700
fi

if [[ -z "$PMUX_EXE" ]]; then
    echo "PMUX_EXE is not set"
    exit 1
fi

if [[ -z "$TESTSROOTDIR" ]]; then
    export TESTSROOTDIR=${PWD}/..
fi

mkdir -p $TMPDIR
if df $TMPDIR | awk '{print $1 }' | grep "tmpfs\|nfs" ; then
    export TMPDIR=/tmp
    echo "setattr directio 0" > lrl
fi

${PMUX_EXE} a b c &> err.out
cat >> err.exp <<EOF
${PMUX_EXE}: invalid argument 'a'
Usage: pmux [-h] [-c pmuxdb cluster] [-d pmuxdb name] [-b bind path]
[-p listen port] [-r free ports range x:y][-l|-n][-f]

Options:
 -h            This help message
 -c            Cluster information for pmuxdb
 -d            Use Comdb2 to save port allocations
 -b            Unix bind path
 -p            Port pmux will listen on
 -r            Range of ports to allocate for databases
 -l            Use file to persist port allocation
 -n            Do not persist port allocation (default)
 -f            Run in foreground rather than put to background
EOF

if ! diff err.out err.exp; then
    failexit "error msg not what we were expecting (checkout diff ${PWD}/{err.out,err.exp})"
fi

RANGE="$STARTRANGE:$((STARTRANGE+99))"
port=$INITPORT
while :; do
    export COMDB2_PMUX_PORT=${port}
    # NB: if running tests off /dev/shm you will need to set `TMPDIR=/tmp` on a real FS
    [ -f ${TMPDIR}/pmux.${COMDB2_PMUX_PORT} ] && rm ${TMPDIR}/pmux.${COMDB2_PMUX_PORT}
    COMDB2_PMUX_FILE=${PMUX_FILE} ${PMUX_EXE} ${PMUX_FILE_FLAG} -f -p ${COMDB2_PMUX_PORT} -b ${TMPDIR}/pmux.${COMDB2_PMUX_PORT} -r $RANGE &> pmux.out &
    pid=$!
    sleep 2
    # check if we can send signal
    kill -0 $pid
    [[ $? -eq 0 ]] && break
    port=$(($port+1)) #try with a different port
    if [[ $port -eq $((INITPORT+20)) ]]; then
        echo "Failed in $((port-INITPORT)) tries" >&2
        exit 1
    fi
done

cleanup() {
    kill -9 ${pid}
    rm ${TMPDIR}/pmux.${COMDB2_PMUX_PORT}
}

trap cleanup INT EXIT

rng=`echo "range" | nc -W 1 localhost ${COMDB2_PMUX_PORT}`
assertres "$rng" "$RANGE"

(time ${TESTSBUILDDIR}/pmux_queries --pmuxport ${COMDB2_PMUX_PORT} --numthreads 10 --iterations 100) &> out.txt
res=$?
if [ $res -ne 0 ] ; then
    failexit "pmux_queries returns $res"
fi

cat out.txt
runtime=`grep real out.txt | sed 's/[^m]*m\([^\.]*\)\..*/\1/g'`
    if [ "$runtime" -lt 1 ] ; then
    time ${TESTSBUILDDIR}/pmux_queries --pmuxport ${COMDB2_PMUX_PORT} --numthreads 10 --iterations 10000
    res=$?
    if [ $res -ne 0 ] ; then
        failexit "pmux_queries returns $res"
    fi
fi

time ${TESTSBUILDDIR}/pmux_queries --pmuxport ${COMDB2_PMUX_PORT} --numthreads 10 --iterations 100000 --speedtest
res=$?
if [ $res -ne 0 ] ; then
    failexit "pmux_queries returns $res"
fi

PMUXPORT=${COMDB2_PMUX_PORT} START_PORT=$STARTRANGE NUM_PORTS=100 UNIX_PATH="${TMPDIR}/pmux.${COMDB2_PMUX_PORT}" ./portmux.py --failfast --verbose
res=$?
if [ $res -ne 0 ] ; then
    failexit "pmux_queries returns $res"
fi

# To run a specific test called name:
#./portmux.py --verbose Pmux.test_name


atstart=$(ls -l /proc/$pid/fd | wc -l)
echo "have $atstart fds at start"
MAXDBS=10
mkdir -p ${TESTDIR}/var/log/cdb2/

typeset -A createpids
for i in $(seq 1 $MAXDBS); do 
    NM=pmuxtestdb_${COMDB2_PMUX_PORT}_${i}
    TSTDBDIR=${PWD}/$NM
    mkdir $TSTDBDIR
    DBLRL=${PWD}/${NM}/${NM}.lrl
    [ -f lrl ] && cp lrl ${DBLRL}
    echo -e "name    ${DBNAME}\ndir     ${TSTDBDIR}\n" >> ${DBLRL}
    ${COMDB2_EXE} ${NM} --create --lrl ${DBLRL} &
    createpids[$i]=$!
done

for i in $(seq 1 $MAXDBS); do 
    wait ${createpids[$i]}
done

typeset -A dbpids
for i in $(seq 1 $MAXDBS); do 
    DBLRL=${PWD}/${NM}/${NM}.lrl
    echo "portmux_port ${COMDB2_PMUX_PORT=}" >> $DBLRL
    echo "portmux_bind_path ${TMPDIR}/pmux.${COMDB2_PMUX_PORT} " >> $DBLRL
	${COMDB2_EXE} ${NM} --lrl $DBLRL &
    dbpids[$i]=$!
done

function waitfordb {
	sel=$(${CDB2SQL_EXE} --tabs --cdb2cfg cdb2sql.cfg $1 "select 1" 2>&1)
	while [[ "$sel" != "1" ]]; do
		sleep 1
	    sel=$(${CDB2SQL_EXE} --tabs --cdb2cfg cdb2sql.cfg $1 "select 1" 2>&1)
	done
}

echo "comdb2_config:portmuxport=$port" > cdb2sql.cfg

for i in $(seq 1 $MAXDBS); do 
	waitfordb ${NM}
done

atrun=$(ls -l /proc/$pid/fd | wc -l)

for i in $(seq 1 $MAXDBS); do 
    kill -9 ${dbpids[$i]}
done

atend=$(ls -l /proc/$pid/fd | wc -l)

# Remove trap-command.
trap - INT EXIT
cleanup

if [[ $atend -eq $atstart ]]; then
	echo "At start had $atstart fds, at end have $atend."
	exit 0
fi

echo "At start had $atstart fds, during run had $atrun fds, gone at end"

#delete ${NM} dir now that test is successful
if [ "$CLEANUPDBDIR" != "0" ] ; then
    for i in $(seq 1 $MAXDBS); do 
        rm -rf ${NM}
        rm -f ${TESTDIR}/var/log/cdb2/${NM}.* ${TESTDIR}/tmp/${NM}.* ${TMPDIR}/cdb2/${NM}.*
    done
fi

exit 0

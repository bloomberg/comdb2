/*-
 * We have moved this to '.nogen' to prevent sbuild from
 * regenerating txn_auto.c on the fly.  If you need to 
 * regen this for some reason, make sure to reapply all of 
 * our local edits.
 *
 * See the file LICENSE for redistribution information.
 *
 * Copyright (c) 1996-2003
 *	Sleepycat Software.  All rights reserved.
 *
 * $Id: txn.src,v 11.24 2003/11/14 05:32:33 ubell Exp $
 */

PREFIX	__txn
DBPRIVATE

INCLUDE	#include "db_config.h"
INCLUDE
INCLUDE #ifndef NO_SYSTEM_INCLUDES
INCLUDE #include <sys/types.h>
INCLUDE
INCLUDE #if TIME_WITH_SYS_TIME
INCLUDE #include <sys/time.h>
INCLUDE #include <time.h>
INCLUDE #else
INCLUDE #if HAVE_SYS_TIME_H
INCLUDE #include <sys/time.h>
INCLUDE #else
INCLUDE #include <time.h>
INCLUDE #endif /* HAVE_SYS_TIME_H */
INCLUDE #endif /* TIME_WITH SYS_TIME */
INCLUDE
INCLUDE #include <ctype.h>
INCLUDE #include <string.h>
INCLUDE #endif
INCLUDE
INCLUDE #include "db_int.h"
INCLUDE #include "dbinc/crypto.h"
INCLUDE #include "dbinc/db_page.h"
INCLUDE #include "dbinc/db_dispatch.h"
INCLUDE #include "dbinc/db_am.h"
INCLUDE #include "dbinc/log.h"
INCLUDE #include "dbinc/txn.h"
INCLUDE

/*
 * This is the standard log operation for commit.
 * Note that we are using an int32_t for the timestamp.  This means that
 * in 2039 we will need to deprecate this log record and create one that
 * either changes the Epoch or has a 64-bit offset.
 */
BEGIN regop		10
ARG	opcode		u_int32_t	lu
TIME	timestamp	int32_t		ld
DBT	locks		DBT		s
END

/*
 * This is the checkpoint record.  It contains the lsn that the checkpoint
 * guarantees and a pointer to the last checkpoint so we can walk backwards
 * by checkpoint.
 *
 * ckp_lsn:
 *	The lsn in the log of the most recent point at which all begun
 *	transactions have been aborted.  This is the point for which
 *	the checkpoint is relevant.
 * last_ckp:
 *	The previous checkpoint.
 * timestamp:
 *	See comment in commit about timestamps.
 */
BEGIN ckp		11
POINTER	ckp_lsn		DB_LSN *	lu
POINTER	last_ckp	DB_LSN *	lu
TIME	timestamp	int32_t		ld
ARG	rep_gen		u_int32_t	ld
END

/*
 * This is the (new) log operation for a child commit.  It is
 * logged as a record in the PARENT.  The child field contains
 * the transaction ID of the child committing and the c_lsn is
 * the last LSN of the child's log trail.
 */
BEGIN child		12
ARG	child	u_int32_t	lx
POINTER	c_lsn	DB_LSN *	lu
END


/*
 * This is the standard log operation for prepare.
 */
BEGIN xa_regop		13
ARG	opcode		u_int32_t	lu
DBT	xid		DBT		s
ARG	formatID	int32_t		ld
ARG	gtrid		u_int32_t	u
ARG	bqual		u_int32_t	u
POINTER	begin_lsn	DB_LSN *	lu
DBT	locks		DBT		s
END

/*
 * Log the fact that we are recycling txnids.
 */
BEGIN recycle		14
ARG	min		u_int32_t	u
ARG	max		u_int32_t	u
END


/*
 * Physical commit for a rowlocks transaction.  With this, a replicant knows 
 * without parsing the logstream that this is a physical commit for a logical
 * transaction, it knows the ltranid for that transaction, and it has a list 
 * of the rowlocks that it must gather.  Additionally, the lflags variable 
 * will have a bit-set if this physical transaction contains a logical-commit
 * record.
 *
 * I added this record so that we can lock all of the pagelocks and rowlocks
 * and do an early ack immediately, without incurring the additional overhead
 * of parsing the log-stream (which I'm finding is really substantial).
 */
BEGIN regop_rowlocks		15
ARG	opcode		u_int32_t	lu
ARG ltranid   genid_t llx
POINTER begin_lsn DB_LSN *  lu
POINTER	last_commit_lsn	DB_LSN *	lu
ARG context   genid_t llx
ARG	timestamp	u_int64_t	llx
ARG lflags      u_int32_t   u
ARG generation  u_int32_t   u
DBT	locks		DBT		s
DBT	rowlocks	DBT		s
END


/*
 * Regop gen commit records contain the generation number of the master 
 * which committed them.
 */
BEGIN regop_gen             16
ARG	opcode		u_int32_t	lu
ARG generation  u_int32_t   u
ARG context   genid_t llx
TIME	timestamp	u_int64_t		llx
DBT	locks		DBT		s
END


/*
 * Prepare is a commit-record with a begin-lsn, the distributed txnid, the 
 * coordinator's dbname, and coordinator's tier.  We require the begin-lsn
 * for log-deletion: if a master crashes prior to knowing the outcome of a
 * prepared transaction, a new master will need to re-acquire all of the 
 * transaction's locks in recovery, and create a 'prepared-txn' to hand up
 * to a higher layer.  It will be up to the new master to determine the 
 * fate of this prepared transaction, and then to write a commit or abort.
 */
BEGIN dist_prepare			17
ARG	opcode	u_int32_t		lu
POINTER	begin_lsn DB_LSN *	lu
ARG dist_txnid	genid_t		llx
ARG lflags      u_int32_t   u
ARG coordinator_gen	u_int32_t	u
DBT coordinator_name DBT	s
DBT coordinator_tier DBT	s
DBT blkseq_key  DBT			s
DBT	locks	DBT				s
END

/*
 * Prepare-abort aborts a prepared transaction.  We need this for recovery
 * to distinguish between outstanding and resolved prepared transactions.
 */
BEGIN dist_abort			18
ARG	opcode		u_int32_t	lu
ARG dist_txnid	genid_t		llx
DBT blkseq_key  DBT		 s
END

/*
 * Commit a prepared transaction.  The format is identical to regop_gen,
 * aside from there being no field for locks.  The locks are listed in the
 * prepare record.
 */
BEGIN dist_commit			19
ARG	opcode		u_int32_t	lu
ARG dist_txnid	genid_t		llx
ARG generation	u_int32_t	u
ARG context		genid_t		llx
TIME timestamp	u_int64_t	llx
END

//package com.bloomberg.cdb2;
syntax = "proto2";

option java_package = "com.bloomberg.comdb2.jdbc";

enum CDB2RequestType {
    CDB2QUERY = 1;
    /*
    SQLQUERY  = 2;
    DBINFO    = 3;
    */
    RESET     = 108;
    /* To tell the server to perform SSL_accept(). */
    SSLCONN   = 121;
}

enum CDB2ClientFeatures {
    SKIP_INTRANS_RESULTS = 1;
    ALLOW_MASTER_EXEC    = 2;
    ALLOW_MASTER_DBINFO  = 3;
    ALLOW_QUEUING        = 4;
    /* To tell the server that the client is SSL-capable. */
    SSL                  = 5;
    /* flat column values. see sqlresponse.proto for more details. */
    FLAT_COL_VALS        = 6;
    /* request server to send back query fingerprint */
    REQUEST_FP           = 7;
    /* rows come in sqlite format */
    SQLITE_ROW_FORMAT    = 9;
    /* cdb2api is being invoked by comdb2api library (comdb2api -> cdb2api -> * comdb2) */
    REQUIRE_FASTSQL      = 10;
    /* To tell the server that the client can redirect an fdb query */
    CAN_REDIRECT_FDB     = 11;
}

message CDB2_FLAG {
  required int32 option = 1;
  required int32 value = 2;
}

enum CDB2Dist {
    PREPARE              = 1;
    DISCARD              = 2;
    PREPARED             = 3;
    FAILED_PREPARE       = 4;
    COMMIT               = 5;
    ABORT                = 6;
    PROPAGATED           = 7;
    HEARTBEAT            = 8;
}

message CDB2_SQLQUERY {
  required string dbname = 1;
  required string sql_query = 2;
  repeated CDB2_FLAG flag = 3;
  required bool little_endian = 4;
  message bindvalue {
    message i32_array { repeated int32 elements = 1 [packed=true]; }
    message i64_array { repeated int64 elements = 1 [packed=true]; }
    message dbl_array { repeated double elements = 1 [packed=true]; }
    message txt_array { repeated string elements = 1; }
    message blob_array { repeated bytes elements = 1; }
    message array {
      oneof type {
        i32_array i32 = 1;
        i64_array i64 = 2;
        dbl_array dbl = 3;
        txt_array txt = 4;
        blob_array blob = 5;
      }
    }
    required string varname = 1;
    required int32  type    = 2;
    required bytes  value   = 3;
    optional bool   isnull  = 4 [default = false];
    optional int32  index   = 5;
    optional array  carray  = 6;
  }
  repeated bindvalue bindvars = 5;
  optional string tzname = 6;
  repeated string set_flags = 7;
  repeated int32 types = 8;
  optional string mach_class = 9 [default = "unknown"];
  optional bytes cnonce = 10;
  message snapshotinfo {
    required int32  file    = 1;
    required int32  offset  = 2;
  }
  optional snapshotinfo snapshot_info = 11; 
  optional int64 skip_rows = 12; // number of rows to be skipped, -1 (skip all rows)
  optional int32 retry = 13  [default = 0]; // query retry count for a disconnected connection
  // if begin retry < query retry then skip all the rows from server, if same then skip (skip_rows)
  repeated int32 features = 14; // Client can negotiate on this.
  message cinfo {
    required int32  pid      = 1;
    required uint64 th_id    = 2;
    required int32  host_id  = 3;
    optional string argv0    = 4;
    optional string stack    = 5;
  }
  optional cinfo client_info = 15;
  repeated string context    = 16; // Client context messages.
  message reqinfo {
      required int64 timestampus = 1; // client timestamp of this message.
      required int32 num_retries = 2; // client retry count including hops to other nodes
  }
  optional reqinfo req_info = 17; //request info
  message IdentityBlob {
      required string principal = 1;
      required int64 majorVersion = 2;
      required int64 minorVersion = 3;
      required bytes data = 4;
  }
  optional IdentityBlob identity = 18;
}

message CDB2_DBINFO {
  required string dbname = 1;
  required bool little_endian = 2;
  optional bool want_effects = 3;
}

message CDB2_DISTTXN {
  required string dbname = 1;
  message Disttxn {
    required int32 operation = 1;
    required bool async = 2;
    required string txnid = 3;
    optional string name = 4;
    optional string tier = 5;
    optional string master = 6;
    optional int32 rcode = 7;
    optional int32 outrc = 8;
    optional string errmsg = 9;
  }
  optional Disttxn disttxn = 2;
}

message CDB2_QUERY {
  optional CDB2_SQLQUERY sqlquery = 1;
  optional CDB2_DBINFO   dbinfo = 2;
  optional string        spcmd  = 3;
  optional CDB2_DISTTXN  disttxn = 4;
}
